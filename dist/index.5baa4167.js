// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"hF8lp":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "138b6a135baa4167";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"igcvL":[function(require,module,exports) {
var _clientS3 = require("@aws-sdk/client-s3");
var _config = require("dotenv/config");
require("5de74e37d10d60b1").config(".env");
console.log("DO00NQU8JQGM83LYDVFY");
const s3Client = new (0, _clientS3.S3)({
    forcePathStyle: false,
    endpoint: "https://backend.nyc3.digitaloceanspaces.com",
    region: "us-east-1",
    credentials: {
        accessKeyId: "DO00NQU8JQGM83LYDVFY",
        secretAccessKey: "DzD3MJ+56Jyn2uKDm5IH1ZO08uuLSlVFnwFolxqDRPA"
    }
});
console.log(s3Client);
const createBucketParams = (file)=>{
    return {
        Bucket: "backend",
        Key: file,
        Body: "content"
    };
};
const uploadFunc = async (bucketParams)=>{
    try {
        const data = await s3Client.send(new (0, _clientS3.PutObjectCommand)(bucketParams));
        console.log("Successfully uploaded object: " + bucketParams.Bucket + "/" + bucketParams.Key);
        return data;
    } catch (err) {
        console.log("Error", err);
    }
    console.log("uploading");
};
const uploadInput = document.getElementById("uploadInput");
const upload = document.querySelector(".form-submit");
let files = [];
uploadInput.addEventListener("change", ()=>{
    const bucketParams = createBucketParams(uploadInput.files[0].name);
    console.log(bucketParams);
    upload.addEventListener("click", ()=>{
        const res = uploadFunc(bucketParams);
        console.log(res);
    });
}, false);

},{"@aws-sdk/client-s3":"9b6rC","dotenv/config":"1k4UK","5de74e37d10d60b1":"lErsX"}],"9b6rC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "S3ServiceException", ()=>(0, _s3ServiceException.S3ServiceException));
var _s3Client = require("./S3Client");
parcelHelpers.exportAll(_s3Client, exports);
var _s3 = require("./S3");
parcelHelpers.exportAll(_s3, exports);
var _commands = require("./commands");
parcelHelpers.exportAll(_commands, exports);
var _pagination = require("./pagination");
parcelHelpers.exportAll(_pagination, exports);
var _waiters = require("./waiters");
parcelHelpers.exportAll(_waiters, exports);
var _models = require("./models");
parcelHelpers.exportAll(_models, exports);
var _s3ServiceException = require("./models/S3ServiceException");

},{"./S3Client":false,"./S3":"cLQRb","./commands":"aGg4b","./pagination":false,"./waiters":false,"./models":false,"./models/S3ServiceException":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c6tAy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__Client", ()=>(0, _smithyClient.Client));
parcelHelpers.export(exports, "S3Client", ()=>S3Client);
var _configResolver = require("@aws-sdk/config-resolver");
var _eventstreamSerdeConfigResolver = require("@aws-sdk/eventstream-serde-config-resolver");
var _middlewareContentLength = require("@aws-sdk/middleware-content-length");
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareExpectContinue = require("@aws-sdk/middleware-expect-continue");
var _middlewareHostHeader = require("@aws-sdk/middleware-host-header");
var _middlewareLogger = require("@aws-sdk/middleware-logger");
var _middlewareRecursionDetection = require("@aws-sdk/middleware-recursion-detection");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _middlewareSdkS3 = require("@aws-sdk/middleware-sdk-s3");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _middlewareUserAgent = require("@aws-sdk/middleware-user-agent");
var _smithyClient = require("@aws-sdk/smithy-client");
var _endpointParameters = require("./endpoint/EndpointParameters");
var _runtimeConfig = require("./runtimeConfig");
class S3Client extends (0, _smithyClient.Client) {
    constructor(configuration){
        const _config_0 = (0, _runtimeConfig.getRuntimeConfig)(configuration);
        const _config_1 = (0, _endpointParameters.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, _configResolver.resolveRegionConfig)(_config_1);
        const _config_3 = (0, _middlewareEndpoint.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, _middlewareRetry.resolveRetryConfig)(_config_3);
        const _config_5 = (0, _middlewareHostHeader.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, _middlewareSigning.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, _middlewareSdkS3.resolveS3Config)(_config_6);
        const _config_8 = (0, _middlewareUserAgent.resolveUserAgentConfig)(_config_7);
        const _config_9 = (0, _eventstreamSerdeConfigResolver.resolveEventStreamSerdeConfig)(_config_8);
        super(_config_9);
        this.config = _config_9;
        this.middlewareStack.use((0, _middlewareRetry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareContentLength.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareHostHeader.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareLogger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareRecursionDetection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareSdkS3.getValidateBucketNamePlugin)(this.config));
        this.middlewareStack.use((0, _middlewareExpectContinue.getAddExpectContinuePlugin)(this.config));
        this.middlewareStack.use((0, _middlewareUserAgent.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}

},{"@aws-sdk/config-resolver":"2Zj28","@aws-sdk/eventstream-serde-config-resolver":"1qWGQ","@aws-sdk/middleware-content-length":"lrscz","@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-expect-continue":"c9L0d","@aws-sdk/middleware-host-header":"8vcXw","@aws-sdk/middleware-logger":"cyEdQ","@aws-sdk/middleware-recursion-detection":"eNPtz","@aws-sdk/middleware-retry":"iRfgc","@aws-sdk/middleware-sdk-s3":"lvLFs","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/middleware-user-agent":"6uBwp","@aws-sdk/smithy-client":"ats0l","./endpoint/EndpointParameters":"iCqTl","./runtimeConfig":"3p984","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Zj28":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _endpointsConfig = require("./endpointsConfig");
parcelHelpers.exportAll(_endpointsConfig, exports);
var _regionConfig = require("./regionConfig");
parcelHelpers.exportAll(_regionConfig, exports);
var _regionInfo = require("./regionInfo");
parcelHelpers.exportAll(_regionInfo, exports);

},{"./endpointsConfig":"5yre7","./regionConfig":"11qKt","./regionInfo":"4W4U0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5yre7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nodeUseDualstackEndpointConfigOptions = require("./NodeUseDualstackEndpointConfigOptions");
parcelHelpers.exportAll(_nodeUseDualstackEndpointConfigOptions, exports);
var _nodeUseFipsEndpointConfigOptions = require("./NodeUseFipsEndpointConfigOptions");
parcelHelpers.exportAll(_nodeUseFipsEndpointConfigOptions, exports);
var _resolveCustomEndpointsConfig = require("./resolveCustomEndpointsConfig");
parcelHelpers.exportAll(_resolveCustomEndpointsConfig, exports);
var _resolveEndpointsConfig = require("./resolveEndpointsConfig");
parcelHelpers.exportAll(_resolveEndpointsConfig, exports);

},{"./NodeUseDualstackEndpointConfigOptions":"8TmVs","./NodeUseFipsEndpointConfigOptions":"huHp0","./resolveCustomEndpointsConfig":"fmKO3","./resolveEndpointsConfig":"abqXi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8TmVs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ENV_USE_DUALSTACK_ENDPOINT", ()=>ENV_USE_DUALSTACK_ENDPOINT);
parcelHelpers.export(exports, "CONFIG_USE_DUALSTACK_ENDPOINT", ()=>CONFIG_USE_DUALSTACK_ENDPOINT);
parcelHelpers.export(exports, "DEFAULT_USE_DUALSTACK_ENDPOINT", ()=>DEFAULT_USE_DUALSTACK_ENDPOINT);
parcelHelpers.export(exports, "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS", ()=>NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS);
var _utilConfigProvider = require("@aws-sdk/util-config-provider");
const ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
const CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
const DEFAULT_USE_DUALSTACK_ENDPOINT = false;
const NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>(0, _utilConfigProvider.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, (0, _utilConfigProvider.SelectorType).ENV),
    configFileSelector: (profile)=>(0, _utilConfigProvider.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, (0, _utilConfigProvider.SelectorType).CONFIG),
    default: false
};

},{"@aws-sdk/util-config-provider":"cKNJV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKNJV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _booleanSelector = require("./booleanSelector");
parcelHelpers.exportAll(_booleanSelector, exports);

},{"./booleanSelector":"a0u8J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a0u8J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SelectorType", ()=>SelectorType);
parcelHelpers.export(exports, "booleanSelector", ()=>booleanSelector);
var SelectorType;
(function(SelectorType) {
    SelectorType["ENV"] = "env";
    SelectorType["CONFIG"] = "shared config entry";
})(SelectorType || (SelectorType = {}));
const booleanSelector = (obj, key, type)=>{
    if (!(key in obj)) return undefined;
    if (obj[key] === "true") return true;
    if (obj[key] === "false") return false;
    throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"huHp0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ENV_USE_FIPS_ENDPOINT", ()=>ENV_USE_FIPS_ENDPOINT);
parcelHelpers.export(exports, "CONFIG_USE_FIPS_ENDPOINT", ()=>CONFIG_USE_FIPS_ENDPOINT);
parcelHelpers.export(exports, "DEFAULT_USE_FIPS_ENDPOINT", ()=>DEFAULT_USE_FIPS_ENDPOINT);
parcelHelpers.export(exports, "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS", ()=>NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS);
var _utilConfigProvider = require("@aws-sdk/util-config-provider");
const ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
const CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
const DEFAULT_USE_FIPS_ENDPOINT = false;
const NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>(0, _utilConfigProvider.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, (0, _utilConfigProvider.SelectorType).ENV),
    configFileSelector: (profile)=>(0, _utilConfigProvider.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, (0, _utilConfigProvider.SelectorType).CONFIG),
    default: false
};

},{"@aws-sdk/util-config-provider":"cKNJV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fmKO3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveCustomEndpointsConfig", ()=>resolveCustomEndpointsConfig);
var _utilMiddleware = require("@aws-sdk/util-middleware");
const resolveCustomEndpointsConfig = (input)=>{
    const { endpoint , urlParser  } = input;
    return {
        ...input,
        tls: input.tls ?? true,
        endpoint: (0, _utilMiddleware.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, _utilMiddleware.normalizeProvider)(input.useDualstackEndpoint ?? false)
    };
};

},{"@aws-sdk/util-middleware":"49kxo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"49kxo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _normalizeProvider = require("./normalizeProvider");
parcelHelpers.exportAll(_normalizeProvider, exports);

},{"./normalizeProvider":"64MuQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"64MuQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "normalizeProvider", ()=>normalizeProvider);
const normalizeProvider = (input)=>{
    if (typeof input === "function") return input;
    const promisified = Promise.resolve(input);
    return ()=>promisified;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"abqXi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEndpointsConfig", ()=>resolveEndpointsConfig);
var _utilMiddleware = require("@aws-sdk/util-middleware");
var _getEndpointFromRegion = require("./utils/getEndpointFromRegion");
const resolveEndpointsConfig = (input)=>{
    const useDualstackEndpoint = (0, _utilMiddleware.normalizeProvider)(input.useDualstackEndpoint ?? false);
    const { endpoint , useFipsEndpoint , urlParser  } = input;
    return {
        ...input,
        tls: input.tls ?? true,
        endpoint: endpoint ? (0, _utilMiddleware.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : ()=>(0, _getEndpointFromRegion.getEndpointFromRegion)({
                ...input,
                useDualstackEndpoint,
                useFipsEndpoint
            }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
    };
};

},{"@aws-sdk/util-middleware":"49kxo","./utils/getEndpointFromRegion":"fyuCA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fyuCA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointFromRegion", ()=>getEndpointFromRegion);
const getEndpointFromRegion = async (input)=>{
    const { tls =true  } = input;
    const region = await input.region();
    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
    if (!dnsHostRegex.test(region)) throw new Error("Invalid region in client config");
    const useDualstackEndpoint = await input.useDualstackEndpoint();
    const useFipsEndpoint = await input.useFipsEndpoint();
    const { hostname  } = await input.regionInfoProvider(region, {
        useDualstackEndpoint,
        useFipsEndpoint
    }) ?? {};
    if (!hostname) throw new Error("Cannot resolve hostname from client config");
    return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"11qKt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _config = require("./config");
parcelHelpers.exportAll(_config, exports);
var _resolveRegionConfig = require("./resolveRegionConfig");
parcelHelpers.exportAll(_resolveRegionConfig, exports);

},{"./config":"4oYBw","./resolveRegionConfig":"jVRc8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4oYBw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "REGION_ENV_NAME", ()=>REGION_ENV_NAME);
parcelHelpers.export(exports, "REGION_INI_NAME", ()=>REGION_INI_NAME);
parcelHelpers.export(exports, "NODE_REGION_CONFIG_OPTIONS", ()=>NODE_REGION_CONFIG_OPTIONS);
parcelHelpers.export(exports, "NODE_REGION_CONFIG_FILE_OPTIONS", ()=>NODE_REGION_CONFIG_FILE_OPTIONS);
const REGION_ENV_NAME = "AWS_REGION";
const REGION_INI_NAME = "region";
const NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[REGION_ENV_NAME],
    configFileSelector: (profile)=>profile[REGION_INI_NAME],
    default: ()=>{
        throw new Error("Region is missing");
    }
};
const NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jVRc8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveRegionConfig", ()=>resolveRegionConfig);
var _getRealRegion = require("./getRealRegion");
var _isFipsRegion = require("./isFipsRegion");
const resolveRegionConfig = (input)=>{
    const { region , useFipsEndpoint  } = input;
    if (!region) throw new Error("Region is missing");
    return {
        ...input,
        region: async ()=>{
            if (typeof region === "string") return (0, _getRealRegion.getRealRegion)(region);
            const providedRegion = await region();
            return (0, _getRealRegion.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async ()=>{
            const providedRegion = typeof region === "string" ? region : await region();
            if ((0, _isFipsRegion.isFipsRegion)(providedRegion)) return true;
            return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
    };
};

},{"./getRealRegion":"hR8Fd","./isFipsRegion":"2XNCR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hR8Fd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRealRegion", ()=>getRealRegion);
var _isFipsRegion = require("./isFipsRegion");
const getRealRegion = (region)=>(0, _isFipsRegion.isFipsRegion)(region) ? [
        "fips-aws-global",
        "aws-fips"
    ].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;

},{"./isFipsRegion":"2XNCR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2XNCR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isFipsRegion", ()=>isFipsRegion);
const isFipsRegion = (region)=>typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4W4U0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _partitionHash = require("./PartitionHash");
parcelHelpers.exportAll(_partitionHash, exports);
var _regionHash = require("./RegionHash");
parcelHelpers.exportAll(_regionHash, exports);
var _getRegionInfo = require("./getRegionInfo");
parcelHelpers.exportAll(_getRegionInfo, exports);

},{"./PartitionHash":"kEZdd","./RegionHash":"99gCS","./getRegionInfo":"kSt8t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kEZdd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99gCS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kSt8t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRegionInfo", ()=>getRegionInfo);
var _getHostnameFromVariants = require("./getHostnameFromVariants");
var _getResolvedHostname = require("./getResolvedHostname");
var _getResolvedPartition = require("./getResolvedPartition");
var _getResolvedSigningRegion = require("./getResolvedSigningRegion");
const getRegionInfo = (region, { useFipsEndpoint =false , useDualstackEndpoint =false , signingService , regionHash , partitionHash  })=>{
    const partition = (0, _getResolvedPartition.getResolvedPartition)(region, {
        partitionHash
    });
    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;
    const hostnameOptions = {
        useFipsEndpoint,
        useDualstackEndpoint
    };
    const regionHostname = (0, _getHostnameFromVariants.getHostnameFromVariants)(regionHash[resolvedRegion]?.variants, hostnameOptions);
    const partitionHostname = (0, _getHostnameFromVariants.getHostnameFromVariants)(partitionHash[partition]?.variants, hostnameOptions);
    const hostname = (0, _getResolvedHostname.getResolvedHostname)(resolvedRegion, {
        regionHostname,
        partitionHostname
    });
    if (hostname === undefined) throw new Error(`Endpoint resolution failed for: ${{
        resolvedRegion,
        useFipsEndpoint,
        useDualstackEndpoint
    }}`);
    const signingRegion = (0, _getResolvedSigningRegion.getResolvedSigningRegion)(hostname, {
        signingRegion: regionHash[resolvedRegion]?.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
    });
    return {
        partition,
        signingService,
        hostname,
        ...signingRegion && {
            signingRegion
        },
        ...regionHash[resolvedRegion]?.signingService && {
            signingService: regionHash[resolvedRegion].signingService
        }
    };
};

},{"./getHostnameFromVariants":"8KtYj","./getResolvedHostname":"8eniM","./getResolvedPartition":"3lwuq","./getResolvedSigningRegion":"aBIbT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8KtYj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHostnameFromVariants", ()=>getHostnameFromVariants);
const getHostnameFromVariants = (variants = [], { useFipsEndpoint , useDualstackEndpoint  })=>variants.find(({ tags  })=>useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))?.hostname;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8eniM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getResolvedHostname", ()=>getResolvedHostname);
const getResolvedHostname = (resolvedRegion, { regionHostname , partitionHostname  })=>regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : undefined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3lwuq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getResolvedPartition", ()=>getResolvedPartition);
const getResolvedPartition = (region, { partitionHash  })=>Object.keys(partitionHash || {}).find((key)=>partitionHash[key].regions.includes(region)) ?? "aws";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aBIbT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getResolvedSigningRegion", ()=>getResolvedSigningRegion);
const getResolvedSigningRegion = (hostname, { signingRegion , regionRegex , useFipsEndpoint  })=>{
    if (signingRegion) return signingRegion;
    else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) return regionRegexmatchArray[0].slice(1, -1);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1qWGQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventStreamSerdeConfig = require("./EventStreamSerdeConfig");
parcelHelpers.exportAll(_eventStreamSerdeConfig, exports);

},{"./EventStreamSerdeConfig":"bh4tk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bh4tk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEventStreamSerdeConfig", ()=>resolveEventStreamSerdeConfig);
const resolveEventStreamSerdeConfig = (input)=>({
        ...input,
        eventStreamMarshaller: input.eventStreamSerdeProvider(input)
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lrscz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contentLengthMiddleware", ()=>contentLengthMiddleware);
parcelHelpers.export(exports, "contentLengthMiddlewareOptions", ()=>contentLengthMiddlewareOptions);
parcelHelpers.export(exports, "getContentLengthPlugin", ()=>getContentLengthPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
const CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
    return (next)=>async (args)=>{
            const request = args.request;
            if ((0, _protocolHttp.HttpRequest).isInstance(request)) {
                const { body , headers  } = request;
                if (body && Object.keys(headers).map((str)=>str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) try {
                    const length = bodyLengthChecker(body);
                    request.headers = {
                        ...request.headers,
                        [CONTENT_LENGTH_HEADER]: String(length)
                    };
                } catch (error) {}
            }
            return next({
                ...args,
                request
            });
        };
}
const contentLengthMiddlewareOptions = {
    step: "build",
    tags: [
        "SET_CONTENT_LENGTH",
        "CONTENT_LENGTH"
    ],
    name: "contentLengthMiddleware",
    override: true
};
const getContentLengthPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lkWtc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _field = require("./Field");
parcelHelpers.exportAll(_field, exports);
var _fieldPosition = require("./FieldPosition");
parcelHelpers.exportAll(_fieldPosition, exports);
var _fields = require("./Fields");
parcelHelpers.exportAll(_fields, exports);
var _httpHandler = require("./httpHandler");
parcelHelpers.exportAll(_httpHandler, exports);
var _httpRequest = require("./httpRequest");
parcelHelpers.exportAll(_httpRequest, exports);
var _httpResponse = require("./httpResponse");
parcelHelpers.exportAll(_httpResponse, exports);
var _isValidHostname = require("./isValidHostname");
parcelHelpers.exportAll(_isValidHostname, exports);

},{"./Field":"9yrHu","./FieldPosition":"l5cDC","./Fields":"Eqop1","./httpHandler":"3IgsO","./httpRequest":"1gtod","./httpResponse":"huYvH","./isValidHostname":"1sxUx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9yrHu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Field", ()=>Field);
var _fieldPosition = require("./FieldPosition");
class Field {
    constructor({ name , kind =(0, _fieldPosition.FieldPosition).HEADER , values =[]  }){
        this.name = name;
        this.kind = kind;
        this.values = values;
    }
    add(value) {
        this.values.push(value);
    }
    set(values) {
        this.values = values;
    }
    remove(value) {
        this.values = this.values.filter((v)=>v !== value);
    }
    toString() {
        return this.values.map((v)=>v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
    }
    get() {
        return this.values;
    }
}

},{"./FieldPosition":"l5cDC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l5cDC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FieldPosition", ()=>FieldPosition);
var FieldPosition;
(function(FieldPosition) {
    FieldPosition[FieldPosition["HEADER"] = 0] = "HEADER";
    FieldPosition[FieldPosition["TRAILER"] = 1] = "TRAILER";
})(FieldPosition || (FieldPosition = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Eqop1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Fields", ()=>Fields);
class Fields {
    constructor({ fields =[] , encoding ="utf-8"  }){
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
    }
    setField(field) {
        this.entries[field.name.toLowerCase()] = field;
    }
    getField(name) {
        return this.entries[name.toLowerCase()];
    }
    removeField(name) {
        delete this.entries[name.toLowerCase()];
    }
    getByType(kind) {
        return Object.values(this.entries).filter((field)=>field.kind === kind);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3IgsO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1gtod":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpRequest", ()=>HttpRequest);
class HttpRequest {
    constructor(options){
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
    }
    static isInstance(request) {
        if (!request) return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    }
    clone() {
        const cloned = new HttpRequest({
            ...this,
            headers: {
                ...this.headers
            }
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
    }
}
function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName)=>{
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [
                ...param
            ] : param
        };
    }, {});
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"huYvH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpResponse", ()=>HttpResponse);
class HttpResponse {
    constructor(options){
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
    }
    static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1sxUx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidHostname", ()=>isValidHostname);
function isValidHostname(hostname) {
    const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2LyB3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _adaptors = require("./adaptors");
parcelHelpers.exportAll(_adaptors, exports);
var _endpointMiddleware = require("./endpointMiddleware");
parcelHelpers.exportAll(_endpointMiddleware, exports);
var _getEndpointPlugin = require("./getEndpointPlugin");
parcelHelpers.exportAll(_getEndpointPlugin, exports);
var _resolveEndpointConfig = require("./resolveEndpointConfig");
parcelHelpers.exportAll(_resolveEndpointConfig, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);

},{"./adaptors":"gkYEO","./endpointMiddleware":"8WJmi","./getEndpointPlugin":"czPqX","./resolveEndpointConfig":"fBgql","./types":"gO2AF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkYEO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getEndpointFromInstructions = require("./getEndpointFromInstructions");
parcelHelpers.exportAll(_getEndpointFromInstructions, exports);
var _toEndpointV1 = require("./toEndpointV1");
parcelHelpers.exportAll(_toEndpointV1, exports);

},{"./getEndpointFromInstructions":"eGoe9","./toEndpointV1":"j4qka","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eGoe9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointFromInstructions", ()=>getEndpointFromInstructions);
parcelHelpers.export(exports, "resolveParams", ()=>resolveParams);
var _serviceCustomizations = require("../service-customizations");
var _createConfigValueProvider = require("./createConfigValueProvider");
const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context)=>{
    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
    if (typeof clientConfig.endpointProvider !== "function") throw new Error("config.endpointProvider is not set.");
    const endpoint = clientConfig.endpointProvider(endpointParams, context);
    return endpoint;
};
const resolveParams = async (commandInput, instructionsSupplier, clientConfig)=>{
    const endpointParams = {};
    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
    for (const [name, instruction] of Object.entries(instructions))switch(instruction.type){
        case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
        case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
        case "clientContextParams":
        case "builtInParams":
            endpointParams[name] = await (0, _createConfigValueProvider.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
        default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
    }
    if (Object.keys(instructions).length === 0) Object.assign(endpointParams, clientConfig);
    if (String(clientConfig.serviceId).toLowerCase() === "s3") await (0, _serviceCustomizations.resolveParamsForS3)(endpointParams);
    return endpointParams;
};

},{"../service-customizations":"4NNqx","./createConfigValueProvider":"j39qU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4NNqx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _s3 = require("./s3");
parcelHelpers.exportAll(_s3, exports);

},{"./s3":"6HLS0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HLS0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveParamsForS3", ()=>resolveParamsForS3);
parcelHelpers.export(exports, "DOT_PATTERN", ()=>DOT_PATTERN);
parcelHelpers.export(exports, "S3_HOSTNAME_PATTERN", ()=>S3_HOSTNAME_PATTERN);
parcelHelpers.export(exports, "isDnsCompatibleBucketName", ()=>isDnsCompatibleBucketName);
parcelHelpers.export(exports, "isArnBucketName", ()=>isArnBucketName);
const resolveParamsForS3 = async (endpointParams)=>{
    const bucket = endpointParams?.Bucket || "";
    if (typeof endpointParams.Bucket === "string") endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
    if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) throw new Error("Path-style addressing cannot be used with ARN buckets");
    } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) endpointParams.ForcePathStyle = true;
    if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
    }
    return endpointParams;
};
const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
const IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
const DOTS_PATTERN = /\.\./;
const DOT_PATTERN = /\./;
const S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
const isDnsCompatibleBucketName = (bucketName)=>DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
const isArnBucketName = (bucketName)=>{
    const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
    const isArn = arn === "arn" && bucketName.split(":").length >= 6;
    const isValidArn = [
        arn,
        partition,
        service,
        account,
        typeOrId
    ].filter(Boolean).length === 5;
    if (isArn && !isValidArn) throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
    return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j39qU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createConfigValueProvider", ()=>createConfigValueProvider);
const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config)=>{
    const configProvider = async ()=>{
        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
        if (typeof configValue === "function") return configValue();
        return configValue;
    };
    if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") return async ()=>{
        const endpoint = await configProvider();
        if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) return endpoint.url.href;
            if ("hostname" in endpoint) {
                const { protocol , hostname , port , path  } = endpoint;
                return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
        }
        return endpoint;
    };
    return configProvider;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4qka":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toEndpointV1", ()=>toEndpointV1);
var _urlParser = require("@aws-sdk/url-parser");
const toEndpointV1 = (endpoint)=>{
    if (typeof endpoint === "object") {
        if ("url" in endpoint) return (0, _urlParser.parseUrl)(endpoint.url);
        return endpoint;
    }
    return (0, _urlParser.parseUrl)(endpoint);
};

},{"@aws-sdk/url-parser":"7tZsl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7tZsl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseUrl", ()=>parseUrl);
var _querystringParser = require("@aws-sdk/querystring-parser");
const parseUrl = (url)=>{
    if (typeof url === "string") return parseUrl(new URL(url));
    const { hostname , pathname , port , protocol , search  } = url;
    let query;
    if (search) query = (0, _querystringParser.parseQueryString)(search);
    return {
        hostname,
        port: port ? parseInt(port) : undefined,
        protocol,
        path: pathname,
        query
    };
};

},{"@aws-sdk/querystring-parser":"4EJui","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4EJui":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseQueryString", ()=>parseQueryString);
function parseQueryString(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) for (const pair of querystring.split("&")){
        let [key, value = null] = pair.split("=");
        key = decodeURIComponent(key);
        if (value) value = decodeURIComponent(value);
        if (!(key in query)) query[key] = value;
        else if (Array.isArray(query[key])) query[key].push(value);
        else query[key] = [
            query[key],
            value
        ];
    }
    return query;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8WJmi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "endpointMiddleware", ()=>endpointMiddleware);
var _getEndpointFromInstructions = require("./adaptors/getEndpointFromInstructions");
const endpointMiddleware = ({ config , instructions  })=>{
    return (next, context)=>async (args)=>{
            const endpoint = await (0, _getEndpointFromInstructions.getEndpointFromInstructions)(args.input, {
                getEndpointParameterInstructions () {
                    return instructions;
                }
            }, {
                ...config
            }, context);
            context.endpointV2 = endpoint;
            context.authSchemes = endpoint.properties?.authSchemes;
            const authScheme = context.authSchemes?.[0];
            if (authScheme) {
                context["signing_region"] = authScheme.signingRegion;
                context["signing_service"] = authScheme.signingName;
            }
            return next({
                ...args
            });
        };
};

},{"./adaptors/getEndpointFromInstructions":"eGoe9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"czPqX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "endpointMiddlewareOptions", ()=>endpointMiddlewareOptions);
parcelHelpers.export(exports, "getEndpointPlugin", ()=>getEndpointPlugin);
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _endpointMiddleware = require("./endpointMiddleware");
const endpointMiddlewareOptions = {
    step: "serialize",
    tags: [
        "ENDPOINT_PARAMETERS",
        "ENDPOINT_V2",
        "ENDPOINT"
    ],
    name: "endpointV2Middleware",
    override: true,
    relation: "before",
    toMiddleware: (0, _middlewareSerde.serializerMiddlewareOption).name
};
const getEndpointPlugin = (config, instructions)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo((0, _endpointMiddleware.endpointMiddleware)({
                config,
                instructions
            }), endpointMiddlewareOptions);
        }
    });

},{"@aws-sdk/middleware-serde":"jHrM0","./endpointMiddleware":"8WJmi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jHrM0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deserializerMiddleware = require("./deserializerMiddleware");
parcelHelpers.exportAll(_deserializerMiddleware, exports);
var _serdePlugin = require("./serdePlugin");
parcelHelpers.exportAll(_serdePlugin, exports);
var _serializerMiddleware = require("./serializerMiddleware");
parcelHelpers.exportAll(_serializerMiddleware, exports);

},{"./deserializerMiddleware":"6n051","./serdePlugin":"eYiHg","./serializerMiddleware":"jOid8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6n051":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deserializerMiddleware", ()=>deserializerMiddleware);
const deserializerMiddleware = (options, deserializer)=>(next, context)=>async (args)=>{
            const { response  } = await next(args);
            try {
                const parsed = await deserializer(response, options);
                return {
                    response,
                    output: parsed
                };
            } catch (error) {
                Object.defineProperty(error, "$response", {
                    value: response
                });
                if (!("$metadata" in error)) {
                    const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
                    error.message += "\n  " + hint;
                }
                throw error;
            }
        };

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eYiHg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deserializerMiddlewareOption", ()=>deserializerMiddlewareOption);
parcelHelpers.export(exports, "serializerMiddlewareOption", ()=>serializerMiddlewareOption);
parcelHelpers.export(exports, "getSerdePlugin", ()=>getSerdePlugin);
var _deserializerMiddleware = require("./deserializerMiddleware");
var _serializerMiddleware = require("./serializerMiddleware");
const deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: [
        "DESERIALIZER"
    ],
    override: true
};
const serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: [
        "SERIALIZER"
    ],
    override: true
};
function getSerdePlugin(config, serializer, deserializer) {
    return {
        applyToStack: (commandStack)=>{
            commandStack.add((0, _deserializerMiddleware.deserializerMiddleware)(config, deserializer), deserializerMiddlewareOption);
            commandStack.add((0, _serializerMiddleware.serializerMiddleware)(config, serializer), serializerMiddlewareOption);
        }
    };
}

},{"./deserializerMiddleware":"6n051","./serializerMiddleware":"jOid8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jOid8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializerMiddleware", ()=>serializerMiddleware);
const serializerMiddleware = (options, serializer)=>(next, context)=>async (args)=>{
            const endpoint = context.endpointV2?.url && options.urlParser ? async ()=>options.urlParser(context.endpointV2.url) : options.endpoint;
            if (!endpoint) throw new Error("No valid endpoint provider available.");
            const request = await serializer(args.input, {
                ...options,
                endpoint
            });
            return next({
                ...args,
                request
            });
        };

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fBgql":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEndpointConfig", ()=>resolveEndpointConfig);
var _utilMiddleware = require("@aws-sdk/util-middleware");
var _toEndpointV1 = require("./adaptors/toEndpointV1");
const resolveEndpointConfig = (input)=>{
    const tls = input.tls ?? true;
    const { endpoint  } = input;
    const customEndpointProvider = endpoint != null ? async ()=>(0, _toEndpointV1.toEndpointV1)(await (0, _utilMiddleware.normalizeProvider)(endpoint)()) : undefined;
    const isCustomEndpoint = !!endpoint;
    return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, _utilMiddleware.normalizeProvider)(input.useDualstackEndpoint ?? false),
        useFipsEndpoint: (0, _utilMiddleware.normalizeProvider)(input.useFipsEndpoint ?? false)
    };
};

},{"@aws-sdk/util-middleware":"49kxo","./adaptors/toEndpointV1":"j4qka","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gO2AF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c9L0d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addExpectContinueMiddleware", ()=>addExpectContinueMiddleware);
parcelHelpers.export(exports, "addExpectContinueMiddlewareOptions", ()=>addExpectContinueMiddlewareOptions);
parcelHelpers.export(exports, "getAddExpectContinuePlugin", ()=>getAddExpectContinuePlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
function addExpectContinueMiddleware(options) {
    return (next)=>async (args)=>{
            const { request  } = args;
            if ((0, _protocolHttp.HttpRequest).isInstance(request) && request.body && options.runtime === "node") request.headers = {
                ...request.headers,
                Expect: "100-continue"
            };
            return next({
                ...args,
                request
            });
        };
}
const addExpectContinueMiddlewareOptions = {
    step: "build",
    tags: [
        "SET_EXPECT_HEADER",
        "EXPECT_HEADER"
    ],
    name: "addExpectContinueMiddleware",
    override: true
};
const getAddExpectContinuePlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8vcXw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveHostHeaderConfig", ()=>resolveHostHeaderConfig);
parcelHelpers.export(exports, "hostHeaderMiddleware", ()=>hostHeaderMiddleware);
parcelHelpers.export(exports, "hostHeaderMiddlewareOptions", ()=>hostHeaderMiddlewareOptions);
parcelHelpers.export(exports, "getHostHeaderPlugin", ()=>getHostHeaderPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
function resolveHostHeaderConfig(input) {
    return input;
}
const hostHeaderMiddleware = (options)=>(next)=>async (args)=>{
            if (!(0, _protocolHttp.HttpRequest).isInstance(args.request)) return next(args);
            const { request  } = args;
            const { handlerProtocol =""  } = options.requestHandler.metadata || {};
            if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
                delete request.headers["host"];
                request.headers[":authority"] = "";
            } else if (!request.headers["host"]) {
                let host = request.hostname;
                if (request.port != null) host += `:${request.port}`;
                request.headers["host"] = host;
            }
            return next(args);
        };
const hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "HOST"
    ],
    override: true
};
const getHostHeaderPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyEdQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _loggerMiddleware = require("./loggerMiddleware");
parcelHelpers.exportAll(_loggerMiddleware, exports);

},{"./loggerMiddleware":"5TRTb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5TRTb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loggerMiddleware", ()=>loggerMiddleware);
parcelHelpers.export(exports, "loggerMiddlewareOptions", ()=>loggerMiddlewareOptions);
parcelHelpers.export(exports, "getLoggerPlugin", ()=>getLoggerPlugin);
const loggerMiddleware = ()=>(next, context)=>async (args)=>{
            try {
                const response = await next(args);
                const { clientName , commandName , logger , dynamoDbDocumentClientOptions ={}  } = context;
                const { overrideInputFilterSensitiveLog , overrideOutputFilterSensitiveLog  } = dynamoDbDocumentClientOptions;
                const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
                const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
                const { $metadata , ...outputWithoutMetadata } = response.output;
                logger?.info?.({
                    clientName,
                    commandName,
                    input: inputFilterSensitiveLog(args.input),
                    output: outputFilterSensitiveLog(outputWithoutMetadata),
                    metadata: $metadata
                });
                return response;
            } catch (error) {
                const { clientName , commandName , logger , dynamoDbDocumentClientOptions ={}  } = context;
                const { overrideInputFilterSensitiveLog  } = dynamoDbDocumentClientOptions;
                const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
                logger?.error?.({
                    clientName,
                    commandName,
                    input: inputFilterSensitiveLog(args.input),
                    error,
                    metadata: error.$metadata
                });
                throw error;
            }
        };
const loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: [
        "LOGGER"
    ],
    step: "initialize",
    override: true
};
const getLoggerPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
        }
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eNPtz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "recursionDetectionMiddleware", ()=>recursionDetectionMiddleware);
parcelHelpers.export(exports, "addRecursionDetectionMiddlewareOptions", ()=>addRecursionDetectionMiddlewareOptions);
parcelHelpers.export(exports, "getRecursionDetectionPlugin", ()=>getRecursionDetectionPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
var process = require("390cf85b5344aa6c");
const TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
const ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
const ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
const recursionDetectionMiddleware = (options)=>(next)=>async (args)=>{
            const { request  } = args;
            if (!(0, _protocolHttp.HttpRequest).isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) return next(args);
            const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
            const traceId = process.env[ENV_TRACE_ID];
            const nonEmptyString = (str)=>typeof str === "string" && str.length > 0;
            if (nonEmptyString(functionName) && nonEmptyString(traceId)) request.headers[TRACE_ID_HEADER_NAME] = traceId;
            return next({
                ...args,
                request
            });
        };
const addRecursionDetectionMiddlewareOptions = {
    step: "build",
    tags: [
        "RECURSION_DETECTION"
    ],
    name: "recursionDetectionMiddleware",
    override: true,
    priority: "low"
};
const getRecursionDetectionPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
        }
    });

},{"390cf85b5344aa6c":"d5jf4","@aws-sdk/protocol-http":"lkWtc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"iRfgc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _adaptiveRetryStrategy = require("./AdaptiveRetryStrategy");
parcelHelpers.exportAll(_adaptiveRetryStrategy, exports);
var _standardRetryStrategy = require("./StandardRetryStrategy");
parcelHelpers.exportAll(_standardRetryStrategy, exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _delayDecider = require("./delayDecider");
parcelHelpers.exportAll(_delayDecider, exports);
var _omitRetryHeadersMiddleware = require("./omitRetryHeadersMiddleware");
parcelHelpers.exportAll(_omitRetryHeadersMiddleware, exports);
var _retryDecider = require("./retryDecider");
parcelHelpers.exportAll(_retryDecider, exports);
var _retryMiddleware = require("./retryMiddleware");
parcelHelpers.exportAll(_retryMiddleware, exports);

},{"./AdaptiveRetryStrategy":"baz4p","./StandardRetryStrategy":"aKC8D","./configurations":"yfCHr","./delayDecider":"cDTOQ","./omitRetryHeadersMiddleware":"59saf","./retryDecider":"7tHCy","./retryMiddleware":"bRE0G","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"baz4p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AdaptiveRetryStrategy", ()=>AdaptiveRetryStrategy);
var _utilRetry = require("@aws-sdk/util-retry");
var _standardRetryStrategy = require("./StandardRetryStrategy");
class AdaptiveRetryStrategy extends (0, _standardRetryStrategy.StandardRetryStrategy) {
    constructor(maxAttemptsProvider, options){
        const { rateLimiter , ...superOptions } = options ?? {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter ?? new (0, _utilRetry.DefaultRateLimiter)();
        this.mode = (0, _utilRetry.RETRY_MODES).ADAPTIVE;
    }
    async retry(next, args) {
        return super.retry(next, args, {
            beforeRequest: async ()=>{
                return this.rateLimiter.getSendToken();
            },
            afterRequest: (response)=>{
                this.rateLimiter.updateClientSendingRate(response);
            }
        });
    }
}

},{"@aws-sdk/util-retry":"dmBPM","./StandardRetryStrategy":"aKC8D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dmBPM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _adaptiveRetryStrategy = require("./AdaptiveRetryStrategy");
parcelHelpers.exportAll(_adaptiveRetryStrategy, exports);
var _configuredRetryStrategy = require("./ConfiguredRetryStrategy");
parcelHelpers.exportAll(_configuredRetryStrategy, exports);
var _defaultRateLimiter = require("./DefaultRateLimiter");
parcelHelpers.exportAll(_defaultRateLimiter, exports);
var _standardRetryStrategy = require("./StandardRetryStrategy");
parcelHelpers.exportAll(_standardRetryStrategy, exports);
var _config = require("./config");
parcelHelpers.exportAll(_config, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);

},{"./AdaptiveRetryStrategy":"lyn3Z","./ConfiguredRetryStrategy":"jmumw","./DefaultRateLimiter":"gsv8w","./StandardRetryStrategy":"BUPPC","./config":"hp4ev","./constants":"2WZDW","./types":"cc4qw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lyn3Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AdaptiveRetryStrategy", ()=>AdaptiveRetryStrategy);
var _config = require("./config");
var _defaultRateLimiter = require("./DefaultRateLimiter");
var _standardRetryStrategy = require("./StandardRetryStrategy");
class AdaptiveRetryStrategy {
    constructor(maxAttemptsProvider, options){
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = (0, _config.RETRY_MODES).ADAPTIVE;
        const { rateLimiter  } = options ?? {};
        this.rateLimiter = rateLimiter ?? new (0, _defaultRateLimiter.DefaultRateLimiter)();
        this.standardRetryStrategy = new (0, _standardRetryStrategy.StandardRetryStrategy)(maxAttemptsProvider);
    }
    async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
    }
    recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
    }
}

},{"./config":"hp4ev","./DefaultRateLimiter":"gsv8w","./StandardRetryStrategy":"BUPPC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hp4ev":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RETRY_MODES", ()=>RETRY_MODES);
parcelHelpers.export(exports, "DEFAULT_MAX_ATTEMPTS", ()=>DEFAULT_MAX_ATTEMPTS);
parcelHelpers.export(exports, "DEFAULT_RETRY_MODE", ()=>DEFAULT_RETRY_MODE);
var RETRY_MODES;
(function(RETRY_MODES) {
    RETRY_MODES["STANDARD"] = "standard";
    RETRY_MODES["ADAPTIVE"] = "adaptive";
})(RETRY_MODES || (RETRY_MODES = {}));
const DEFAULT_MAX_ATTEMPTS = 3;
const DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gsv8w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultRateLimiter", ()=>DefaultRateLimiter);
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
class DefaultRateLimiter {
    constructor(options){
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
    }
    getCurrentTimeInSeconds() {
        return Date.now() / 1000;
    }
    async getSendToken() {
        return this.acquireTokenBucket(1);
    }
    async acquireTokenBucket(amount) {
        if (!this.enabled) return;
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
            const delay = (amount - this.currentCapacity) / this.fillRate * 1000;
            await new Promise((resolve)=>setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
    }
    refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
            this.lastTimestamp = timestamp;
            return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
    }
    updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, _serviceErrorClassification.isThrottlingError)(response)) {
            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
            this.lastMaxRate = rateToUse;
            this.calculateTimeWindow();
            this.lastThrottleTime = this.getCurrentTimeInSeconds();
            calculatedRate = this.cubicThrottle(rateToUse);
            this.enableTokenBucket();
        } else {
            this.calculateTimeWindow();
            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
    }
    calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
    }
    cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
    }
    cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
    }
    enableTokenBucket() {
        this.enabled = true;
    }
    updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
    }
    updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
            this.requestCount = 0;
            this.lastTxRateBucket = timeBucket;
        }
    }
    getPrecise(num) {
        return parseFloat(num.toFixed(8));
    }
}

},{"@aws-sdk/service-error-classification":"020nY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"020nY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isRetryableByTrait", ()=>isRetryableByTrait);
parcelHelpers.export(exports, "isClockSkewError", ()=>isClockSkewError);
parcelHelpers.export(exports, "isThrottlingError", ()=>isThrottlingError);
parcelHelpers.export(exports, "isTransientError", ()=>isTransientError);
parcelHelpers.export(exports, "isServerError", ()=>isServerError);
var _constants = require("./constants");
const isRetryableByTrait = (error)=>error.$retryable !== undefined;
const isClockSkewError = (error)=>(0, _constants.CLOCK_SKEW_ERROR_CODES).includes(error.name);
const isThrottlingError = (error)=>error.$metadata?.httpStatusCode === 429 || (0, _constants.THROTTLING_ERROR_CODES).includes(error.name) || error.$retryable?.throttling == true;
const isTransientError = (error)=>(0, _constants.TRANSIENT_ERROR_CODES).includes(error.name) || (0, _constants.NODEJS_TIMEOUT_ERROR_CODES).includes(error?.code || "") || (0, _constants.TRANSIENT_ERROR_STATUS_CODES).includes(error.$metadata?.httpStatusCode || 0);
const isServerError = (error)=>{
    if (error.$metadata?.httpStatusCode !== undefined) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) return true;
        return false;
    }
    return false;
};

},{"./constants":"egZQz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"egZQz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CLOCK_SKEW_ERROR_CODES", ()=>CLOCK_SKEW_ERROR_CODES);
parcelHelpers.export(exports, "THROTTLING_ERROR_CODES", ()=>THROTTLING_ERROR_CODES);
parcelHelpers.export(exports, "TRANSIENT_ERROR_CODES", ()=>TRANSIENT_ERROR_CODES);
parcelHelpers.export(exports, "TRANSIENT_ERROR_STATUS_CODES", ()=>TRANSIENT_ERROR_STATUS_CODES);
parcelHelpers.export(exports, "NODEJS_TIMEOUT_ERROR_CODES", ()=>NODEJS_TIMEOUT_ERROR_CODES);
const CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch"
];
const THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException"
];
const TRANSIENT_ERROR_CODES = [
    "AbortError",
    "TimeoutError",
    "RequestTimeout",
    "RequestTimeoutException"
];
const TRANSIENT_ERROR_STATUS_CODES = [
    500,
    502,
    503,
    504
];
const NODEJS_TIMEOUT_ERROR_CODES = [
    "ECONNRESET",
    "ECONNREFUSED",
    "EPIPE",
    "ETIMEDOUT"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"BUPPC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandardRetryStrategy", ()=>StandardRetryStrategy);
var _config = require("./config");
var _constants = require("./constants");
var _defaultRetryBackoffStrategy = require("./defaultRetryBackoffStrategy");
var _defaultRetryToken = require("./defaultRetryToken");
class StandardRetryStrategy {
    constructor(maxAttempts){
        this.maxAttempts = maxAttempts;
        this.mode = (0, _config.RETRY_MODES).STANDARD;
        this.capacity = (0, _constants.INITIAL_RETRY_TOKENS);
        this.retryBackoffStrategy = (0, _defaultRetryBackoffStrategy.getDefaultRetryBackoffStrategy)();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async ()=>maxAttempts;
    }
    async acquireInitialRetryToken(retryTokenScope) {
        return (0, _defaultRetryToken.createDefaultRetryToken)({
            retryDelay: (0, _constants.DEFAULT_RETRY_DELAY_BASE),
            retryCount: 0
        });
    }
    async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
            const errorType = errorInfo.errorType;
            this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? (0, _constants.THROTTLING_RETRY_DELAY_BASE) : (0, _constants.DEFAULT_RETRY_DELAY_BASE));
            const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
            const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
            const capacityCost = this.getCapacityCost(errorType);
            this.capacity -= capacityCost;
            return (0, _defaultRetryToken.createDefaultRetryToken)({
                retryDelay,
                retryCount: token.getRetryCount() + 1,
                retryCost: capacityCost
            });
        }
        throw new Error("No retry token available");
    }
    recordSuccess(token) {
        this.capacity = Math.max((0, _constants.INITIAL_RETRY_TOKENS), this.capacity + (token.getRetryCost() ?? (0, _constants.NO_RETRY_INCREMENT)));
    }
    getCapacity() {
        return this.capacity;
    }
    async getMaxAttempts() {
        try {
            return await this.maxAttemptsProvider();
        } catch (error) {
            console.warn(`Max attempts provider could not resolve. Using default of ${(0, _config.DEFAULT_MAX_ATTEMPTS)}`);
            return 0, _config.DEFAULT_MAX_ATTEMPTS;
        }
    }
    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount();
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
    }
    getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? (0, _constants.TIMEOUT_RETRY_COST) : (0, _constants.RETRY_COST);
    }
    isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
    }
}

},{"./config":"hp4ev","./constants":"2WZDW","./defaultRetryBackoffStrategy":"1fJcj","./defaultRetryToken":"jqLpF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2WZDW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_RETRY_DELAY_BASE", ()=>DEFAULT_RETRY_DELAY_BASE);
parcelHelpers.export(exports, "MAXIMUM_RETRY_DELAY", ()=>MAXIMUM_RETRY_DELAY);
parcelHelpers.export(exports, "THROTTLING_RETRY_DELAY_BASE", ()=>THROTTLING_RETRY_DELAY_BASE);
parcelHelpers.export(exports, "INITIAL_RETRY_TOKENS", ()=>INITIAL_RETRY_TOKENS);
parcelHelpers.export(exports, "RETRY_COST", ()=>RETRY_COST);
parcelHelpers.export(exports, "TIMEOUT_RETRY_COST", ()=>TIMEOUT_RETRY_COST);
parcelHelpers.export(exports, "NO_RETRY_INCREMENT", ()=>NO_RETRY_INCREMENT);
parcelHelpers.export(exports, "INVOCATION_ID_HEADER", ()=>INVOCATION_ID_HEADER);
parcelHelpers.export(exports, "REQUEST_HEADER", ()=>REQUEST_HEADER);
const DEFAULT_RETRY_DELAY_BASE = 100;
const MAXIMUM_RETRY_DELAY = 20000;
const THROTTLING_RETRY_DELAY_BASE = 500;
const INITIAL_RETRY_TOKENS = 500;
const RETRY_COST = 5;
const TIMEOUT_RETRY_COST = 10;
const NO_RETRY_INCREMENT = 1;
const INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
const REQUEST_HEADER = "amz-sdk-request";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1fJcj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDefaultRetryBackoffStrategy", ()=>getDefaultRetryBackoffStrategy);
var _constants = require("./constants");
const getDefaultRetryBackoffStrategy = ()=>{
    let delayBase = (0, _constants.DEFAULT_RETRY_DELAY_BASE);
    const computeNextBackoffDelay = (attempts)=>{
        return Math.floor(Math.min((0, _constants.MAXIMUM_RETRY_DELAY), Math.random() * 2 ** attempts * delayBase));
    };
    const setDelayBase = (delay)=>{
        delayBase = delay;
    };
    return {
        computeNextBackoffDelay,
        setDelayBase
    };
};

},{"./constants":"2WZDW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jqLpF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDefaultRetryToken", ()=>createDefaultRetryToken);
var _constants = require("./constants");
const createDefaultRetryToken = ({ retryDelay , retryCount , retryCost  })=>{
    const getRetryCount = ()=>retryCount;
    const getRetryDelay = ()=>Math.min((0, _constants.MAXIMUM_RETRY_DELAY), retryDelay);
    const getRetryCost = ()=>retryCost;
    return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
    };
};

},{"./constants":"2WZDW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jmumw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConfiguredRetryStrategy", ()=>ConfiguredRetryStrategy);
var _constants = require("./constants");
var _standardRetryStrategy = require("./StandardRetryStrategy");
class ConfiguredRetryStrategy extends (0, _standardRetryStrategy.StandardRetryStrategy) {
    constructor(maxAttempts, computeNextBackoffDelay = (0, _constants.DEFAULT_RETRY_DELAY_BASE)){
        super(typeof maxAttempts === "function" ? maxAttempts : async ()=>maxAttempts);
        if (typeof computeNextBackoffDelay === "number") this.computeNextBackoffDelay = ()=>computeNextBackoffDelay;
        else this.computeNextBackoffDelay = computeNextBackoffDelay;
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = ()=>this.computeNextBackoffDelay(token.getRetryCount());
        return token;
    }
}

},{"./constants":"2WZDW","./StandardRetryStrategy":"BUPPC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cc4qw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aKC8D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandardRetryStrategy", ()=>StandardRetryStrategy);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
var _utilRetry = require("@aws-sdk/util-retry");
var _uuid = require("uuid");
var _defaultRetryQuota = require("./defaultRetryQuota");
var _delayDecider = require("./delayDecider");
var _retryDecider = require("./retryDecider");
var _util = require("./util");
class StandardRetryStrategy {
    constructor(maxAttemptsProvider, options){
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = (0, _utilRetry.RETRY_MODES).STANDARD;
        this.retryDecider = options?.retryDecider ?? (0, _retryDecider.defaultRetryDecider);
        this.delayDecider = options?.delayDecider ?? (0, _delayDecider.defaultDelayDecider);
        this.retryQuota = options?.retryQuota ?? (0, _defaultRetryQuota.getDefaultRetryQuota)((0, _utilRetry.INITIAL_RETRY_TOKENS));
    }
    shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    }
    async getMaxAttempts() {
        let maxAttempts;
        try {
            maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
            maxAttempts = (0, _utilRetry.DEFAULT_MAX_ATTEMPTS);
        }
        return maxAttempts;
    }
    async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request  } = args;
        if ((0, _protocolHttp.HttpRequest).isInstance(request)) request.headers[0, _utilRetry.INVOCATION_ID_HEADER] = (0, _uuid.v4)();
        while(true)try {
            if ((0, _protocolHttp.HttpRequest).isInstance(request)) request.headers[0, _utilRetry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            if (options?.beforeRequest) await options.beforeRequest();
            const { response , output  } = await next(args);
            if (options?.afterRequest) options.afterRequest(response);
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return {
                response,
                output
            };
        } catch (e) {
            const err = (0, _util.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
                retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
                const delayFromDecider = this.delayDecider((0, _serviceErrorClassification.isThrottlingError)(err) ? (0, _utilRetry.THROTTLING_RETRY_DELAY_BASE) : (0, _utilRetry.DEFAULT_RETRY_DELAY_BASE), attempts);
                const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
                const delay = Math.max(delayFromResponse || 0, delayFromDecider);
                totalDelay += delay;
                await new Promise((resolve)=>setTimeout(resolve, delay));
                continue;
            }
            if (!err.$metadata) err.$metadata = {};
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
        }
    }
}
const getDelayFromRetryAfterHeader = (response)=>{
    if (!(0, _protocolHttp.HttpResponse).isInstance(response)) return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key)=>key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName) return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds)) return retryAfterSeconds * 1000;
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate.getTime() - Date.now();
};

},{"@aws-sdk/protocol-http":"lkWtc","@aws-sdk/service-error-classification":"020nY","@aws-sdk/util-retry":"dmBPM","uuid":"j4KJi","./defaultRetryQuota":"j7Wzn","./delayDecider":"cDTOQ","./retryDecider":"7tHCy","./util":"gy9yk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4KJi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v1", ()=>(0, _v1JsDefault.default));
parcelHelpers.export(exports, "v3", ()=>(0, _v3JsDefault.default));
parcelHelpers.export(exports, "v4", ()=>(0, _v4JsDefault.default));
parcelHelpers.export(exports, "v5", ()=>(0, _v5JsDefault.default));
parcelHelpers.export(exports, "NIL", ()=>(0, _nilJsDefault.default));
parcelHelpers.export(exports, "version", ()=>(0, _versionJsDefault.default));
parcelHelpers.export(exports, "validate", ()=>(0, _validateJsDefault.default));
parcelHelpers.export(exports, "stringify", ()=>(0, _stringifyJsDefault.default));
parcelHelpers.export(exports, "parse", ()=>(0, _parseJsDefault.default));
var _v1Js = require("./v1.js");
var _v1JsDefault = parcelHelpers.interopDefault(_v1Js);
var _v3Js = require("./v3.js");
var _v3JsDefault = parcelHelpers.interopDefault(_v3Js);
var _v4Js = require("./v4.js");
var _v4JsDefault = parcelHelpers.interopDefault(_v4Js);
var _v5Js = require("./v5.js");
var _v5JsDefault = parcelHelpers.interopDefault(_v5Js);
var _nilJs = require("./nil.js");
var _nilJsDefault = parcelHelpers.interopDefault(_nilJs);
var _versionJs = require("./version.js");
var _versionJsDefault = parcelHelpers.interopDefault(_versionJs);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
var _stringifyJs = require("./stringify.js");
var _stringifyJsDefault = parcelHelpers.interopDefault(_stringifyJs);
var _parseJs = require("./parse.js");
var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);

},{"./v1.js":false,"./v3.js":false,"./v4.js":"8zJtu","./v5.js":false,"./nil.js":false,"./version.js":false,"./validate.js":false,"./stringify.js":false,"./parse.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8zJtu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rngJs = require("./rng.js");
var _rngJsDefault = parcelHelpers.interopDefault(_rngJs);
var _stringifyJs = require("./stringify.js");
var _stringifyJsDefault = parcelHelpers.interopDefault(_stringifyJs);
function v4(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || (0, _rngJsDefault.default))(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(var i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
        return buf;
    }
    return (0, _stringifyJsDefault.default)(rnds);
}
exports.default = v4;

},{"./rng.js":"2psyE","./stringify.js":"5Y9F1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2psyE":[function(require,module,exports) {
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>rng);
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
        if (!getRandomValues) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    return getRandomValues(rnds8);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Y9F1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ var byteToHex = [];
for(var i = 0; i < 256; ++i)byteToHex.push((i + 0x100).toString(16).substr(1));
function stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!(0, _validateJsDefault.default)(uuid)) throw TypeError("Stringified UUID is invalid");
    return uuid;
}
exports.default = stringify;

},{"./validate.js":"eHPgI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eHPgI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _regexJs = require("./regex.js");
var _regexJsDefault = parcelHelpers.interopDefault(_regexJs);
function validate(uuid) {
    return typeof uuid === "string" && (0, _regexJsDefault.default).test(uuid);
}
exports.default = validate;

},{"./regex.js":"bUa5g","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bUa5g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j7Wzn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDefaultRetryQuota", ()=>getDefaultRetryQuota);
var _utilRetry = require("@aws-sdk/util-retry");
const getDefaultRetryQuota = (initialRetryTokens, options)=>{
    const MAX_CAPACITY = initialRetryTokens;
    const noRetryIncrement = options?.noRetryIncrement ?? (0, _utilRetry.NO_RETRY_INCREMENT);
    const retryCost = options?.retryCost ?? (0, _utilRetry.RETRY_COST);
    const timeoutRetryCost = options?.timeoutRetryCost ?? (0, _utilRetry.TIMEOUT_RETRY_COST);
    let availableCapacity = initialRetryTokens;
    const getCapacityAmount = (error)=>error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
    const hasRetryTokens = (error)=>getCapacityAmount(error) <= availableCapacity;
    const retrieveRetryTokens = (error)=>{
        if (!hasRetryTokens(error)) throw new Error("No retry token available");
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
    };
    const releaseRetryTokens = (capacityReleaseAmount)=>{
        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    };
    return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
    });
};

},{"@aws-sdk/util-retry":"dmBPM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cDTOQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultDelayDecider", ()=>defaultDelayDecider);
var _utilRetry = require("@aws-sdk/util-retry");
const defaultDelayDecider = (delayBase, attempts)=>Math.floor(Math.min((0, _utilRetry.MAXIMUM_RETRY_DELAY), Math.random() * 2 ** attempts * delayBase));

},{"@aws-sdk/util-retry":"dmBPM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7tHCy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultRetryDecider", ()=>defaultRetryDecider);
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
const defaultRetryDecider = (error)=>{
    if (!error) return false;
    return (0, _serviceErrorClassification.isRetryableByTrait)(error) || (0, _serviceErrorClassification.isClockSkewError)(error) || (0, _serviceErrorClassification.isThrottlingError)(error) || (0, _serviceErrorClassification.isTransientError)(error);
};

},{"@aws-sdk/service-error-classification":"020nY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gy9yk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asSdkError", ()=>asSdkError);
const asSdkError = (error)=>{
    if (error instanceof Error) return error;
    if (error instanceof Object) return Object.assign(new Error(), error);
    if (typeof error === "string") return new Error(error);
    return new Error(`AWS SDK error wrapper for ${error}`);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"yfCHr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ENV_MAX_ATTEMPTS", ()=>ENV_MAX_ATTEMPTS);
parcelHelpers.export(exports, "CONFIG_MAX_ATTEMPTS", ()=>CONFIG_MAX_ATTEMPTS);
parcelHelpers.export(exports, "NODE_MAX_ATTEMPT_CONFIG_OPTIONS", ()=>NODE_MAX_ATTEMPT_CONFIG_OPTIONS);
parcelHelpers.export(exports, "resolveRetryConfig", ()=>resolveRetryConfig);
parcelHelpers.export(exports, "ENV_RETRY_MODE", ()=>ENV_RETRY_MODE);
parcelHelpers.export(exports, "CONFIG_RETRY_MODE", ()=>CONFIG_RETRY_MODE);
parcelHelpers.export(exports, "NODE_RETRY_MODE_CONFIG_OPTIONS", ()=>NODE_RETRY_MODE_CONFIG_OPTIONS);
var _utilMiddleware = require("@aws-sdk/util-middleware");
var _utilRetry = require("@aws-sdk/util-retry");
const ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
const CONFIG_MAX_ATTEMPTS = "max_attempts";
const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>{
        const value = env[ENV_MAX_ATTEMPTS];
        if (!value) return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        return maxAttempt;
    },
    configFileSelector: (profile)=>{
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value) return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        return maxAttempt;
    },
    default: (0, _utilRetry.DEFAULT_MAX_ATTEMPTS)
};
const resolveRetryConfig = (input)=>{
    const { retryStrategy  } = input;
    const maxAttempts = (0, _utilMiddleware.normalizeProvider)(input.maxAttempts ?? (0, _utilRetry.DEFAULT_MAX_ATTEMPTS));
    return {
        ...input,
        maxAttempts,
        retryStrategy: async ()=>{
            if (retryStrategy) return retryStrategy;
            const retryMode = await (0, _utilMiddleware.normalizeProvider)(input.retryMode)();
            if (retryMode === (0, _utilRetry.RETRY_MODES).ADAPTIVE) return new (0, _utilRetry.AdaptiveRetryStrategy)(maxAttempts);
            return new (0, _utilRetry.StandardRetryStrategy)(maxAttempts);
        }
    };
};
const ENV_RETRY_MODE = "AWS_RETRY_MODE";
const CONFIG_RETRY_MODE = "retry_mode";
const NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[ENV_RETRY_MODE],
    configFileSelector: (profile)=>profile[CONFIG_RETRY_MODE],
    default: (0, _utilRetry.DEFAULT_RETRY_MODE)
};

},{"@aws-sdk/util-middleware":"49kxo","@aws-sdk/util-retry":"dmBPM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59saf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "omitRetryHeadersMiddleware", ()=>omitRetryHeadersMiddleware);
parcelHelpers.export(exports, "omitRetryHeadersMiddlewareOptions", ()=>omitRetryHeadersMiddlewareOptions);
parcelHelpers.export(exports, "getOmitRetryHeadersPlugin", ()=>getOmitRetryHeadersPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _utilRetry = require("@aws-sdk/util-retry");
const omitRetryHeadersMiddleware = ()=>(next)=>async (args)=>{
            const { request  } = args;
            if ((0, _protocolHttp.HttpRequest).isInstance(request)) {
                delete request.headers[0, _utilRetry.INVOCATION_ID_HEADER];
                delete request.headers[0, _utilRetry.REQUEST_HEADER];
            }
            return next(args);
        };
const omitRetryHeadersMiddlewareOptions = {
    name: "omitRetryHeadersMiddleware",
    tags: [
        "RETRY",
        "HEADERS",
        "OMIT_RETRY_HEADERS"
    ],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true
};
const getOmitRetryHeadersPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","@aws-sdk/util-retry":"dmBPM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bRE0G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "retryMiddleware", ()=>retryMiddleware);
parcelHelpers.export(exports, "retryMiddlewareOptions", ()=>retryMiddlewareOptions);
parcelHelpers.export(exports, "getRetryPlugin", ()=>getRetryPlugin);
parcelHelpers.export(exports, "getRetryAfterHint", ()=>getRetryAfterHint);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
var _utilRetry = require("@aws-sdk/util-retry");
var _uuid = require("uuid");
var _util = require("./util");
const retryMiddleware = (options)=>(next, context)=>async (args)=>{
            let retryStrategy = await options.retryStrategy();
            const maxAttempts = await options.maxAttempts();
            if (isRetryStrategyV2(retryStrategy)) {
                retryStrategy;
                let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
                let lastError = new Error();
                let attempts = 0;
                let totalRetryDelay = 0;
                const { request  } = args;
                if ((0, _protocolHttp.HttpRequest).isInstance(request)) request.headers[0, _utilRetry.INVOCATION_ID_HEADER] = (0, _uuid.v4)();
                while(true)try {
                    if ((0, _protocolHttp.HttpRequest).isInstance(request)) request.headers[0, _utilRetry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
                    const { response , output  } = await next(args);
                    retryStrategy.recordSuccess(retryToken);
                    output.$metadata.attempts = attempts + 1;
                    output.$metadata.totalRetryDelay = totalRetryDelay;
                    return {
                        response,
                        output
                    };
                } catch (e) {
                    const retryErrorInfo = getRetryErrorInfo(e);
                    lastError = (0, _util.asSdkError)(e);
                    try {
                        retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
                    } catch (refreshError) {
                        if (!lastError.$metadata) lastError.$metadata = {};
                        lastError.$metadata.attempts = attempts + 1;
                        lastError.$metadata.totalRetryDelay = totalRetryDelay;
                        throw lastError;
                    }
                    attempts = retryToken.getRetryCount();
                    const delay = retryToken.getRetryDelay();
                    totalRetryDelay += delay;
                    await new Promise((resolve)=>setTimeout(resolve, delay));
                }
            } else {
                retryStrategy;
                if (retryStrategy?.mode) context.userAgent = [
                    ...context.userAgent || [],
                    [
                        "cfg/retry-mode",
                        retryStrategy.mode
                    ]
                ];
                return retryStrategy.retry(next, args);
            }
        };
const isRetryStrategyV2 = (retryStrategy)=>typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
const getRetryErrorInfo = (error)=>{
    const errorInfo = {
        errorType: getRetryErrorType(error)
    };
    const retryAfterHint = getRetryAfterHint(error.$response);
    if (retryAfterHint) errorInfo.retryAfterHint = retryAfterHint;
    return errorInfo;
};
const getRetryErrorType = (error)=>{
    if ((0, _serviceErrorClassification.isThrottlingError)(error)) return "THROTTLING";
    if ((0, _serviceErrorClassification.isTransientError)(error)) return "TRANSIENT";
    if ((0, _serviceErrorClassification.isServerError)(error)) return "SERVER_ERROR";
    return "CLIENT_ERROR";
};
const retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: [
        "RETRY"
    ],
    step: "finalizeRequest",
    priority: "high",
    override: true
};
const getRetryPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
        }
    });
const getRetryAfterHint = (response)=>{
    if (!(0, _protocolHttp.HttpResponse).isInstance(response)) return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key)=>key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName) return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds)) return new Date(retryAfterSeconds * 1000);
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate;
};

},{"@aws-sdk/protocol-http":"lkWtc","@aws-sdk/service-error-classification":"020nY","@aws-sdk/util-retry":"dmBPM","uuid":"j4KJi","./util":"gy9yk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lvLFs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _checkContentLengthHeader = require("./check-content-length-header");
parcelHelpers.exportAll(_checkContentLengthHeader, exports);
var _s3Configuration = require("./s3Configuration");
parcelHelpers.exportAll(_s3Configuration, exports);
var _throw200Exceptions = require("./throw-200-exceptions");
parcelHelpers.exportAll(_throw200Exceptions, exports);
var _validateBucketName = require("./validate-bucket-name");
parcelHelpers.exportAll(_validateBucketName, exports);

},{"./check-content-length-header":"jlo2C","./s3Configuration":"4gwsI","./throw-200-exceptions":"7UxZ3","./validate-bucket-name":"bgXSe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jlo2C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkContentLengthHeader", ()=>checkContentLengthHeader);
parcelHelpers.export(exports, "checkContentLengthHeaderMiddlewareOptions", ()=>checkContentLengthHeaderMiddlewareOptions);
parcelHelpers.export(exports, "getCheckContentLengthHeaderPlugin", ()=>getCheckContentLengthHeaderPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
const CONTENT_LENGTH_HEADER = "content-length";
function checkContentLengthHeader() {
    return (next, context)=>async (args)=>{
            const { request  } = args;
            if ((0, _protocolHttp.HttpRequest).isInstance(request)) {
                if (!request.headers[CONTENT_LENGTH_HEADER]) {
                    const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
                    if (typeof context?.logger?.warn === "function") context.logger.warn(message);
                    else console.warn(message);
                }
            }
            return next({
                ...args
            });
        };
}
const checkContentLengthHeaderMiddlewareOptions = {
    step: "finalizeRequest",
    tags: [
        "CHECK_CONTENT_LENGTH_HEADER"
    ],
    name: "getCheckContentLengthHeaderPlugin",
    override: true
};
const getCheckContentLengthHeaderPlugin = (unused)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4gwsI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveS3Config", ()=>resolveS3Config);
const resolveS3Config = (input)=>({
        ...input,
        forcePathStyle: input.forcePathStyle ?? false,
        useAccelerateEndpoint: input.useAccelerateEndpoint ?? false,
        disableMultiregionAccessPoints: input.disableMultiregionAccessPoints ?? false
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7UxZ3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "throw200ExceptionsMiddleware", ()=>throw200ExceptionsMiddleware);
parcelHelpers.export(exports, "throw200ExceptionsMiddlewareOptions", ()=>throw200ExceptionsMiddlewareOptions);
parcelHelpers.export(exports, "getThrow200ExceptionsPlugin", ()=>getThrow200ExceptionsPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
const throw200ExceptionsMiddleware = (config)=>(next)=>async (args)=>{
            const result = await next(args);
            const { response  } = result;
            if (!(0, _protocolHttp.HttpResponse).isInstance(response)) return result;
            const { statusCode , body  } = response;
            if (statusCode < 200 || statusCode >= 300) return result;
            const bodyBytes = await collectBody(body, config);
            const bodyString = await collectBodyString(bodyBytes, config);
            if (bodyBytes.length === 0) {
                const err = new Error("S3 aborted request");
                err.name = "InternalError";
                throw err;
            }
            if (bodyString && bodyString.match("<Error>")) response.statusCode = 400;
            response.body = bodyBytes;
            return result;
        };
const collectBody = (streamBody = new Uint8Array(), context)=>{
    if (streamBody instanceof Uint8Array) return Promise.resolve(streamBody);
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context)=>collectBody(streamBody, context).then((body)=>context.utf8Encoder(body));
const throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: [
        "THROW_200_EXCEPTIONS",
        "S3"
    ],
    name: "throw200ExceptionsMiddleware",
    override: true
};
const getThrow200ExceptionsPlugin = (config)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgXSe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validateBucketNameMiddleware", ()=>validateBucketNameMiddleware);
parcelHelpers.export(exports, "validateBucketNameMiddlewareOptions", ()=>validateBucketNameMiddlewareOptions);
parcelHelpers.export(exports, "getValidateBucketNamePlugin", ()=>getValidateBucketNamePlugin);
var _utilArnParser = require("@aws-sdk/util-arn-parser");
function validateBucketNameMiddleware() {
    return (next)=>async (args)=>{
            const { input: { Bucket  }  } = args;
            if (typeof Bucket === "string" && !(0, _utilArnParser.validate)(Bucket) && Bucket.indexOf("/") >= 0) {
                const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
                err.name = "InvalidBucketName";
                throw err;
            }
            return next({
                ...args
            });
        };
}
const validateBucketNameMiddlewareOptions = {
    step: "initialize",
    tags: [
        "VALIDATE_BUCKET_NAME"
    ],
    name: "validateBucketNameMiddleware",
    override: true
};
const getValidateBucketNamePlugin = (unused)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);
        }
    });

},{"@aws-sdk/util-arn-parser":"bGO1i","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bGO1i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validate", ()=>validate);
parcelHelpers.export(exports, "parse", ()=>parse);
parcelHelpers.export(exports, "build", ()=>build);
const validate = (str)=>typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
const parse = (arn)=>{
    const segments = arn.split(":");
    if (segments.length < 6 || segments[0] !== "arn") throw new Error("Malformed ARN");
    const [, partition, service, region, accountId, ...resource] = segments;
    return {
        partition,
        service,
        region,
        accountId,
        resource: resource.join(":")
    };
};
const build = (arnObject)=>{
    const { partition ="aws" , service , region , accountId , resource  } = arnObject;
    if ([
        service,
        region,
        accountId,
        resource
    ].some((segment)=>typeof segment !== "string")) throw new Error("Input ARN object is invalid");
    return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"apx8g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _awsAuthConfiguration = require("./awsAuthConfiguration");
parcelHelpers.exportAll(_awsAuthConfiguration, exports);
var _awsAuthMiddleware = require("./awsAuthMiddleware");
parcelHelpers.exportAll(_awsAuthMiddleware, exports);

},{"./awsAuthConfiguration":"j194r","./awsAuthMiddleware":"aXXzV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j194r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveAwsAuthConfig", ()=>resolveAwsAuthConfig);
parcelHelpers.export(exports, "resolveSigV4AuthConfig", ()=>resolveSigV4AuthConfig);
var _propertyProvider = require("@aws-sdk/property-provider");
var _signatureV4 = require("@aws-sdk/signature-v4");
var _utilMiddleware = require("@aws-sdk/util-middleware");
const CREDENTIAL_EXPIRE_WINDOW = 300000;
const resolveAwsAuthConfig = (input)=>{
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const { signingEscapePath =true , systemClockOffset =input.systemClockOffset || 0 , sha256  } = input;
    let signer;
    if (input.signer) signer = (0, _utilMiddleware.normalizeProvider)(input.signer);
    else if (input.regionInfoProvider) signer = ()=>(0, _utilMiddleware.normalizeProvider)(input.region)().then(async (region)=>[
                await input.regionInfoProvider(region, {
                    useFipsEndpoint: await input.useFipsEndpoint(),
                    useDualstackEndpoint: await input.useDualstackEndpoint()
                }) || {},
                region
            ]).then(([regionInfo, region])=>{
            const { signingRegion , signingService  } = regionInfo;
            input.signingRegion = input.signingRegion || signingRegion || region;
            input.signingName = input.signingName || signingService || input.serviceId;
            const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath
            };
            const SignerCtor = input.signerConstructor || (0, _signatureV4.SignatureV4);
            return new SignerCtor(params);
        });
    else signer = async (authScheme)=>{
        authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, _utilMiddleware.normalizeProvider)(input.region)(),
            properties: {}
        }, authScheme);
        const signingRegion = authScheme.signingRegion;
        const signingService = authScheme.signingName;
        input.signingRegion = input.signingRegion || signingRegion;
        input.signingName = input.signingName || signingService || input.serviceId;
        const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
        };
        const SignerCtor = input.signerConstructor || (0, _signatureV4.SignatureV4);
        return new SignerCtor(params);
    };
    return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
    };
};
const resolveSigV4AuthConfig = (input)=>{
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const { signingEscapePath =true , systemClockOffset =input.systemClockOffset || 0 , sha256  } = input;
    let signer;
    if (input.signer) signer = (0, _utilMiddleware.normalizeProvider)(input.signer);
    else signer = (0, _utilMiddleware.normalizeProvider)(new (0, _signatureV4.SignatureV4)({
        credentials: normalizedCreds,
        region: input.region,
        service: input.signingName,
        sha256,
        uriEscapePath: signingEscapePath
    }));
    return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
    };
};
const normalizeCredentialProvider = (credentials)=>{
    if (typeof credentials === "function") return (0, _propertyProvider.memoize)(credentials, (credentials)=>credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials)=>credentials.expiration !== undefined);
    return (0, _utilMiddleware.normalizeProvider)(credentials);
};

},{"@aws-sdk/property-provider":"eAar8","@aws-sdk/signature-v4":"6hvul","@aws-sdk/util-middleware":"49kxo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eAar8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _credentialsProviderError = require("./CredentialsProviderError");
parcelHelpers.exportAll(_credentialsProviderError, exports);
var _providerError = require("./ProviderError");
parcelHelpers.exportAll(_providerError, exports);
var _tokenProviderError = require("./TokenProviderError");
parcelHelpers.exportAll(_tokenProviderError, exports);
var _chain = require("./chain");
parcelHelpers.exportAll(_chain, exports);
var _fromStatic = require("./fromStatic");
parcelHelpers.exportAll(_fromStatic, exports);
var _memoize = require("./memoize");
parcelHelpers.exportAll(_memoize, exports);

},{"./CredentialsProviderError":"8A2K9","./ProviderError":"jiQHC","./TokenProviderError":"485a5","./chain":"2ZXvc","./fromStatic":"gFzJA","./memoize":"baTRG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8A2K9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CredentialsProviderError", ()=>CredentialsProviderError);
var _providerError = require("./ProviderError");
class CredentialsProviderError extends (0, _providerError.ProviderError) {
    constructor(message, tryNextLink = true){
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
    }
}

},{"./ProviderError":"jiQHC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jiQHC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProviderError", ()=>ProviderError);
class ProviderError extends Error {
    constructor(message, tryNextLink = true){
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
    }
    static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"485a5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TokenProviderError", ()=>TokenProviderError);
var _providerError = require("./ProviderError");
class TokenProviderError extends (0, _providerError.ProviderError) {
    constructor(message, tryNextLink = true){
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
    }
}

},{"./ProviderError":"jiQHC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ZXvc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "chain", ()=>chain);
var _providerError = require("./ProviderError");
function chain(...providers) {
    return ()=>{
        let promise = Promise.reject(new (0, _providerError.ProviderError)("No providers in chain"));
        for (const provider of providers)promise = promise.catch((err)=>{
            if (err?.tryNextLink) return provider();
            throw err;
        });
        return promise;
    };
}

},{"./ProviderError":"jiQHC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gFzJA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromStatic", ()=>fromStatic);
const fromStatic = (staticValue)=>()=>Promise.resolve(staticValue);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"baTRG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "memoize", ()=>memoize);
const memoize = (provider, isExpired, requiresRefresh)=>{
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async ()=>{
        if (!pending) pending = provider();
        try {
            resolved = await pending;
            hasResult = true;
            isConstant = false;
        } finally{
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) return async (options)=>{
        if (!hasResult || options?.forceRefresh) resolved = await coalesceProvider();
        return resolved;
    };
    return async (options)=>{
        if (!hasResult || options?.forceRefresh) resolved = await coalesceProvider();
        if (isConstant) return resolved;
        if (requiresRefresh && !requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider();
            return resolved;
        }
        return resolved;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6hvul":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalHeaders", ()=>(0, _getCanonicalHeaders.getCanonicalHeaders));
parcelHelpers.export(exports, "getCanonicalQuery", ()=>(0, _getCanonicalQuery.getCanonicalQuery));
parcelHelpers.export(exports, "getPayloadHash", ()=>(0, _getPayloadHash.getPayloadHash));
parcelHelpers.export(exports, "moveHeadersToQuery", ()=>(0, _moveHeadersToQuery.moveHeadersToQuery));
parcelHelpers.export(exports, "prepareRequest", ()=>(0, _prepareRequest.prepareRequest));
var _signatureV4 = require("./SignatureV4");
parcelHelpers.exportAll(_signatureV4, exports);
var _getCanonicalHeaders = require("./getCanonicalHeaders");
var _getCanonicalQuery = require("./getCanonicalQuery");
var _getPayloadHash = require("./getPayloadHash");
var _moveHeadersToQuery = require("./moveHeadersToQuery");
var _prepareRequest = require("./prepareRequest");
var _credentialDerivation = require("./credentialDerivation");
parcelHelpers.exportAll(_credentialDerivation, exports);

},{"./SignatureV4":"kQXsr","./getCanonicalHeaders":"6i0m4","./getCanonicalQuery":"iIBrb","./getPayloadHash":"3i9wg","./moveHeadersToQuery":"7Vr4Q","./prepareRequest":"7dtHd","./credentialDerivation":"4J5wX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQXsr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SignatureV4", ()=>SignatureV4);
var _eventstreamCodec = require("@aws-sdk/eventstream-codec");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _utilMiddleware = require("@aws-sdk/util-middleware");
var _utilUtf8 = require("@aws-sdk/util-utf8");
var _constants = require("./constants");
var _credentialDerivation = require("./credentialDerivation");
var _getCanonicalHeaders = require("./getCanonicalHeaders");
var _getCanonicalQuery = require("./getCanonicalQuery");
var _getPayloadHash = require("./getPayloadHash");
var _headerUtil = require("./headerUtil");
var _moveHeadersToQuery = require("./moveHeadersToQuery");
var _prepareRequest = require("./prepareRequest");
var _utilDate = require("./utilDate");
class SignatureV4 {
    constructor({ applyChecksum , credentials , region , service , sha256 , uriEscapePath =true  }){
        this.headerMarshaller = new (0, _eventstreamCodec.HeaderMarshaller)((0, _utilUtf8.toUtf8), (0, _utilUtf8.fromUtf8));
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, _utilMiddleware.normalizeProvider)(region);
        this.credentialProvider = (0, _utilMiddleware.normalizeProvider)(credentials);
    }
    async presign(originalRequest, options = {}) {
        const { signingDate =new Date() , expiresIn =3600 , unsignableHeaders , unhoistableHeaders , signableHeaders , signingRegion , signingService  } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate , shortDate  } = formatDate(signingDate);
        if (expiresIn > (0, _constants.MAX_PRESIGNED_TTL)) return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        const scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService ?? this.service);
        const request = (0, _moveHeadersToQuery.moveHeadersToQuery)((0, _prepareRequest.prepareRequest)(originalRequest), {
            unhoistableHeaders
        });
        if (credentials.sessionToken) request.query[0, _constants.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        request.query[0, _constants.ALGORITHM_QUERY_PARAM] = (0, _constants.ALGORITHM_IDENTIFIER);
        request.query[0, _constants.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[0, _constants.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[0, _constants.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, _getCanonicalHeaders.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[0, _constants.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[0, _constants.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, _getPayloadHash.getPayloadHash)(originalRequest, this.sha256)));
        return request;
    }
    async sign(toSign, options) {
        if (typeof toSign === "string") return this.signString(toSign, options);
        else if (toSign.headers && toSign.payload) return this.signEvent(toSign, options);
        else if (toSign.message) return this.signMessage(toSign, options);
        else return this.signRequest(toSign, options);
    }
    async signEvent({ headers , payload  }, { signingDate =new Date() , priorSignature , signingRegion , signingService  }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate , longDate  } = formatDate(signingDate);
        const scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService ?? this.service);
        const hashedPayload = await (0, _getPayloadHash.getPayloadHash)({
            headers: {},
            body: payload
        }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, _utilHexEncoding.toHex)(await hash.digest());
        const stringToSign = [
            (0, _constants.EVENT_ALGORITHM_IDENTIFIER),
            longDate,
            scope,
            priorSignature,
            hashedHeaders,
            hashedPayload
        ].join("\n");
        return this.signString(stringToSign, {
            signingDate,
            signingRegion: region,
            signingService
        });
    }
    async signMessage(signableMessage, { signingDate =new Date() , signingRegion , signingService  }) {
        const promise = this.signEvent({
            headers: this.headerMarshaller.format(signableMessage.message.headers),
            payload: signableMessage.message.body
        }, {
            signingDate,
            signingRegion,
            signingService,
            priorSignature: signableMessage.priorSignature
        });
        return promise.then((signature)=>{
            return {
                message: signableMessage.message,
                signature
            };
        });
    }
    async signString(stringToSign, { signingDate =new Date() , signingRegion , signingService  } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate  } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, _utilUtf8.toUint8Array)(stringToSign));
        return (0, _utilHexEncoding.toHex)(await hash.digest());
    }
    async signRequest(requestToSign, { signingDate =new Date() , signableHeaders , unsignableHeaders , signingRegion , signingService  } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request = (0, _prepareRequest.prepareRequest)(requestToSign);
        const { longDate , shortDate  } = formatDate(signingDate);
        const scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService ?? this.service);
        request.headers[0, _constants.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) request.headers[0, _constants.TOKEN_HEADER] = credentials.sessionToken;
        const payloadHash = await (0, _getPayloadHash.getPayloadHash)(request, this.sha256);
        if (!(0, _headerUtil.hasHeader)((0, _constants.SHA256_HEADER), request.headers) && this.applyChecksum) request.headers[0, _constants.SHA256_HEADER] = payloadHash;
        const canonicalHeaders = (0, _getCanonicalHeaders.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[0, _constants.AUTH_HEADER] = `${0, _constants.ALGORITHM_IDENTIFIER} ` + `Credential=${credentials.accessKeyId}/${scope}, ` + `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` + `Signature=${signature}`;
        return request;
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, _getCanonicalQuery.getCanonicalQuery)(request)}
${sortedHeaders.map((name)=>`${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, _utilUtf8.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${0, _constants.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, _utilHexEncoding.toHex)(hashedRequest)}`;
    }
    getCanonicalPath({ path  }) {
        if (this.uriEscapePath) {
            const normalizedPathSegments = [];
            for (const pathSegment of path.split("/")){
                if (pathSegment?.length === 0) continue;
                if (pathSegment === ".") continue;
                if (pathSegment === "..") normalizedPathSegments.pop();
                else normalizedPathSegments.push(pathSegment);
            }
            const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
            const doubleEncoded = encodeURIComponent(normalizedPath);
            return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, _utilUtf8.toUint8Array)(stringToSign));
        return (0, _utilHexEncoding.toHex)(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
        return (0, _credentialDerivation.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
    }
    validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") throw new Error("Resolved credential object is not valid");
    }
}
const formatDate = (now)=>{
    const longDate = (0, _utilDate.iso8601)(now).replace(/[\-:]/g, "");
    return {
        longDate,
        shortDate: longDate.slice(0, 8)
    };
};
const getCanonicalHeaderList = (headers)=>Object.keys(headers).sort().join(";");

},{"@aws-sdk/eventstream-codec":"03PLO","@aws-sdk/util-hex-encoding":"d6D69","@aws-sdk/util-middleware":"49kxo","@aws-sdk/util-utf8":"6cVVP","./constants":"93sQf","./credentialDerivation":"4J5wX","./getCanonicalHeaders":"6i0m4","./getCanonicalQuery":"iIBrb","./getPayloadHash":"3i9wg","./headerUtil":"aCekx","./moveHeadersToQuery":"7Vr4Q","./prepareRequest":"7dtHd","./utilDate":"6Oggi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"03PLO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventStreamCodec = require("./EventStreamCodec");
parcelHelpers.exportAll(_eventStreamCodec, exports);
var _headerMarshaller = require("./HeaderMarshaller");
parcelHelpers.exportAll(_headerMarshaller, exports);
var _int64 = require("./Int64");
parcelHelpers.exportAll(_int64, exports);
var _message = require("./Message");
parcelHelpers.exportAll(_message, exports);
var _messageDecoderStream = require("./MessageDecoderStream");
parcelHelpers.exportAll(_messageDecoderStream, exports);
var _messageEncoderStream = require("./MessageEncoderStream");
parcelHelpers.exportAll(_messageEncoderStream, exports);
var _smithyMessageDecoderStream = require("./SmithyMessageDecoderStream");
parcelHelpers.exportAll(_smithyMessageDecoderStream, exports);
var _smithyMessageEncoderStream = require("./SmithyMessageEncoderStream");
parcelHelpers.exportAll(_smithyMessageEncoderStream, exports);

},{"./EventStreamCodec":"gl02q","./HeaderMarshaller":"7rLXc","./Int64":"0VJuX","./Message":"8g4wI","./MessageDecoderStream":"AcwRc","./MessageEncoderStream":"6Y6Uu","./SmithyMessageDecoderStream":"1sb4l","./SmithyMessageEncoderStream":"2Uwo4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gl02q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventStreamCodec", ()=>EventStreamCodec);
var _crc32 = require("@aws-crypto/crc32");
var _headerMarshaller = require("./HeaderMarshaller");
var _splitMessage = require("./splitMessage");
class EventStreamCodec {
    constructor(toUtf8, fromUtf8){
        this.headerMarshaller = new (0, _headerMarshaller.HeaderMarshaller)(toUtf8, fromUtf8);
        this.messageBuffer = [];
        this.isEndOfStream = false;
    }
    feed(message) {
        this.messageBuffer.push(this.decode(message));
    }
    endOfStream() {
        this.isEndOfStream = true;
    }
    getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
            getMessage () {
                return message;
            },
            isEndOfStream () {
                return isEndOfStream;
            }
        };
    }
    getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
            getMessages () {
                return messages;
            },
            isEndOfStream () {
                return isEndOfStream;
            }
        };
    }
    encode({ headers: rawHeaders , body  }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new (0, _crc32.Crc32)();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
    }
    decode(message) {
        const { headers , body  } = (0, _splitMessage.splitMessage)(message);
        return {
            headers: this.headerMarshaller.parse(headers),
            body
        };
    }
    formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
    }
}

},{"@aws-crypto/crc32":"eJWDd","./HeaderMarshaller":"7rLXc","./splitMessage":"1oEA2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJWDd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;
var tslib_1 = require("eb190ce5d781d2");
var util_1 = require("b0d4507b4ec71f92");
function crc32(data) {
    return new Crc32().update(data).digest();
}
exports.crc32 = crc32;
var Crc32 = /** @class */ function() {
    function Crc32() {
        this.checksum = 0xffffffff;
    }
    Crc32.prototype.update = function(data) {
        var e_1, _a;
        try {
            for(var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()){
                var byte = data_1_1.value;
                this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 0xff];
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return this;
    };
    Crc32.prototype.digest = function() {
        return (this.checksum ^ 0xffffffff) >>> 0;
    };
    return Crc32;
}();
exports.Crc32 = Crc32;
// prettier-ignore
var a_lookUpTable = [
    0x00000000,
    0x77073096,
    0xEE0E612C,
    0x990951BA,
    0x076DC419,
    0x706AF48F,
    0xE963A535,
    0x9E6495A3,
    0x0EDB8832,
    0x79DCB8A4,
    0xE0D5E91E,
    0x97D2D988,
    0x09B64C2B,
    0x7EB17CBD,
    0xE7B82D07,
    0x90BF1D91,
    0x1DB71064,
    0x6AB020F2,
    0xF3B97148,
    0x84BE41DE,
    0x1ADAD47D,
    0x6DDDE4EB,
    0xF4D4B551,
    0x83D385C7,
    0x136C9856,
    0x646BA8C0,
    0xFD62F97A,
    0x8A65C9EC,
    0x14015C4F,
    0x63066CD9,
    0xFA0F3D63,
    0x8D080DF5,
    0x3B6E20C8,
    0x4C69105E,
    0xD56041E4,
    0xA2677172,
    0x3C03E4D1,
    0x4B04D447,
    0xD20D85FD,
    0xA50AB56B,
    0x35B5A8FA,
    0x42B2986C,
    0xDBBBC9D6,
    0xACBCF940,
    0x32D86CE3,
    0x45DF5C75,
    0xDCD60DCF,
    0xABD13D59,
    0x26D930AC,
    0x51DE003A,
    0xC8D75180,
    0xBFD06116,
    0x21B4F4B5,
    0x56B3C423,
    0xCFBA9599,
    0xB8BDA50F,
    0x2802B89E,
    0x5F058808,
    0xC60CD9B2,
    0xB10BE924,
    0x2F6F7C87,
    0x58684C11,
    0xC1611DAB,
    0xB6662D3D,
    0x76DC4190,
    0x01DB7106,
    0x98D220BC,
    0xEFD5102A,
    0x71B18589,
    0x06B6B51F,
    0x9FBFE4A5,
    0xE8B8D433,
    0x7807C9A2,
    0x0F00F934,
    0x9609A88E,
    0xE10E9818,
    0x7F6A0DBB,
    0x086D3D2D,
    0x91646C97,
    0xE6635C01,
    0x6B6B51F4,
    0x1C6C6162,
    0x856530D8,
    0xF262004E,
    0x6C0695ED,
    0x1B01A57B,
    0x8208F4C1,
    0xF50FC457,
    0x65B0D9C6,
    0x12B7E950,
    0x8BBEB8EA,
    0xFCB9887C,
    0x62DD1DDF,
    0x15DA2D49,
    0x8CD37CF3,
    0xFBD44C65,
    0x4DB26158,
    0x3AB551CE,
    0xA3BC0074,
    0xD4BB30E2,
    0x4ADFA541,
    0x3DD895D7,
    0xA4D1C46D,
    0xD3D6F4FB,
    0x4369E96A,
    0x346ED9FC,
    0xAD678846,
    0xDA60B8D0,
    0x44042D73,
    0x33031DE5,
    0xAA0A4C5F,
    0xDD0D7CC9,
    0x5005713C,
    0x270241AA,
    0xBE0B1010,
    0xC90C2086,
    0x5768B525,
    0x206F85B3,
    0xB966D409,
    0xCE61E49F,
    0x5EDEF90E,
    0x29D9C998,
    0xB0D09822,
    0xC7D7A8B4,
    0x59B33D17,
    0x2EB40D81,
    0xB7BD5C3B,
    0xC0BA6CAD,
    0xEDB88320,
    0x9ABFB3B6,
    0x03B6E20C,
    0x74B1D29A,
    0xEAD54739,
    0x9DD277AF,
    0x04DB2615,
    0x73DC1683,
    0xE3630B12,
    0x94643B84,
    0x0D6D6A3E,
    0x7A6A5AA8,
    0xE40ECF0B,
    0x9309FF9D,
    0x0A00AE27,
    0x7D079EB1,
    0xF00F9344,
    0x8708A3D2,
    0x1E01F268,
    0x6906C2FE,
    0xF762575D,
    0x806567CB,
    0x196C3671,
    0x6E6B06E7,
    0xFED41B76,
    0x89D32BE0,
    0x10DA7A5A,
    0x67DD4ACC,
    0xF9B9DF6F,
    0x8EBEEFF9,
    0x17B7BE43,
    0x60B08ED5,
    0xD6D6A3E8,
    0xA1D1937E,
    0x38D8C2C4,
    0x4FDFF252,
    0xD1BB67F1,
    0xA6BC5767,
    0x3FB506DD,
    0x48B2364B,
    0xD80D2BDA,
    0xAF0A1B4C,
    0x36034AF6,
    0x41047A60,
    0xDF60EFC3,
    0xA867DF55,
    0x316E8EEF,
    0x4669BE79,
    0xCB61B38C,
    0xBC66831A,
    0x256FD2A0,
    0x5268E236,
    0xCC0C7795,
    0xBB0B4703,
    0x220216B9,
    0x5505262F,
    0xC5BA3BBE,
    0xB2BD0B28,
    0x2BB45A92,
    0x5CB36A04,
    0xC2D7FFA7,
    0xB5D0CF31,
    0x2CD99E8B,
    0x5BDEAE1D,
    0x9B64C2B0,
    0xEC63F226,
    0x756AA39C,
    0x026D930A,
    0x9C0906A9,
    0xEB0E363F,
    0x72076785,
    0x05005713,
    0x95BF4A82,
    0xE2B87A14,
    0x7BB12BAE,
    0x0CB61B38,
    0x92D28E9B,
    0xE5D5BE0D,
    0x7CDCEFB7,
    0x0BDBDF21,
    0x86D3D2D4,
    0xF1D4E242,
    0x68DDB3F8,
    0x1FDA836E,
    0x81BE16CD,
    0xF6B9265B,
    0x6FB077E1,
    0x18B74777,
    0x88085AE6,
    0xFF0F6A70,
    0x66063BCA,
    0x11010B5C,
    0x8F659EFF,
    0xF862AE69,
    0x616BFFD3,
    0x166CCF45,
    0xA00AE278,
    0xD70DD2EE,
    0x4E048354,
    0x3903B3C2,
    0xA7672661,
    0xD06016F7,
    0x4969474D,
    0x3E6E77DB,
    0xAED16A4A,
    0xD9D65ADC,
    0x40DF0B66,
    0x37D83BF0,
    0xA9BCAE53,
    0xDEBB9EC5,
    0x47B2CF7F,
    0x30B5FFE9,
    0xBDBDF21C,
    0xCABAC28A,
    0x53B39330,
    0x24B4A3A6,
    0xBAD03605,
    0xCDD70693,
    0x54DE5729,
    0x23D967BF,
    0xB3667A2E,
    0xC4614AB8,
    0x5D681B02,
    0x2A6F2B94,
    0xB40BBE37,
    0xC30C8EA1,
    0x5A05DF1B,
    0x2D02EF8D
];
var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
var aws_crc32_1 = require("ec5c1fdc84f4e928");
Object.defineProperty(exports, "AwsCrc32", {
    enumerable: true,
    get: function() {
        return aws_crc32_1.AwsCrc32;
    }
});

},{"eb190ce5d781d2":"h7iN5","b0d4507b4ec71f92":"aDvRG","ec5c1fdc84f4e928":"dzmIN"}],"h7iN5":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aDvRG":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
var convertToBuffer_1 = require("d546aa13e7a4f234");
Object.defineProperty(exports, "convertToBuffer", {
    enumerable: true,
    get: function() {
        return convertToBuffer_1.convertToBuffer;
    }
});
var isEmptyData_1 = require("688570fbe8307eb0");
Object.defineProperty(exports, "isEmptyData", {
    enumerable: true,
    get: function() {
        return isEmptyData_1.isEmptyData;
    }
});
var numToUint8_1 = require("9f8c2d94c37c0290");
Object.defineProperty(exports, "numToUint8", {
    enumerable: true,
    get: function() {
        return numToUint8_1.numToUint8;
    }
});
var uint32ArrayFrom_1 = require("65327eb5bf877089");
Object.defineProperty(exports, "uint32ArrayFrom", {
    enumerable: true,
    get: function() {
        return uint32ArrayFrom_1.uint32ArrayFrom;
    }
});

},{"d546aa13e7a4f234":"9wG1p","688570fbe8307eb0":"7lZKK","9f8c2d94c37c0290":"6vB9f","65327eb5bf877089":"gwA65"}],"9wG1p":[function(require,module,exports) {
var Buffer = require("c6f30219801e45d2").Buffer;
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.convertToBuffer = void 0;
var util_utf8_browser_1 = require("edd31833385d65db");
// Quick polyfill
var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
    return Buffer.from(input, "utf8");
} : util_utf8_browser_1.fromUtf8;
function convertToBuffer(data) {
    // Already a Uint8, do nothing
    if (data instanceof Uint8Array) return data;
    if (typeof data === "string") return fromUtf8(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}
exports.convertToBuffer = convertToBuffer;

},{"c6f30219801e45d2":"fCgem","edd31833385d65db":"3Y1HX"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("9c62938f1dccc73c");
const ieee754 = require("aceacb6a4531a9d2");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"9c62938f1dccc73c":"eIiSV","aceacb6a4531a9d2":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"3Y1HX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
var _pureJs = require("./pureJs");
var _whatwgEncodingApi = require("./whatwgEncodingApi");
const fromUtf8 = (input)=>typeof TextEncoder === "function" ? (0, _whatwgEncodingApi.fromUtf8)(input) : (0, _pureJs.fromUtf8)(input);
const toUtf8 = (input)=>typeof TextDecoder === "function" ? (0, _whatwgEncodingApi.toUtf8)(input) : (0, _pureJs.toUtf8)(input);

},{"./pureJs":"aef7j","./whatwgEncodingApi":"bpscb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aef7j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
const fromUtf8 = (input)=>{
    const bytes = [];
    for(let i = 0, len = input.length; i < len; i++){
        const value = input.charCodeAt(i);
        if (value < 0x80) bytes.push(value);
        else if (value < 0x800) bytes.push(value >> 6 | 192, value & 63 | 128);
        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            const surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
            bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
    }
    return Uint8Array.from(bytes);
};
const toUtf8 = (input)=>{
    let decoded = "";
    for(let i = 0, len = input.length; i < len; i++){
        const byte = input[i];
        if (byte < 0x80) decoded += String.fromCharCode(byte);
        else if (192 <= byte && byte < 224) {
            const nextByte = input[++i];
            decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
            const surrogatePair = [
                byte,
                input[++i],
                input[++i],
                input[++i]
            ];
            const encoded = "%" + surrogatePair.map((byteValue)=>byteValue.toString(16)).join("%");
            decoded += decodeURIComponent(encoded);
        } else decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
    }
    return decoded;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpscb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
function fromUtf8(input) {
    return new TextEncoder().encode(input);
}
function toUtf8(input) {
    return new TextDecoder("utf-8").decode(input);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7lZKK":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;

},{}],"6vB9f":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.numToUint8 = void 0;
function numToUint8(num) {
    return new Uint8Array([
        (num & 0xff000000) >> 24,
        (num & 0x00ff0000) >> 16,
        (num & 0x0000ff00) >> 8,
        num & 0x000000ff
    ]);
}
exports.numToUint8 = numToUint8;

},{}],"gwA65":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uint32ArrayFrom = void 0;
// IE 11 does not support Array.from, so we do it manually
function uint32ArrayFrom(a_lookUpTable) {
    if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while(a_index < a_lookUpTable.length){
            return_array[a_index] = a_lookUpTable[a_index];
            a_index += 1;
        }
        return return_array;
    }
    return Uint32Array.from(a_lookUpTable);
}
exports.uint32ArrayFrom = uint32ArrayFrom;

},{}],"dzmIN":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AwsCrc32 = void 0;
var tslib_1 = require("bee24bf490010395");
var util_1 = require("4d1faea5abf6593e");
var index_1 = require("3def414f17585db6");
var AwsCrc32 = /** @class */ function() {
    function AwsCrc32() {
        this.crc32 = new index_1.Crc32();
    }
    AwsCrc32.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash)) return;
        this.crc32.update((0, util_1.convertToBuffer)(toHash));
    };
    AwsCrc32.prototype.digest = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    (0, util_1.numToUint8)(this.crc32.digest())
                ];
            });
        });
    };
    AwsCrc32.prototype.reset = function() {
        this.crc32 = new index_1.Crc32();
    };
    return AwsCrc32;
}();
exports.AwsCrc32 = AwsCrc32;

},{"bee24bf490010395":"h7iN5","4d1faea5abf6593e":"aDvRG","3def414f17585db6":"eJWDd"}],"7rLXc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HeaderMarshaller", ()=>HeaderMarshaller);
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _int64 = require("./Int64");
class HeaderMarshaller {
    constructor(toUtf8, fromUtf8){
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
    }
    format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)){
            const bytes = this.fromUtf8(headerName);
            chunks.push(Uint8Array.from([
                bytes.byteLength
            ]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes)=>carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks){
            out.set(chunk, position);
            position += chunk.byteLength;
        }
        return out;
    }
    formatHeaderValue(header) {
        switch(header.type){
            case "boolean":
                return Uint8Array.from([
                    header.value ? 0 : 1
                ]);
            case "byte":
                return Uint8Array.from([
                    2,
                    header.value
                ]);
            case "short":
                const shortView = new DataView(new ArrayBuffer(3));
                shortView.setUint8(0, 3);
                shortView.setInt16(1, header.value, false);
                return new Uint8Array(shortView.buffer);
            case "integer":
                const intView = new DataView(new ArrayBuffer(5));
                intView.setUint8(0, 4);
                intView.setInt32(1, header.value, false);
                return new Uint8Array(intView.buffer);
            case "long":
                const longBytes = new Uint8Array(9);
                longBytes[0] = 5;
                longBytes.set(header.value.bytes, 1);
                return longBytes;
            case "binary":
                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
                binView.setUint8(0, 6);
                binView.setUint16(1, header.value.byteLength, false);
                const binBytes = new Uint8Array(binView.buffer);
                binBytes.set(header.value, 3);
                return binBytes;
            case "string":
                const utf8Bytes = this.fromUtf8(header.value);
                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
                strView.setUint8(0, 7);
                strView.setUint16(1, utf8Bytes.byteLength, false);
                const strBytes = new Uint8Array(strView.buffer);
                strBytes.set(utf8Bytes, 3);
                return strBytes;
            case "timestamp":
                const tsBytes = new Uint8Array(9);
                tsBytes[0] = 8;
                tsBytes.set((0, _int64.Int64).fromNumber(header.value.valueOf()).bytes, 1);
                return tsBytes;
            case "uuid":
                if (!UUID_PATTERN.test(header.value)) throw new Error(`Invalid UUID received: ${header.value}`);
                const uuidBytes = new Uint8Array(17);
                uuidBytes[0] = 9;
                uuidBytes.set((0, _utilHexEncoding.fromHex)(header.value.replace(/\-/g, "")), 1);
                return uuidBytes;
        }
    }
    parse(headers) {
        const out = {};
        let position = 0;
        while(position < headers.byteLength){
            const nameLength = headers.getUint8(position++);
            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
            position += nameLength;
            switch(headers.getUint8(position++)){
                case 0:
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: true
                    };
                    break;
                case 1:
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: false
                    };
                    break;
                case 2:
                    out[name] = {
                        type: BYTE_TAG,
                        value: headers.getInt8(position++)
                    };
                    break;
                case 3:
                    out[name] = {
                        type: SHORT_TAG,
                        value: headers.getInt16(position, false)
                    };
                    position += 2;
                    break;
                case 4:
                    out[name] = {
                        type: INT_TAG,
                        value: headers.getInt32(position, false)
                    };
                    position += 4;
                    break;
                case 5:
                    out[name] = {
                        type: LONG_TAG,
                        value: new (0, _int64.Int64)(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
                    };
                    position += 8;
                    break;
                case 6:
                    const binaryLength = headers.getUint16(position, false);
                    position += 2;
                    out[name] = {
                        type: BINARY_TAG,
                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
                    };
                    position += binaryLength;
                    break;
                case 7:
                    const stringLength = headers.getUint16(position, false);
                    position += 2;
                    out[name] = {
                        type: STRING_TAG,
                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
                    };
                    position += stringLength;
                    break;
                case 8:
                    out[name] = {
                        type: TIMESTAMP_TAG,
                        value: new Date(new (0, _int64.Int64)(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
                    };
                    position += 8;
                    break;
                case 9:
                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
                    position += 16;
                    out[name] = {
                        type: UUID_TAG,
                        value: `${(0, _utilHexEncoding.toHex)(uuidBytes.subarray(0, 4))}-${(0, _utilHexEncoding.toHex)(uuidBytes.subarray(4, 6))}-${(0, _utilHexEncoding.toHex)(uuidBytes.subarray(6, 8))}-${(0, _utilHexEncoding.toHex)(uuidBytes.subarray(8, 10))}-${(0, _utilHexEncoding.toHex)(uuidBytes.subarray(10))}`
                    };
                    break;
                default:
                    throw new Error(`Unrecognized header type tag`);
            }
        }
        return out;
    }
}
var HEADER_VALUE_TYPE;
(function(HEADER_VALUE_TYPE) {
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolTrue"] = 0] = "boolTrue";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolFalse"] = 1] = "boolFalse";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byte"] = 2] = "byte";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["short"] = 3] = "short";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["integer"] = 4] = "integer";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["long"] = 5] = "long";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byteArray"] = 6] = "byteArray";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["string"] = 7] = "string";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["timestamp"] = 8] = "timestamp";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["uuid"] = 9] = "uuid";
})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
const BOOLEAN_TAG = "boolean";
const BYTE_TAG = "byte";
const SHORT_TAG = "short";
const INT_TAG = "integer";
const LONG_TAG = "long";
const BINARY_TAG = "binary";
const STRING_TAG = "string";
const TIMESTAMP_TAG = "timestamp";
const UUID_TAG = "uuid";
const UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;

},{"@aws-sdk/util-hex-encoding":"d6D69","./Int64":"0VJuX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d6D69":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromHex", ()=>fromHex);
parcelHelpers.export(exports, "toHex", ()=>toHex);
const SHORT_TO_HEX = {};
const HEX_TO_SHORT = {};
for(let i = 0; i < 256; i++){
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) encodedByte = `0${encodedByte}`;
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}
function fromHex(encoded) {
    if (encoded.length % 2 !== 0) throw new Error("Hex encoded strings must have an even number length");
    const out = new Uint8Array(encoded.length / 2);
    for(let i = 0; i < encoded.length; i += 2){
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) out[i / 2] = HEX_TO_SHORT[encodedByte];
        else throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
    return out;
}
function toHex(bytes) {
    let out = "";
    for(let i = 0; i < bytes.byteLength; i++)out += SHORT_TO_HEX[bytes[i]];
    return out;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"0VJuX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Int64", ()=>Int64);
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
class Int64 {
    constructor(bytes){
        this.bytes = bytes;
        if (bytes.byteLength !== 8) throw new Error("Int64 buffers must be exactly 8 bytes");
    }
    static fromNumber(number) {
        if (number > 9223372036854776000 || number < -9223372036854776000) throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        const bytes = new Uint8Array(8);
        for(let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256)bytes[i] = remaining;
        if (number < 0) negate(bytes);
        return new Int64(bytes);
    }
    valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) negate(bytes);
        return parseInt((0, _utilHexEncoding.toHex)(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
        return String(this.valueOf());
    }
}
function negate(bytes) {
    for(let i = 0; i < 8; i++)bytes[i] ^= 0xff;
    for(let i = 7; i > -1; i--){
        bytes[i]++;
        if (bytes[i] !== 0) break;
    }
}

},{"@aws-sdk/util-hex-encoding":"d6D69","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1oEA2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "splitMessage", ()=>splitMessage);
var _crc32 = require("@aws-crypto/crc32");
const PRELUDE_MEMBER_LENGTH = 4;
const PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
const CHECKSUM_LENGTH = 4;
const MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
function splitMessage({ byteLength , byteOffset , buffer  }) {
    if (byteLength < MINIMUM_MESSAGE_LENGTH) throw new Error("Provided message too short to accommodate event stream message overhead");
    const view = new DataView(buffer, byteOffset, byteLength);
    const messageLength = view.getUint32(0, false);
    if (byteLength !== messageLength) throw new Error("Reported message length does not match received message length");
    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
    const checksummer = new (0, _crc32.Crc32)().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
    if (expectedPreludeChecksum !== checksummer.digest()) throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
    if (expectedMessageChecksum !== checksummer.digest()) throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
    return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
    };
}

},{"@aws-crypto/crc32":"eJWDd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8g4wI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"AcwRc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MessageDecoderStream", ()=>MessageDecoderStream);
class MessageDecoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const bytes of this.options.inputStream){
            const decoded = this.options.decoder.decode(bytes);
            yield decoded;
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Y6Uu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MessageEncoderStream", ()=>MessageEncoderStream);
class MessageEncoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const msg of this.options.messageStream){
            const encoded = this.options.encoder.encode(msg);
            yield encoded;
        }
        if (this.options.includeEndFrame) yield new Uint8Array(0);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1sb4l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SmithyMessageDecoderStream", ()=>SmithyMessageDecoderStream);
class SmithyMessageDecoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const message of this.options.messageStream){
            const deserialized = await this.options.deserializer(message);
            if (deserialized === undefined) continue;
            yield deserialized;
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Uwo4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SmithyMessageEncoderStream", ()=>SmithyMessageEncoderStream);
class SmithyMessageEncoderStream {
    constructor(options){
        this.options = options;
    }
    [Symbol.asyncIterator]() {
        return this.asyncIterator();
    }
    async *asyncIterator() {
        for await (const chunk of this.options.inputStream){
            const payloadBuf = this.options.serializer(chunk);
            yield payloadBuf;
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6cVVP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fromUtf8 = require("./fromUtf8");
parcelHelpers.exportAll(_fromUtf8, exports);
var _toUint8Array = require("./toUint8Array");
parcelHelpers.exportAll(_toUint8Array, exports);
var _toUtf8 = require("./toUtf8");
parcelHelpers.exportAll(_toUtf8, exports);

},{"./fromUtf8":"fA6Gv","./toUint8Array":"gxb2S","./toUtf8":"joiDO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fA6Gv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
const fromUtf8 = (input)=>new TextEncoder().encode(input);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gxb2S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toUint8Array", ()=>toUint8Array);
var _fromUtf8 = require("./fromUtf8");
const toUint8Array = (data)=>{
    if (typeof data === "string") return (0, _fromUtf8.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
};

},{"./fromUtf8":"fA6Gv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"joiDO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
const toUtf8 = (input)=>new TextDecoder("utf-8").decode(input);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"93sQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ALGORITHM_QUERY_PARAM", ()=>ALGORITHM_QUERY_PARAM);
parcelHelpers.export(exports, "CREDENTIAL_QUERY_PARAM", ()=>CREDENTIAL_QUERY_PARAM);
parcelHelpers.export(exports, "AMZ_DATE_QUERY_PARAM", ()=>AMZ_DATE_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNED_HEADERS_QUERY_PARAM", ()=>SIGNED_HEADERS_QUERY_PARAM);
parcelHelpers.export(exports, "EXPIRES_QUERY_PARAM", ()=>EXPIRES_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNATURE_QUERY_PARAM", ()=>SIGNATURE_QUERY_PARAM);
parcelHelpers.export(exports, "TOKEN_QUERY_PARAM", ()=>TOKEN_QUERY_PARAM);
parcelHelpers.export(exports, "REGION_SET_PARAM", ()=>REGION_SET_PARAM);
parcelHelpers.export(exports, "AUTH_HEADER", ()=>AUTH_HEADER);
parcelHelpers.export(exports, "AMZ_DATE_HEADER", ()=>AMZ_DATE_HEADER);
parcelHelpers.export(exports, "DATE_HEADER", ()=>DATE_HEADER);
parcelHelpers.export(exports, "GENERATED_HEADERS", ()=>GENERATED_HEADERS);
parcelHelpers.export(exports, "SIGNATURE_HEADER", ()=>SIGNATURE_HEADER);
parcelHelpers.export(exports, "SHA256_HEADER", ()=>SHA256_HEADER);
parcelHelpers.export(exports, "TOKEN_HEADER", ()=>TOKEN_HEADER);
parcelHelpers.export(exports, "HOST_HEADER", ()=>HOST_HEADER);
parcelHelpers.export(exports, "ALWAYS_UNSIGNABLE_HEADERS", ()=>ALWAYS_UNSIGNABLE_HEADERS);
parcelHelpers.export(exports, "PROXY_HEADER_PATTERN", ()=>PROXY_HEADER_PATTERN);
parcelHelpers.export(exports, "SEC_HEADER_PATTERN", ()=>SEC_HEADER_PATTERN);
parcelHelpers.export(exports, "UNSIGNABLE_PATTERNS", ()=>UNSIGNABLE_PATTERNS);
parcelHelpers.export(exports, "ALGORITHM_IDENTIFIER", ()=>ALGORITHM_IDENTIFIER);
parcelHelpers.export(exports, "ALGORITHM_IDENTIFIER_V4A", ()=>ALGORITHM_IDENTIFIER_V4A);
parcelHelpers.export(exports, "EVENT_ALGORITHM_IDENTIFIER", ()=>EVENT_ALGORITHM_IDENTIFIER);
parcelHelpers.export(exports, "UNSIGNED_PAYLOAD", ()=>UNSIGNED_PAYLOAD);
parcelHelpers.export(exports, "MAX_CACHE_SIZE", ()=>MAX_CACHE_SIZE);
parcelHelpers.export(exports, "KEY_TYPE_IDENTIFIER", ()=>KEY_TYPE_IDENTIFIER);
parcelHelpers.export(exports, "MAX_PRESIGNED_TTL", ()=>MAX_PRESIGNED_TTL);
const ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
const CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
const AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
const SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
const EXPIRES_QUERY_PARAM = "X-Amz-Expires";
const SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
const TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
const REGION_SET_PARAM = "X-Amz-Region-Set";
const AUTH_HEADER = "authorization";
const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
const DATE_HEADER = "date";
const GENERATED_HEADERS = [
    AUTH_HEADER,
    AMZ_DATE_HEADER,
    DATE_HEADER
];
const SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
const SHA256_HEADER = "x-amz-content-sha256";
const TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
const HOST_HEADER = "host";
const ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true
};
const PROXY_HEADER_PATTERN = /^proxy-/;
const SEC_HEADER_PATTERN = /^sec-/;
const UNSIGNABLE_PATTERNS = [
    /^proxy-/i,
    /^sec-/i
];
const ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
const ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
const EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
const UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
const MAX_CACHE_SIZE = 50;
const KEY_TYPE_IDENTIFIER = "aws4_request";
const MAX_PRESIGNED_TTL = 604800;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4J5wX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createScope", ()=>createScope);
parcelHelpers.export(exports, "getSigningKey", ()=>getSigningKey);
parcelHelpers.export(exports, "clearCredentialCache", ()=>clearCredentialCache);
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _utilUtf8 = require("@aws-sdk/util-utf8");
var _constants = require("./constants");
const signingKeyCache = {};
const cacheQueue = [];
const createScope = (shortDate, region, service)=>`${shortDate}/${region}/${service}/${0, _constants.KEY_TYPE_IDENTIFIER}`;
const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service)=>{
    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
    const cacheKey = `${shortDate}:${region}:${service}:${(0, _utilHexEncoding.toHex)(credsHash)}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) return signingKeyCache[cacheKey];
    cacheQueue.push(cacheKey);
    while(cacheQueue.length > (0, _constants.MAX_CACHE_SIZE))delete signingKeyCache[cacheQueue.shift()];
    let key = `AWS4${credentials.secretAccessKey}`;
    for (const signable of [
        shortDate,
        region,
        service,
        (0, _constants.KEY_TYPE_IDENTIFIER)
    ])key = await hmac(sha256Constructor, key, signable);
    return signingKeyCache[cacheKey] = key;
};
const clearCredentialCache = ()=>{
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach((cacheKey)=>{
        delete signingKeyCache[cacheKey];
    });
};
const hmac = (ctor, secret, data)=>{
    const hash = new ctor(secret);
    hash.update((0, _utilUtf8.toUint8Array)(data));
    return hash.digest();
};

},{"@aws-sdk/util-hex-encoding":"d6D69","@aws-sdk/util-utf8":"6cVVP","./constants":"93sQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6i0m4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalHeaders", ()=>getCanonicalHeaders);
var _constants = require("./constants");
const getCanonicalHeaders = ({ headers  }, unsignableHeaders, signableHeaders)=>{
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()){
        if (headers[headerName] == undefined) continue;
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in (0, _constants.ALWAYS_UNSIGNABLE_HEADERS) || unsignableHeaders?.has(canonicalHeaderName) || (0, _constants.PROXY_HEADER_PATTERN).test(canonicalHeaderName) || (0, _constants.SEC_HEADER_PATTERN).test(canonicalHeaderName)) {
            if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) continue;
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
};

},{"./constants":"93sQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iIBrb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalQuery", ()=>getCanonicalQuery);
var _utilUriEscape = require("@aws-sdk/util-uri-escape");
var _constants = require("./constants");
const getCanonicalQuery = ({ query ={}  })=>{
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query).sort()){
        if (key.toLowerCase() === (0, _constants.SIGNATURE_HEADER)) continue;
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") serialized[key] = `${(0, _utilUriEscape.escapeUri)(key)}=${(0, _utilUriEscape.escapeUri)(value)}`;
        else if (Array.isArray(value)) serialized[key] = value.slice(0).sort().reduce((encoded, value)=>encoded.concat([
                `${(0, _utilUriEscape.escapeUri)(key)}=${(0, _utilUriEscape.escapeUri)(value)}`
            ]), []).join("&");
    }
    return keys.map((key)=>serialized[key]).filter((serialized)=>serialized).join("&");
};

},{"@aws-sdk/util-uri-escape":"ihZwy","./constants":"93sQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ihZwy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _escapeUri = require("./escape-uri");
parcelHelpers.exportAll(_escapeUri, exports);
var _escapeUriPath = require("./escape-uri-path");
parcelHelpers.exportAll(_escapeUriPath, exports);

},{"./escape-uri":"fPTV2","./escape-uri-path":"ap8YS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fPTV2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeUri", ()=>escapeUri);
const escapeUri = (uri)=>encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
const hexEncode = (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ap8YS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeUriPath", ()=>escapeUriPath);
var _escapeUri = require("./escape-uri");
const escapeUriPath = (uri)=>uri.split("/").map((0, _escapeUri.escapeUri)).join("/");

},{"./escape-uri":"fPTV2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3i9wg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPayloadHash", ()=>getPayloadHash);
var _isArrayBuffer = require("@aws-sdk/is-array-buffer");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _utilUtf8 = require("@aws-sdk/util-utf8");
var _constants = require("./constants");
const getPayloadHash = async ({ headers , body  }, hashConstructor)=>{
    for (const headerName of Object.keys(headers)){
        if (headerName.toLowerCase() === (0, _constants.SHA256_HEADER)) return headers[headerName];
    }
    if (body == undefined) return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, _isArrayBuffer.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, _utilUtf8.toUint8Array)(body));
        return (0, _utilHexEncoding.toHex)(await hashCtor.digest());
    }
    return 0, _constants.UNSIGNED_PAYLOAD;
};

},{"@aws-sdk/is-array-buffer":"9QzrT","@aws-sdk/util-hex-encoding":"d6D69","@aws-sdk/util-utf8":"6cVVP","./constants":"93sQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9QzrT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isArrayBuffer", ()=>isArrayBuffer);
const isArrayBuffer = (arg)=>typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aCekx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasHeader", ()=>hasHeader);
parcelHelpers.export(exports, "getHeaderValue", ()=>getHeaderValue);
parcelHelpers.export(exports, "deleteHeader", ()=>deleteHeader);
const hasHeader = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)){
        if (soughtHeader === headerName.toLowerCase()) return true;
    }
    return false;
};
const getHeaderValue = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)){
        if (soughtHeader === headerName.toLowerCase()) return headers[headerName];
    }
    return undefined;
};
const deleteHeader = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers))if (soughtHeader === headerName.toLowerCase()) delete headers[headerName];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Vr4Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "moveHeadersToQuery", ()=>moveHeadersToQuery);
var _cloneRequest = require("./cloneRequest");
const moveHeadersToQuery = (request, options = {})=>{
    const { headers , query ={}  } = typeof request.clone === "function" ? request.clone() : (0, _cloneRequest.cloneRequest)(request);
    for (const name of Object.keys(headers)){
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname)) {
            query[name] = headers[name];
            delete headers[name];
        }
    }
    return {
        ...request,
        headers,
        query
    };
};

},{"./cloneRequest":"lJubb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJubb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cloneRequest", ()=>cloneRequest);
parcelHelpers.export(exports, "cloneQuery", ()=>cloneQuery);
const cloneRequest = ({ headers , query , ...rest })=>({
        ...rest,
        headers: {
            ...headers
        },
        query: query ? cloneQuery(query) : undefined
    });
const cloneQuery = (query)=>Object.keys(query).reduce((carry, paramName)=>{
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [
                ...param
            ] : param
        };
    }, {});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7dtHd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prepareRequest", ()=>prepareRequest);
var _cloneRequest = require("./cloneRequest");
var _constants = require("./constants");
const prepareRequest = (request)=>{
    request = typeof request.clone === "function" ? request.clone() : (0, _cloneRequest.cloneRequest)(request);
    for (const headerName of Object.keys(request.headers))if ((0, _constants.GENERATED_HEADERS).indexOf(headerName.toLowerCase()) > -1) delete request.headers[headerName];
    return request;
};

},{"./cloneRequest":"lJubb","./constants":"93sQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Oggi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "iso8601", ()=>iso8601);
parcelHelpers.export(exports, "toDate", ()=>toDate);
const iso8601 = (time)=>toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
const toDate = (time)=>{
    if (typeof time === "number") return new Date(time * 1000);
    if (typeof time === "string") {
        if (Number(time)) return new Date(Number(time) * 1000);
        return new Date(time);
    }
    return time;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aXXzV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "awsAuthMiddleware", ()=>awsAuthMiddleware);
parcelHelpers.export(exports, "awsAuthMiddlewareOptions", ()=>awsAuthMiddlewareOptions);
parcelHelpers.export(exports, "getAwsAuthPlugin", ()=>getAwsAuthPlugin);
parcelHelpers.export(exports, "getSigV4AuthPlugin", ()=>getSigV4AuthPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _getSkewCorrectedDate = require("./utils/getSkewCorrectedDate");
var _getUpdatedSystemClockOffset = require("./utils/getUpdatedSystemClockOffset");
const awsAuthMiddleware = (options)=>(next, context)=>async function(args) {
            if (!(0, _protocolHttp.HttpRequest).isInstance(args.request)) return next(args);
            const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
            const multiRegionOverride = authScheme?.name === "sigv4a" ? authScheme?.signingRegionSet?.join(",") : undefined;
            const signer = await options.signer(authScheme);
            const output = await next({
                ...args,
                request: await signer.sign(args.request, {
                    signingDate: (0, _getSkewCorrectedDate.getSkewCorrectedDate)(options.systemClockOffset),
                    signingRegion: multiRegionOverride || context["signing_region"],
                    signingService: context["signing_service"]
                })
            }).catch((error)=>{
                const serverTime = error.ServerTime ?? getDateHeader(error.$response);
                if (serverTime) options.systemClockOffset = (0, _getUpdatedSystemClockOffset.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
                throw error;
            });
            const dateHeader = getDateHeader(output.response);
            if (dateHeader) options.systemClockOffset = (0, _getUpdatedSystemClockOffset.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
            return output;
        };
const getDateHeader = (response)=>(0, _protocolHttp.HttpResponse).isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;
const awsAuthMiddlewareOptions = {
    name: "awsAuthMiddleware",
    tags: [
        "SIGNATURE",
        "AWSAUTH"
    ],
    relation: "after",
    toMiddleware: "retryMiddleware",
    override: true
};
const getAwsAuthPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
        }
    });
const getSigV4AuthPlugin = getAwsAuthPlugin;

},{"@aws-sdk/protocol-http":"lkWtc","./utils/getSkewCorrectedDate":"1Xz4y","./utils/getUpdatedSystemClockOffset":"fLlgJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Xz4y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSkewCorrectedDate", ()=>getSkewCorrectedDate);
const getSkewCorrectedDate = (systemClockOffset)=>new Date(Date.now() + systemClockOffset);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fLlgJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getUpdatedSystemClockOffset", ()=>getUpdatedSystemClockOffset);
var _isClockSkewed = require("./isClockSkewed");
const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset)=>{
    const clockTimeInMs = Date.parse(clockTime);
    if ((0, _isClockSkewed.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) return clockTimeInMs - Date.now();
    return currentSystemClockOffset;
};

},{"./isClockSkewed":"bAIeC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bAIeC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isClockSkewed", ()=>isClockSkewed);
var _getSkewCorrectedDate = require("./getSkewCorrectedDate");
const isClockSkewed = (clockTime, systemClockOffset)=>Math.abs((0, _getSkewCorrectedDate.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 300000;

},{"./getSkewCorrectedDate":"1Xz4y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6uBwp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _userAgentMiddleware = require("./user-agent-middleware");
parcelHelpers.exportAll(_userAgentMiddleware, exports);

},{"./configurations":"lRaCm","./user-agent-middleware":"jcZ4G","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRaCm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveUserAgentConfig", ()=>resolveUserAgentConfig);
function resolveUserAgentConfig(input) {
    return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [
            [
                input.customUserAgent
            ]
        ] : input.customUserAgent
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jcZ4G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "userAgentMiddleware", ()=>userAgentMiddleware);
parcelHelpers.export(exports, "getUserAgentMiddlewareOptions", ()=>getUserAgentMiddlewareOptions);
parcelHelpers.export(exports, "getUserAgentPlugin", ()=>getUserAgentPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _utilEndpoints = require("@aws-sdk/util-endpoints");
var _constants = require("./constants");
const userAgentMiddleware = (options)=>(next, context)=>async (args)=>{
            const { request  } = args;
            if (!(0, _protocolHttp.HttpRequest).isInstance(request)) return next(args);
            const { headers  } = request;
            const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
            const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
            const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
            const prefix = (0, _utilEndpoints.getUserAgentPrefix)();
            const sdkUserAgentValue = (prefix ? [
                prefix
            ] : []).concat([
                ...defaultUserAgent,
                ...userAgent,
                ...customUserAgent
            ]).join((0, _constants.SPACE));
            const normalUAValue = [
                ...defaultUserAgent.filter((section)=>section.startsWith("aws-sdk-")),
                ...customUserAgent
            ].join((0, _constants.SPACE));
            if (options.runtime !== "browser") {
                if (normalUAValue) headers[0, _constants.X_AMZ_USER_AGENT] = headers[0, _constants.X_AMZ_USER_AGENT] ? `${headers[0, _constants.USER_AGENT]} ${normalUAValue}` : normalUAValue;
                headers[0, _constants.USER_AGENT] = sdkUserAgentValue;
            } else headers[0, _constants.X_AMZ_USER_AGENT] = sdkUserAgentValue;
            return next({
                ...args,
                request
            });
        };
const escapeUserAgent = (userAgentPair)=>{
    const name = userAgentPair[0].split((0, _constants.UA_NAME_SEPARATOR)).map((part)=>part.replace((0, _constants.UA_NAME_ESCAPE_REGEX), (0, _constants.UA_ESCAPE_CHAR))).join((0, _constants.UA_NAME_SEPARATOR));
    const version = userAgentPair[1]?.replace((0, _constants.UA_VALUE_ESCAPE_REGEX), (0, _constants.UA_ESCAPE_CHAR));
    const prefixSeparatorIndex = name.indexOf((0, _constants.UA_NAME_SEPARATOR));
    const prefix = name.substring(0, prefixSeparatorIndex);
    let uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") uaName = uaName.toLowerCase();
    return [
        prefix,
        uaName,
        version
    ].filter((item)=>item && item.length > 0).reduce((acc, item, index)=>{
        switch(index){
            case 0:
                return item;
            case 1:
                return `${acc}/${item}`;
            default:
                return `${acc}#${item}`;
        }
    }, "");
};
const getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "SET_USER_AGENT",
        "USER_AGENT"
    ],
    override: true
};
const getUserAgentPlugin = (config)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","@aws-sdk/util-endpoints":"hUX6q","./constants":"2OvLZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hUX6q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _partition = require("./lib/aws/partition");
parcelHelpers.exportAll(_partition, exports);
var _resolveEndpoint = require("./resolveEndpoint");
parcelHelpers.exportAll(_resolveEndpoint, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);

},{"./lib/aws/partition":"joAYb","./resolveEndpoint":"4j6dy","./types":"2EtEg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"joAYb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "partition", ()=>partition);
parcelHelpers.export(exports, "setPartitionInfo", ()=>setPartitionInfo);
parcelHelpers.export(exports, "useDefaultPartitionInfo", ()=>useDefaultPartitionInfo);
parcelHelpers.export(exports, "getUserAgentPrefix", ()=>getUserAgentPrefix);
var _partitionsJson = require("./partitions.json");
var _partitionsJsonDefault = parcelHelpers.interopDefault(_partitionsJson);
let selectedPartitionsInfo = (0, _partitionsJsonDefault.default);
let selectedUserAgentPrefix = "";
const partition = (value)=>{
    const { partitions  } = selectedPartitionsInfo;
    for (const partition of partitions){
        const { regions , outputs  } = partition;
        for (const [region, regionData] of Object.entries(regions)){
            if (region === value) return {
                ...outputs,
                ...regionData
            };
        }
    }
    for (const partition of partitions){
        const { regionRegex , outputs  } = partition;
        if (new RegExp(regionRegex).test(value)) return {
            ...outputs
        };
    }
    const DEFAULT_PARTITION = partitions.find((partition)=>partition.id === "aws");
    if (!DEFAULT_PARTITION) throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
    return {
        ...DEFAULT_PARTITION.outputs
    };
};
const setPartitionInfo = (partitionsInfo, userAgentPrefix = "")=>{
    selectedPartitionsInfo = partitionsInfo;
    selectedUserAgentPrefix = userAgentPrefix;
};
const useDefaultPartitionInfo = ()=>{
    setPartitionInfo((0, _partitionsJsonDefault.default), "");
};
const getUserAgentPrefix = ()=>selectedUserAgentPrefix;

},{"./partitions.json":"jjUFy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jjUFy":[function(require,module,exports) {
module.exports = JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{}}],"version":"1.1"}');

},{}],"4j6dy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEndpoint", ()=>resolveEndpoint);
var _debug = require("./debug");
var _types = require("./types");
var _utils = require("./utils");
const resolveEndpoint = (ruleSetObject, options)=>{
    const { endpointParams , logger  } = options;
    const { parameters , rules  } = ruleSetObject;
    options.logger?.debug?.(`${(0, _debug.debugId)} Initial EndpointParams: ${(0, _debug.toDebugString)(endpointParams)}`);
    const paramsWithDefault = Object.entries(parameters).filter(([, v])=>v.default != null).map(([k, v])=>[
            k,
            v.default
        ]);
    if (paramsWithDefault.length > 0) for (const [paramKey, paramDefaultValue] of paramsWithDefault)endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
    const requiredParams = Object.entries(parameters).filter(([, v])=>v.required).map(([k])=>k);
    for (const requiredParam of requiredParams){
        if (endpointParams[requiredParam] == null) throw new (0, _types.EndpointError)(`Missing required parameter: '${requiredParam}'`);
    }
    const endpoint = (0, _utils.evaluateRules)(rules, {
        endpointParams,
        logger,
        referenceRecord: {}
    });
    if (options.endpointParams?.Endpoint) try {
        const givenEndpoint = new URL(options.endpointParams.Endpoint);
        const { protocol , port  } = givenEndpoint;
        endpoint.url.protocol = protocol;
        endpoint.url.port = port;
    } catch (e) {}
    options.logger?.debug?.(`${(0, _debug.debugId)} Resolved endpoint: ${(0, _debug.toDebugString)(endpoint)}`);
    return endpoint;
};

},{"./debug":"gypCz","./types":"2EtEg","./utils":"6fl7s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gypCz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _debugId = require("./debugId");
parcelHelpers.exportAll(_debugId, exports);
var _toDebugString = require("./toDebugString");
parcelHelpers.exportAll(_toDebugString, exports);

},{"./debugId":"eByQ1","./toDebugString":"6QhdU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eByQ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "debugId", ()=>debugId);
const debugId = "endpoints";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6QhdU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toDebugString", ()=>toDebugString);
function toDebugString(input) {
    if (typeof input !== "object" || input == null) return input;
    if ("ref" in input) return `$${toDebugString(input.ref)}`;
    if ("fn" in input) return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
    return JSON.stringify(input, null, 2);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2EtEg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _endpointError = require("./EndpointError");
parcelHelpers.exportAll(_endpointError, exports);
var _endpointRuleObject = require("./EndpointRuleObject");
parcelHelpers.exportAll(_endpointRuleObject, exports);
var _errorRuleObject = require("./ErrorRuleObject");
parcelHelpers.exportAll(_errorRuleObject, exports);
var _ruleSetObject = require("./RuleSetObject");
parcelHelpers.exportAll(_ruleSetObject, exports);
var _treeRuleObject = require("./TreeRuleObject");
parcelHelpers.exportAll(_treeRuleObject, exports);
var _shared = require("./shared");
parcelHelpers.exportAll(_shared, exports);

},{"./EndpointError":"jZ1Fw","./EndpointRuleObject":"92Auw","./ErrorRuleObject":"cdIzb","./RuleSetObject":"fLB6X","./TreeRuleObject":"8IDTR","./shared":"1ebXp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jZ1Fw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EndpointError", ()=>EndpointError);
class EndpointError extends Error {
    constructor(message){
        super(message);
        this.name = "EndpointError";
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"92Auw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cdIzb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fLB6X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8IDTR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ebXp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6fl7s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _evaluateRules = require("./evaluateRules");
parcelHelpers.exportAll(_evaluateRules, exports);

},{"./evaluateRules":"bXRh8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bXRh8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateRules", ()=>evaluateRules);
var _types = require("../types");
var _evaluateEndpointRule = require("./evaluateEndpointRule");
var _evaluateErrorRule = require("./evaluateErrorRule");
var _evaluateTreeRule = require("./evaluateTreeRule");
const evaluateRules = (rules, options)=>{
    for (const rule of rules){
        if (rule.type === "endpoint") {
            const endpointOrUndefined = (0, _evaluateEndpointRule.evaluateEndpointRule)(rule, options);
            if (endpointOrUndefined) return endpointOrUndefined;
        } else if (rule.type === "error") (0, _evaluateErrorRule.evaluateErrorRule)(rule, options);
        else if (rule.type === "tree") {
            const endpointOrUndefined = (0, _evaluateTreeRule.evaluateTreeRule)(rule, options);
            if (endpointOrUndefined) return endpointOrUndefined;
        } else throw new (0, _types.EndpointError)(`Unknown endpoint rule: ${rule}`);
    }
    throw new (0, _types.EndpointError)(`Rules evaluation failed`);
};

},{"../types":"2EtEg","./evaluateEndpointRule":"8juGL","./evaluateErrorRule":"fetFp","./evaluateTreeRule":"dSBwZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8juGL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateEndpointRule", ()=>evaluateEndpointRule);
var _debug = require("../debug");
var _evaluateConditions = require("./evaluateConditions");
var _getEndpointHeaders = require("./getEndpointHeaders");
var _getEndpointProperties = require("./getEndpointProperties");
var _getEndpointUrl = require("./getEndpointUrl");
const evaluateEndpointRule = (endpointRule, options)=>{
    const { conditions , endpoint  } = endpointRule;
    const { result , referenceRecord  } = (0, _evaluateConditions.evaluateConditions)(conditions, options);
    if (!result) return;
    const endpointRuleOptions = {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    };
    const { url , properties , headers  } = endpoint;
    options.logger?.debug?.((0, _debug.debugId), `Resolving endpoint from template: ${(0, _debug.toDebugString)(endpoint)}`);
    return {
        ...headers != undefined && {
            headers: (0, _getEndpointHeaders.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != undefined && {
            properties: (0, _getEndpointProperties.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, _getEndpointUrl.getEndpointUrl)(url, endpointRuleOptions)
    };
};

},{"../debug":"gypCz","./evaluateConditions":"8Te8z","./getEndpointHeaders":"fWWAe","./getEndpointProperties":"jhk8H","./getEndpointUrl":"dZm4G","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Te8z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateConditions", ()=>evaluateConditions);
var _debug = require("../debug");
var _evaluateCondition = require("./evaluateCondition");
const evaluateConditions = (conditions = [], options)=>{
    const conditionsReferenceRecord = {};
    for (const condition of conditions){
        const { result , toAssign  } = (0, _evaluateCondition.evaluateCondition)(condition, {
            ...options,
            referenceRecord: {
                ...options.referenceRecord,
                ...conditionsReferenceRecord
            }
        });
        if (!result) return {
            result
        };
        if (toAssign) {
            conditionsReferenceRecord[toAssign.name] = toAssign.value;
            options.logger?.debug?.((0, _debug.debugId), `assign: ${toAssign.name} := ${(0, _debug.toDebugString)(toAssign.value)}`);
        }
    }
    return {
        result: true,
        referenceRecord: conditionsReferenceRecord
    };
};

},{"../debug":"gypCz","./evaluateCondition":"8rLxv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8rLxv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateCondition", ()=>evaluateCondition);
var _debug = require("../debug");
var _types = require("../types");
var _callFunction = require("./callFunction");
const evaluateCondition = ({ assign , ...fnArgs }, options)=>{
    if (assign && assign in options.referenceRecord) throw new (0, _types.EndpointError)(`'${assign}' is already defined in Reference Record.`);
    const value = (0, _callFunction.callFunction)(fnArgs, options);
    options.logger?.debug?.((0, _debug.debugId), `evaluateCondition: ${(0, _debug.toDebugString)(fnArgs)} = ${(0, _debug.toDebugString)(value)}`);
    return {
        result: value === "" ? true : !!value,
        ...assign != null && {
            toAssign: {
                name: assign,
                value
            }
        }
    };
};

},{"../debug":"gypCz","../types":"2EtEg","./callFunction":"hTa2n","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hTa2n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "callFunction", ()=>callFunction);
var _lib = require("../lib");
var _evaluateExpression = require("./evaluateExpression");
const callFunction = ({ fn , argv  }, options)=>{
    const evaluatedArgs = argv.map((arg)=>[
            "boolean",
            "number"
        ].includes(typeof arg) ? arg : (0, _evaluateExpression.evaluateExpression)(arg, "arg", options));
    return fn.split(".").reduce((acc, key)=>acc[key], _lib)(...evaluatedArgs);
};

},{"../lib":"22vcG","./evaluateExpression":"8ExF3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"22vcG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "aws", ()=>_aws);
var _aws = require("./aws");
var _booleanEquals = require("./booleanEquals");
parcelHelpers.exportAll(_booleanEquals, exports);
var _getAttr = require("./getAttr");
parcelHelpers.exportAll(_getAttr, exports);
var _isSet = require("./isSet");
parcelHelpers.exportAll(_isSet, exports);
var _isValidHostLabel = require("./isValidHostLabel");
parcelHelpers.exportAll(_isValidHostLabel, exports);
var _not = require("./not");
parcelHelpers.exportAll(_not, exports);
var _parseURL = require("./parseURL");
parcelHelpers.exportAll(_parseURL, exports);
var _stringEquals = require("./stringEquals");
parcelHelpers.exportAll(_stringEquals, exports);
var _substring = require("./substring");
parcelHelpers.exportAll(_substring, exports);
var _uriEncode = require("./uriEncode");
parcelHelpers.exportAll(_uriEncode, exports);

},{"./aws":"hyKz1","./booleanEquals":"96Q1z","./getAttr":"kQfja","./isSet":"bV0SW","./isValidHostLabel":"88jHA","./not":"9eiC2","./parseURL":"171yJ","./stringEquals":"63ifn","./substring":"3Ogpc","./uriEncode":"7mT74","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hyKz1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isVirtualHostableS3Bucket = require("./isVirtualHostableS3Bucket");
parcelHelpers.exportAll(_isVirtualHostableS3Bucket, exports);
var _parseArn = require("./parseArn");
parcelHelpers.exportAll(_parseArn, exports);
var _partition = require("./partition");
parcelHelpers.exportAll(_partition, exports);

},{"./isVirtualHostableS3Bucket":"gwXwd","./parseArn":"59aQj","./partition":"joAYb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gwXwd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isVirtualHostableS3Bucket", ()=>isVirtualHostableS3Bucket);
var _isIpAddress = require("../isIpAddress");
var _isValidHostLabel = require("../isValidHostLabel");
const isVirtualHostableS3Bucket = (value, allowSubDomains = false)=>{
    if (allowSubDomains) {
        for (const label of value.split(".")){
            if (!isVirtualHostableS3Bucket(label)) return false;
        }
        return true;
    }
    if (!(0, _isValidHostLabel.isValidHostLabel)(value)) return false;
    if (value.length < 3 || value.length > 63) return false;
    if (value !== value.toLowerCase()) return false;
    if ((0, _isIpAddress.isIpAddress)(value)) return false;
    return true;
};

},{"../isIpAddress":"fYjRq","../isValidHostLabel":"88jHA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fYjRq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isIpAddress", ()=>isIpAddress);
const IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
const isIpAddress = (value)=>IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"88jHA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidHostLabel", ()=>isValidHostLabel);
const VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
const isValidHostLabel = (value, allowSubDomains = false)=>{
    if (!allowSubDomains) return VALID_HOST_LABEL_REGEX.test(value);
    const labels = value.split(".");
    for (const label of labels){
        if (!isValidHostLabel(label)) return false;
    }
    return true;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59aQj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseArn", ()=>parseArn);
const parseArn = (value)=>{
    const segments = value.split(":");
    if (segments.length < 6) return null;
    const [arn, partition, service, region, accountId, ...resourceId] = segments;
    if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "") return null;
    return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"96Q1z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "booleanEquals", ()=>booleanEquals);
const booleanEquals = (value1, value2)=>value1 === value2;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQfja":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAttr", ()=>getAttr);
var _types = require("../types");
var _getAttrPathList = require("./getAttrPathList");
const getAttr = (value, path)=>(0, _getAttrPathList.getAttrPathList)(path).reduce((acc, index)=>{
        if (typeof acc !== "object") throw new (0, _types.EndpointError)(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
        else if (Array.isArray(acc)) return acc[parseInt(index)];
        return acc[index];
    }, value);

},{"../types":"2EtEg","./getAttrPathList":"f9S7K","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f9S7K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAttrPathList", ()=>getAttrPathList);
var _types = require("../types");
const getAttrPathList = (path)=>{
    const parts = path.split(".");
    const pathList = [];
    for (const part of parts){
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
            if (part.indexOf("]") !== part.length - 1) throw new (0, _types.EndpointError)(`Path: '${path}' does not end with ']'`);
            const arrayIndex = part.slice(squareBracketIndex + 1, -1);
            if (Number.isNaN(parseInt(arrayIndex))) throw new (0, _types.EndpointError)(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
            if (squareBracketIndex !== 0) pathList.push(part.slice(0, squareBracketIndex));
            pathList.push(arrayIndex);
        } else pathList.push(part);
    }
    return pathList;
};

},{"../types":"2EtEg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bV0SW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isSet", ()=>isSet);
const isSet = (value)=>value != null;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9eiC2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "not", ()=>not);
const not = (value)=>!value;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"171yJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseURL", ()=>parseURL);
var _types = require("@aws-sdk/types");
var _isIpAddress = require("./isIpAddress");
const DEFAULT_PORTS = {
    [(0, _types.EndpointURLScheme).HTTP]: 80,
    [(0, _types.EndpointURLScheme).HTTPS]: 443
};
const parseURL = (value)=>{
    const whatwgURL = (()=>{
        try {
            if (value instanceof URL) return value;
            if (typeof value === "object" && "hostname" in value) {
                const { hostname , port , protocol ="" , path ="" , query ={}  } = value;
                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : ""}${path}`);
                url.search = Object.entries(query).map(([k, v])=>`${k}=${v}`).join("&");
                return url;
            }
            return new URL(value);
        } catch (error) {
            return null;
        }
    })();
    if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
    }
    const urlString = whatwgURL.href;
    const { host , hostname , pathname , protocol , search  } = whatwgURL;
    if (search) return null;
    const scheme = protocol.slice(0, -1);
    if (!Object.values((0, _types.EndpointURLScheme)).includes(scheme)) return null;
    const isIp = (0, _isIpAddress.isIpAddress)(hostname);
    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
    return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
    };
};

},{"@aws-sdk/types":"aYmGv","./isIpAddress":"fYjRq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aYmGv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _abort = require("./abort");
parcelHelpers.exportAll(_abort, exports);
var _auth = require("./auth");
parcelHelpers.exportAll(_auth, exports);
var _checksum = require("./checksum");
parcelHelpers.exportAll(_checksum, exports);
var _client = require("./client");
parcelHelpers.exportAll(_client, exports);
var _command = require("./command");
parcelHelpers.exportAll(_command, exports);
var _connection = require("./connection");
parcelHelpers.exportAll(_connection, exports);
var _credentials = require("./credentials");
parcelHelpers.exportAll(_credentials, exports);
var _crypto = require("./crypto");
parcelHelpers.exportAll(_crypto, exports);
var _dns = require("./dns");
parcelHelpers.exportAll(_dns, exports);
var _encode = require("./encode");
parcelHelpers.exportAll(_encode, exports);
var _endpoint = require("./endpoint");
parcelHelpers.exportAll(_endpoint, exports);
var _eventStream = require("./eventStream");
parcelHelpers.exportAll(_eventStream, exports);
var _http = require("./http");
parcelHelpers.exportAll(_http, exports);
var _identity = require("./identity");
parcelHelpers.exportAll(_identity, exports);
var _logger = require("./logger");
parcelHelpers.exportAll(_logger, exports);
var _middleware = require("./middleware");
parcelHelpers.exportAll(_middleware, exports);
var _pagination = require("./pagination");
parcelHelpers.exportAll(_pagination, exports);
var _profile = require("./profile");
parcelHelpers.exportAll(_profile, exports);
var _request = require("./request");
parcelHelpers.exportAll(_request, exports);
var _response = require("./response");
parcelHelpers.exportAll(_response, exports);
var _retry = require("./retry");
parcelHelpers.exportAll(_retry, exports);
var _serde = require("./serde");
parcelHelpers.exportAll(_serde, exports);
var _shapes = require("./shapes");
parcelHelpers.exportAll(_shapes, exports);
var _signature = require("./signature");
parcelHelpers.exportAll(_signature, exports);
var _stream = require("./stream");
parcelHelpers.exportAll(_stream, exports);
var _token = require("./token");
parcelHelpers.exportAll(_token, exports);
var _transfer = require("./transfer");
parcelHelpers.exportAll(_transfer, exports);
var _uri = require("./uri");
parcelHelpers.exportAll(_uri, exports);
var _util = require("./util");
parcelHelpers.exportAll(_util, exports);
var _waiter = require("./waiter");
parcelHelpers.exportAll(_waiter, exports);

},{"./abort":"5IooA","./auth":"61Rtv","./checksum":"6Fhhi","./client":"7Xp0l","./command":"1jDWV","./connection":"jAftJ","./credentials":"22IN2","./crypto":"b863q","./dns":"dT6gO","./encode":"jnuG0","./endpoint":"4F9zb","./eventStream":"jMz0R","./http":"7ytx4","./identity":"ewXAA","./logger":"9cbpR","./middleware":"b89w9","./pagination":"iUCdd","./profile":"4dzij","./request":"c48iJ","./response":"cxAwT","./retry":"2bRWG","./serde":"3sOst","./shapes":"a2lQQ","./signature":"dr5RD","./stream":"7B9MZ","./token":"g0A29","./transfer":"dnReS","./uri":"2HY7m","./util":"4HD4I","./waiter":"e1OiM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5IooA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"61Rtv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpAuthLocation", ()=>HttpAuthLocation);
var HttpAuthLocation;
(function(HttpAuthLocation) {
    HttpAuthLocation["HEADER"] = "header";
    HttpAuthLocation["QUERY"] = "query";
})(HttpAuthLocation || (HttpAuthLocation = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Fhhi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Xp0l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1jDWV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jAftJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _config = require("./config");
parcelHelpers.exportAll(_config, exports);
var _manager = require("./manager");
parcelHelpers.exportAll(_manager, exports);
var _pool = require("./pool");
parcelHelpers.exportAll(_pool, exports);

},{"./config":"1PSx7","./manager":"j88c7","./pool":"1WAnz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1PSx7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j88c7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1WAnz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"22IN2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b863q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dT6gO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HostAddressType", ()=>HostAddressType);
var HostAddressType;
(function(HostAddressType) {
    HostAddressType["AAAA"] = "AAAA";
    HostAddressType["A"] = "A";
})(HostAddressType || (HostAddressType = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jnuG0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4F9zb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EndpointURLScheme", ()=>EndpointURLScheme);
var EndpointURLScheme;
(function(EndpointURLScheme) {
    EndpointURLScheme["HTTP"] = "http";
    EndpointURLScheme["HTTPS"] = "https";
})(EndpointURLScheme || (EndpointURLScheme = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jMz0R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ytx4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ewXAA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _anonymousIdentity = require("./AnonymousIdentity");
parcelHelpers.exportAll(_anonymousIdentity, exports);
var _awsCredentialIdentity = require("./AwsCredentialIdentity");
parcelHelpers.exportAll(_awsCredentialIdentity, exports);
var _identity = require("./Identity");
parcelHelpers.exportAll(_identity, exports);
var _loginIdentity = require("./LoginIdentity");
parcelHelpers.exportAll(_loginIdentity, exports);
var _tokenIdentity = require("./TokenIdentity");
parcelHelpers.exportAll(_tokenIdentity, exports);

},{"./AnonymousIdentity":"aFoST","./AwsCredentialIdentity":"ikb9L","./Identity":"iF2GC","./LoginIdentity":"5iazQ","./TokenIdentity":"38LNR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aFoST":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ikb9L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iF2GC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5iazQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"38LNR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9cbpR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b89w9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iUCdd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4dzij":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c48iJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cxAwT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2bRWG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3sOst":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2lQQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dr5RD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7B9MZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g0A29":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dnReS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RequestHandlerProtocol", ()=>RequestHandlerProtocol);
var RequestHandlerProtocol;
(function(RequestHandlerProtocol) {
    RequestHandlerProtocol["HTTP_0_9"] = "http/0.9";
    RequestHandlerProtocol["HTTP_1_0"] = "http/1.0";
    RequestHandlerProtocol["TDS_8_0"] = "tds/8.0";
})(RequestHandlerProtocol || (RequestHandlerProtocol = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2HY7m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4HD4I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e1OiM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"63ifn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringEquals", ()=>stringEquals);
const stringEquals = (value1, value2)=>value1 === value2;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Ogpc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "substring", ()=>substring);
const substring = (input, start, stop, reverse)=>{
    if (start >= stop || input.length < stop) return null;
    if (!reverse) return input.substring(start, stop);
    return input.substring(input.length - stop, input.length - start);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7mT74":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uriEncode", ()=>uriEncode);
const uriEncode = (value)=>encodeURIComponent(value).replace(/[!*'()]/g, (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ExF3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateExpression", ()=>evaluateExpression);
var _types = require("../types");
var _callFunction = require("./callFunction");
var _evaluateTemplate = require("./evaluateTemplate");
var _getReferenceValue = require("./getReferenceValue");
const evaluateExpression = (obj, keyName, options)=>{
    if (typeof obj === "string") return (0, _evaluateTemplate.evaluateTemplate)(obj, options);
    else if (obj["fn"]) return (0, _callFunction.callFunction)(obj, options);
    else if (obj["ref"]) return (0, _getReferenceValue.getReferenceValue)(obj, options);
    throw new (0, _types.EndpointError)(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
};

},{"../types":"2EtEg","./callFunction":"hTa2n","./evaluateTemplate":"5Fffk","./getReferenceValue":"eQiLr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Fffk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateTemplate", ()=>evaluateTemplate);
var _lib = require("../lib");
const evaluateTemplate = (template, options)=>{
    const evaluatedTemplateArr = [];
    const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
    };
    let currentIndex = 0;
    while(currentIndex < template.length){
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(currentIndex));
            break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex));
            break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
            currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
            const [refName, attrName] = parameterName.split("#");
            evaluatedTemplateArr.push((0, _lib.getAttr)(templateContext[refName], attrName));
        } else evaluatedTemplateArr.push(templateContext[parameterName]);
        currentIndex = closingBraceIndex + 1;
    }
    return evaluatedTemplateArr.join("");
};

},{"../lib":"22vcG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eQiLr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getReferenceValue", ()=>getReferenceValue);
const getReferenceValue = ({ ref  }, options)=>{
    const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
    };
    return referenceRecord[ref];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fWWAe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointHeaders", ()=>getEndpointHeaders);
var _types = require("../types");
var _evaluateExpression = require("./evaluateExpression");
const getEndpointHeaders = (headers, options)=>Object.entries(headers).reduce((acc, [headerKey, headerVal])=>({
            ...acc,
            [headerKey]: headerVal.map((headerValEntry)=>{
                const processedExpr = (0, _evaluateExpression.evaluateExpression)(headerValEntry, "Header value entry", options);
                if (typeof processedExpr !== "string") throw new (0, _types.EndpointError)(`Header '${headerKey}' value '${processedExpr}' is not a string`);
                return processedExpr;
            })
        }), {});

},{"../types":"2EtEg","./evaluateExpression":"8ExF3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhk8H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointProperties", ()=>getEndpointProperties);
var _getEndpointProperty = require("./getEndpointProperty");
const getEndpointProperties = (properties, options)=>Object.entries(properties).reduce((acc, [propertyKey, propertyVal])=>({
            ...acc,
            [propertyKey]: (0, _getEndpointProperty.getEndpointProperty)(propertyVal, options)
        }), {});

},{"./getEndpointProperty":"iUo7V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iUo7V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointProperty", ()=>getEndpointProperty);
var _types = require("../types");
var _evaluateTemplate = require("./evaluateTemplate");
var _getEndpointProperties = require("./getEndpointProperties");
const getEndpointProperty = (property, options)=>{
    if (Array.isArray(property)) return property.map((propertyEntry)=>getEndpointProperty(propertyEntry, options));
    switch(typeof property){
        case "string":
            return (0, _evaluateTemplate.evaluateTemplate)(property, options);
        case "object":
            if (property === null) throw new (0, _types.EndpointError)(`Unexpected endpoint property: ${property}`);
            return (0, _getEndpointProperties.getEndpointProperties)(property, options);
        case "boolean":
            return property;
        default:
            throw new (0, _types.EndpointError)(`Unexpected endpoint property type: ${typeof property}`);
    }
};

},{"../types":"2EtEg","./evaluateTemplate":"5Fffk","./getEndpointProperties":"jhk8H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dZm4G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointUrl", ()=>getEndpointUrl);
var _types = require("../types");
var _evaluateExpression = require("./evaluateExpression");
const getEndpointUrl = (endpointUrl, options)=>{
    const expression = (0, _evaluateExpression.evaluateExpression)(endpointUrl, "Endpoint URL", options);
    if (typeof expression === "string") try {
        return new URL(expression);
    } catch (error) {
        console.error(`Failed to construct URL with ${expression}`, error);
        throw error;
    }
    throw new (0, _types.EndpointError)(`Endpoint URL must be a string, got ${typeof expression}`);
};

},{"../types":"2EtEg","./evaluateExpression":"8ExF3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fetFp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateErrorRule", ()=>evaluateErrorRule);
var _types = require("../types");
var _evaluateConditions = require("./evaluateConditions");
var _evaluateExpression = require("./evaluateExpression");
const evaluateErrorRule = (errorRule, options)=>{
    const { conditions , error  } = errorRule;
    const { result , referenceRecord  } = (0, _evaluateConditions.evaluateConditions)(conditions, options);
    if (!result) return;
    throw new (0, _types.EndpointError)((0, _evaluateExpression.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    }));
};

},{"../types":"2EtEg","./evaluateConditions":"8Te8z","./evaluateExpression":"8ExF3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dSBwZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateTreeRule", ()=>evaluateTreeRule);
var _evaluateConditions = require("./evaluateConditions");
var _evaluateRules = require("./evaluateRules");
const evaluateTreeRule = (treeRule, options)=>{
    const { conditions , rules  } = treeRule;
    const { result , referenceRecord  } = (0, _evaluateConditions.evaluateConditions)(conditions, options);
    if (!result) return;
    return (0, _evaluateRules.evaluateRules)(rules, {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    });
};

},{"./evaluateConditions":"8Te8z","./evaluateRules":"bXRh8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2OvLZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "USER_AGENT", ()=>USER_AGENT);
parcelHelpers.export(exports, "X_AMZ_USER_AGENT", ()=>X_AMZ_USER_AGENT);
parcelHelpers.export(exports, "SPACE", ()=>SPACE);
parcelHelpers.export(exports, "UA_NAME_SEPARATOR", ()=>UA_NAME_SEPARATOR);
parcelHelpers.export(exports, "UA_NAME_ESCAPE_REGEX", ()=>UA_NAME_ESCAPE_REGEX);
parcelHelpers.export(exports, "UA_VALUE_ESCAPE_REGEX", ()=>UA_VALUE_ESCAPE_REGEX);
parcelHelpers.export(exports, "UA_ESCAPE_CHAR", ()=>UA_ESCAPE_CHAR);
const USER_AGENT = "user-agent";
const X_AMZ_USER_AGENT = "x-amz-user-agent";
const SPACE = " ";
const UA_NAME_SEPARATOR = "/";
const UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
const UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
const UA_ESCAPE_CHAR = "-";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ats0l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noOpLogger = require("./NoOpLogger");
parcelHelpers.exportAll(_noOpLogger, exports);
var _client = require("./client");
parcelHelpers.exportAll(_client, exports);
var _command = require("./command");
parcelHelpers.exportAll(_command, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _createAggregatedClient = require("./create-aggregated-client");
parcelHelpers.exportAll(_createAggregatedClient, exports);
var _dateUtils = require("./date-utils");
parcelHelpers.exportAll(_dateUtils, exports);
var _defaultErrorHandler = require("./default-error-handler");
parcelHelpers.exportAll(_defaultErrorHandler, exports);
var _defaultsMode = require("./defaults-mode");
parcelHelpers.exportAll(_defaultsMode, exports);
var _emitWarningIfUnsupportedVersion = require("./emitWarningIfUnsupportedVersion");
parcelHelpers.exportAll(_emitWarningIfUnsupportedVersion, exports);
var _exceptions = require("./exceptions");
parcelHelpers.exportAll(_exceptions, exports);
var _extendedEncodeUriComponent = require("./extended-encode-uri-component");
parcelHelpers.exportAll(_extendedEncodeUriComponent, exports);
var _getArrayIfSingleItem = require("./get-array-if-single-item");
parcelHelpers.exportAll(_getArrayIfSingleItem, exports);
var _getValueFromTextNode = require("./get-value-from-text-node");
parcelHelpers.exportAll(_getValueFromTextNode, exports);
var _lazyJson = require("./lazy-json");
parcelHelpers.exportAll(_lazyJson, exports);
var _objectMapping = require("./object-mapping");
parcelHelpers.exportAll(_objectMapping, exports);
var _parseUtils = require("./parse-utils");
parcelHelpers.exportAll(_parseUtils, exports);
var _resolvePath = require("./resolve-path");
parcelHelpers.exportAll(_resolvePath, exports);
var _serUtils = require("./ser-utils");
parcelHelpers.exportAll(_serUtils, exports);
var _serdeJson = require("./serde-json");
parcelHelpers.exportAll(_serdeJson, exports);
var _splitEvery = require("./split-every");
parcelHelpers.exportAll(_splitEvery, exports);

},{"./NoOpLogger":"gal9F","./client":"byjfJ","./command":"4252b","./constants":"gVeUS","./create-aggregated-client":"iAQMN","./date-utils":"hw2Vl","./default-error-handler":"bG4lh","./defaults-mode":"bwWM5","./emitWarningIfUnsupportedVersion":"4TK97","./exceptions":"hliAV","./extended-encode-uri-component":"843Ff","./get-array-if-single-item":"gBHBn","./get-value-from-text-node":"ggvWO","./lazy-json":"js6bs","./object-mapping":"cvh8s","./parse-utils":"h47HV","./resolve-path":"43uvW","./ser-utils":"bjeXK","./serde-json":"7ctpX","./split-every":"4jYlS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gal9F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NoOpLogger", ()=>NoOpLogger);
class NoOpLogger {
    trace() {}
    debug() {}
    info() {}
    warn() {}
    error() {}
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"byjfJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Client", ()=>Client);
var _middlewareStack = require("@aws-sdk/middleware-stack");
class Client {
    constructor(config){
        this.middlewareStack = (0, _middlewareStack.constructStack)();
        this.config = config;
    }
    send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) handler(command).then((result)=>callback(null, result.output), (err)=>callback(err)).catch(()=>{});
        else return handler(command).then((result)=>result.output);
    }
    destroy() {
        if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();
    }
}

},{"@aws-sdk/middleware-stack":"bDs53","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bDs53":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _middlewareStack = require("./MiddlewareStack");
parcelHelpers.exportAll(_middlewareStack, exports);

},{"./MiddlewareStack":"iUMap","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iUMap":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "constructStack", ()=>constructStack);
const constructStack = ()=>{
    let absoluteEntries = [];
    let relativeEntries = [];
    const entriesNameSet = new Set();
    const sort = (entries)=>entries.sort((a, b)=>stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
    const removeByName = (toRemove)=>{
        let isRemoved = false;
        const filterCb = (entry)=>{
            if (entry.name && entry.name === toRemove) {
                isRemoved = true;
                entriesNameSet.delete(toRemove);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const removeByReference = (toRemove)=>{
        let isRemoved = false;
        const filterCb = (entry)=>{
            if (entry.middleware === toRemove) {
                isRemoved = true;
                if (entry.name) entriesNameSet.delete(entry.name);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const cloneTo = (toStack)=>{
        absoluteEntries.forEach((entry)=>{
            toStack.add(entry.middleware, {
                ...entry
            });
        });
        relativeEntries.forEach((entry)=>{
            toStack.addRelativeTo(entry.middleware, {
                ...entry
            });
        });
        return toStack;
    };
    const expandRelativeMiddlewareList = (from)=>{
        const expandedMiddlewareList = [];
        from.before.forEach((entry)=>{
            if (entry.before.length === 0 && entry.after.length === 0) expandedMiddlewareList.push(entry);
            else expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry)=>{
            if (entry.before.length === 0 && entry.after.length === 0) expandedMiddlewareList.push(entry);
            else expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        });
        return expandedMiddlewareList;
    };
    const getMiddlewareList = (debug = false)=>{
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry)=>{
            const normalizedEntry = {
                ...entry,
                before: [],
                after: []
            };
            if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry)=>{
            const normalizedEntry = {
                ...entry,
                before: [],
                after: []
            };
            if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry)=>{
            if (entry.toMiddleware) {
                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
                if (toMiddleware === undefined) {
                    if (debug) return;
                    throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
                }
                if (entry.relation === "after") toMiddleware.after.push(entry);
                if (entry.relation === "before") toMiddleware.before.push(entry);
            }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList)=>{
            wholeList.push(...expendedMiddlewareList);
            return wholeList;
        }, []);
        return mainChain;
    };
    const stack = {
        add: (middleware, options = {})=>{
            const { name , override  } = options;
            const entry = {
                step: "initialize",
                priority: "normal",
                middleware,
                ...options
            };
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override) throw new Error(`Duplicate middleware name '${name}'`);
                    const toOverrideIndex = absoluteEntries.findIndex((entry)=>entry.name === name);
                    const toOverride = absoluteEntries[toOverrideIndex];
                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` + `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
                    absoluteEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options)=>{
            const { name , override  } = options;
            const entry = {
                middleware,
                ...options
            };
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override) throw new Error(`Duplicate middleware name '${name}'`);
                    const toOverrideIndex = relativeEntries.findIndex((entry)=>entry.name === name);
                    const toOverride = relativeEntries[toOverrideIndex];
                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden ` + `by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
                    relativeEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            relativeEntries.push(entry);
        },
        clone: ()=>cloneTo(constructStack()),
        use: (plugin)=>{
            plugin.applyToStack(stack);
        },
        remove: (toRemove)=>{
            if (typeof toRemove === "string") return removeByName(toRemove);
            else return removeByReference(toRemove);
        },
        removeByTag: (toRemove)=>{
            let isRemoved = false;
            const filterCb = (entry)=>{
                const { tags , name  } = entry;
                if (tags && tags.includes(toRemove)) {
                    if (name) entriesNameSet.delete(name);
                    isRemoved = true;
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        },
        concat: (from)=>{
            const cloned = cloneTo(constructStack());
            cloned.use(from);
            return cloned;
        },
        applyToStack: cloneTo,
        identify: ()=>{
            return getMiddlewareList(true).map((mw)=>{
                return mw.name + ": " + (mw.tags || []).join(",");
            });
        },
        resolve: (handler, context)=>{
            for (const middleware of getMiddlewareList().map((entry)=>entry.middleware).reverse())handler = middleware(handler, context);
            return handler;
        }
    };
    return stack;
};
const stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1
};
const priorityWeights = {
    high: 3,
    normal: 2,
    low: 1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4252b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Command", ()=>Command);
var _middlewareStack = require("@aws-sdk/middleware-stack");
class Command {
    constructor(){
        this.middlewareStack = (0, _middlewareStack.constructStack)();
    }
}

},{"@aws-sdk/middleware-stack":"bDs53","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gVeUS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SENSITIVE_STRING", ()=>SENSITIVE_STRING);
const SENSITIVE_STRING = "***SensitiveInformation***";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iAQMN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAggregatedClient", ()=>createAggregatedClient);
const createAggregatedClient = (commands, Client)=>{
    for (const command of Object.keys(commands)){
        const CommandCtor = commands[command];
        const methodImpl = async function(args, optionsOrCb, cb) {
            const command = new CommandCtor(args);
            if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
            else if (typeof cb === "function") {
                if (typeof optionsOrCb !== "object") throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
                this.send(command, optionsOrCb || {}, cb);
            } else return this.send(command, optionsOrCb);
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client.prototype[methodName] = methodImpl;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hw2Vl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dateToUtcString", ()=>dateToUtcString);
parcelHelpers.export(exports, "parseRfc3339DateTime", ()=>parseRfc3339DateTime);
parcelHelpers.export(exports, "parseRfc3339DateTimeWithOffset", ()=>parseRfc3339DateTimeWithOffset);
parcelHelpers.export(exports, "parseRfc7231DateTime", ()=>parseRfc7231DateTime);
parcelHelpers.export(exports, "parseEpochTimestamp", ()=>parseEpochTimestamp);
var _parseUtils = require("./parse-utils");
const DAYS = [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
];
const MONTHS = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
function dateToUtcString(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
}
const RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
const parseRfc3339DateTime = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value !== "string") throw new TypeError("RFC-3339 date-times must be expressed as strings");
    const match = RFC3339.exec(value);
    if (!match) throw new TypeError("Invalid RFC-3339 date-time value");
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
    const year = (0, _parseUtils.strictParseShort)(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    return buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
    });
};
const RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
const parseRfc3339DateTimeWithOffset = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value !== "string") throw new TypeError("RFC-3339 date-times must be expressed as strings");
    const match = RFC3339_WITH_OFFSET.exec(value);
    if (!match) throw new TypeError("Invalid RFC-3339 date-time value");
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
    const year = (0, _parseUtils.strictParseShort)(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    const date = buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
    });
    if (offsetStr.toUpperCase() != "Z") date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
    return date;
};
const IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
const parseRfc7231DateTime = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value !== "string") throw new TypeError("RFC-7231 date-times must be expressed as strings");
    let match = IMF_FIXDATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, _parseUtils.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
        });
    }
    match = RFC_850_DATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
        }));
    }
    match = ASC_TIME.exec(value);
    if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, _parseUtils.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
        });
    }
    throw new TypeError("Invalid RFC-7231 date-time value");
};
const parseEpochTimestamp = (value)=>{
    if (value === null || value === undefined) return undefined;
    let valueAsDouble;
    if (typeof value === "number") valueAsDouble = value;
    else if (typeof value === "string") valueAsDouble = (0, _parseUtils.strictParseDouble)(value);
    else throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
    return new Date(Math.round(valueAsDouble * 1000));
};
const buildDate = (year, month, day, time)=>{
    const adjustedMonth = month - 1;
    validateDayOfMonth(year, adjustedMonth, day);
    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
};
const parseTwoDigitYear = (value)=>{
    const thisYear = new Date().getUTCFullYear();
    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, _parseUtils.strictParseShort)(stripLeadingZeroes(value));
    if (valueInThisCentury < thisYear) return valueInThisCentury + 100;
    return valueInThisCentury;
};
const FIFTY_YEARS_IN_MILLIS = 1576800000000;
const adjustRfc850Year = (input)=>{
    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
    return input;
};
const parseMonthByShortName = (value)=>{
    const monthIdx = MONTHS.indexOf(value);
    if (monthIdx < 0) throw new TypeError(`Invalid month: ${value}`);
    return monthIdx + 1;
};
const DAYS_IN_MONTH = [
    31,
    28,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
];
const validateDayOfMonth = (year, month, day)=>{
    let maxDays = DAYS_IN_MONTH[month];
    if (month === 1 && isLeapYear(year)) maxDays = 29;
    if (day > maxDays) throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
};
const isLeapYear = (year)=>{
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
};
const parseDateValue = (value, type, lower, upper)=>{
    const dateVal = (0, _parseUtils.strictParseByte)(stripLeadingZeroes(value));
    if (dateVal < lower || dateVal > upper) throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
    return dateVal;
};
const parseMilliseconds = (value)=>{
    if (value === null || value === undefined) return 0;
    return (0, _parseUtils.strictParseFloat32)("0." + value) * 1000;
};
const parseOffsetToMilliseconds = (value)=>{
    const directionStr = value[0];
    let direction = 1;
    if (directionStr == "+") direction = 1;
    else if (directionStr == "-") direction = -1;
    else throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
    const hour = Number(value.substring(1, 3));
    const minute = Number(value.substring(4, 6));
    return direction * (hour * 60 + minute) * 60000;
};
const stripLeadingZeroes = (value)=>{
    let idx = 0;
    while(idx < value.length - 1 && value.charAt(idx) === "0")idx++;
    if (idx === 0) return value;
    return value.slice(idx);
};

},{"./parse-utils":"h47HV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h47HV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseBoolean", ()=>parseBoolean);
parcelHelpers.export(exports, "expectBoolean", ()=>expectBoolean);
parcelHelpers.export(exports, "expectNumber", ()=>expectNumber);
parcelHelpers.export(exports, "expectFloat32", ()=>expectFloat32);
parcelHelpers.export(exports, "expectLong", ()=>expectLong);
parcelHelpers.export(exports, "expectInt", ()=>expectInt);
parcelHelpers.export(exports, "expectInt32", ()=>expectInt32);
parcelHelpers.export(exports, "expectShort", ()=>expectShort);
parcelHelpers.export(exports, "expectByte", ()=>expectByte);
parcelHelpers.export(exports, "expectNonNull", ()=>expectNonNull);
parcelHelpers.export(exports, "expectObject", ()=>expectObject);
parcelHelpers.export(exports, "expectString", ()=>expectString);
parcelHelpers.export(exports, "expectUnion", ()=>expectUnion);
parcelHelpers.export(exports, "strictParseDouble", ()=>strictParseDouble);
parcelHelpers.export(exports, "strictParseFloat", ()=>strictParseFloat);
parcelHelpers.export(exports, "strictParseFloat32", ()=>strictParseFloat32);
parcelHelpers.export(exports, "limitedParseDouble", ()=>limitedParseDouble);
parcelHelpers.export(exports, "handleFloat", ()=>handleFloat);
parcelHelpers.export(exports, "limitedParseFloat", ()=>limitedParseFloat);
parcelHelpers.export(exports, "limitedParseFloat32", ()=>limitedParseFloat32);
parcelHelpers.export(exports, "strictParseLong", ()=>strictParseLong);
parcelHelpers.export(exports, "strictParseInt", ()=>strictParseInt);
parcelHelpers.export(exports, "strictParseInt32", ()=>strictParseInt32);
parcelHelpers.export(exports, "strictParseShort", ()=>strictParseShort);
parcelHelpers.export(exports, "strictParseByte", ()=>strictParseByte);
parcelHelpers.export(exports, "logger", ()=>logger);
const parseBoolean = (value)=>{
    switch(value){
        case "true":
            return true;
        case "false":
            return false;
        default:
            throw new Error(`Unable to parse boolean value "${value}"`);
    }
};
const expectBoolean = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "number") {
        if (value === 0 || value === 1) logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        if (value === 0) return false;
        if (value === 1) return true;
    }
    if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        if (lower === "false") return false;
        if (lower === "true") return true;
    }
    if (typeof value === "boolean") return value;
    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
};
const expectNumber = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
            if (String(parsed) !== String(value)) logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
            return parsed;
        }
    }
    if (typeof value === "number") return value;
    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
};
const MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
const expectFloat32 = (value)=>{
    const expected = expectNumber(value);
    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) throw new TypeError(`Expected 32-bit float, got ${value}`);
    }
    return expected;
};
const expectLong = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (Number.isInteger(value) && !Number.isNaN(value)) return value;
    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
};
const expectInt = expectLong;
const expectInt32 = (value)=>expectSizedInt(value, 32);
const expectShort = (value)=>expectSizedInt(value, 16);
const expectByte = (value)=>expectSizedInt(value, 8);
const expectSizedInt = (value, size)=>{
    const expected = expectLong(value);
    if (expected !== undefined && castInt(expected, size) !== expected) throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
    return expected;
};
const castInt = (value, size)=>{
    switch(size){
        case 32:
            return Int32Array.of(value)[0];
        case 16:
            return Int16Array.of(value)[0];
        case 8:
            return Int8Array.of(value)[0];
    }
};
const expectNonNull = (value, location)=>{
    if (value === null || value === undefined) {
        if (location) throw new TypeError(`Expected a non-null value for ${location}`);
        throw new TypeError("Expected a non-null value");
    }
    return value;
};
const expectObject = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "object" && !Array.isArray(value)) return value;
    const receivedType = Array.isArray(value) ? "array" : typeof value;
    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
};
const expectString = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "string") return value;
    if ([
        "boolean",
        "number",
        "bigint"
    ].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
    }
    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
};
const expectUnion = (value)=>{
    if (value === null || value === undefined) return undefined;
    const asObject = expectObject(value);
    const setKeys = Object.entries(asObject).filter(([, v])=>v != null).map(([k])=>k);
    if (setKeys.length === 0) throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
    if (setKeys.length > 1) throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
    return asObject;
};
const strictParseDouble = (value)=>{
    if (typeof value == "string") return expectNumber(parseNumber(value));
    return expectNumber(value);
};
const strictParseFloat = strictParseDouble;
const strictParseFloat32 = (value)=>{
    if (typeof value == "string") return expectFloat32(parseNumber(value));
    return expectFloat32(value);
};
const NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
const parseNumber = (value)=>{
    const matches = value.match(NUMBER_REGEX);
    if (matches === null || matches[0].length !== value.length) throw new TypeError(`Expected real number, got implicit NaN`);
    return parseFloat(value);
};
const limitedParseDouble = (value)=>{
    if (typeof value == "string") return parseFloatString(value);
    return expectNumber(value);
};
const handleFloat = limitedParseDouble;
const limitedParseFloat = limitedParseDouble;
const limitedParseFloat32 = (value)=>{
    if (typeof value == "string") return parseFloatString(value);
    return expectFloat32(value);
};
const parseFloatString = (value)=>{
    switch(value){
        case "NaN":
            return NaN;
        case "Infinity":
            return Infinity;
        case "-Infinity":
            return -Infinity;
        default:
            throw new Error(`Unable to parse float value: ${value}`);
    }
};
const strictParseLong = (value)=>{
    if (typeof value === "string") return expectLong(parseNumber(value));
    return expectLong(value);
};
const strictParseInt = strictParseLong;
const strictParseInt32 = (value)=>{
    if (typeof value === "string") return expectInt32(parseNumber(value));
    return expectInt32(value);
};
const strictParseShort = (value)=>{
    if (typeof value === "string") return expectShort(parseNumber(value));
    return expectShort(value);
};
const strictParseByte = (value)=>{
    if (typeof value === "string") return expectByte(parseNumber(value));
    return expectByte(value);
};
const stackTraceWarning = (message)=>{
    return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s)=>!s.includes("stackTraceWarning")).join("\n");
};
const logger = {
    warn: console.warn
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bG4lh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "throwDefaultError", ()=>throwDefaultError);
parcelHelpers.export(exports, "withBaseException", ()=>withBaseException);
var _exceptions = require("./exceptions");
const throwDefaultError = ({ output , parsedBody , exceptionCtor , errorCode  })=>{
    const $metadata = deserializeMetadata(output);
    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
    const response = new exceptionCtor({
        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
    });
    throw (0, _exceptions.decorateServiceException)(response, parsedBody);
};
const withBaseException = (ExceptionCtor)=>{
    return ({ output , parsedBody , errorCode  })=>{
        throwDefaultError({
            output,
            parsedBody,
            exceptionCtor: ExceptionCtor,
            errorCode
        });
    };
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });

},{"./exceptions":"hliAV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hliAV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServiceException", ()=>ServiceException);
parcelHelpers.export(exports, "decorateServiceException", ()=>decorateServiceException);
class ServiceException extends Error {
    constructor(options){
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
    }
}
const decorateServiceException = (exception, additions = {})=>{
    Object.entries(additions).filter(([, v])=>v !== undefined).forEach(([k, v])=>{
        if (exception[k] == undefined || exception[k] === "") exception[k] = v;
    });
    const message = exception.message || exception.Message || "UnknownError";
    exception.message = message;
    delete exception.Message;
    return exception;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bwWM5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loadConfigsForDefaultMode", ()=>loadConfigsForDefaultMode);
const loadConfigsForDefaultMode = (mode)=>{
    switch(mode){
        case "standard":
            return {
                retryMode: "standard",
                connectionTimeout: 3100
            };
        case "in-region":
            return {
                retryMode: "standard",
                connectionTimeout: 1100
            };
        case "cross-region":
            return {
                retryMode: "standard",
                connectionTimeout: 3100
            };
        case "mobile":
            return {
                retryMode: "standard",
                connectionTimeout: 30000
            };
        default:
            return {};
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4TK97":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "emitWarningIfUnsupportedVersion", ()=>emitWarningIfUnsupportedVersion);
let warningEmitted = false;
const emitWarningIfUnsupportedVersion = (version)=>{
    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 14) warningEmitted = true;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"843Ff":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extendedEncodeURIComponent", ()=>extendedEncodeURIComponent);
function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gBHBn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getArrayIfSingleItem", ()=>getArrayIfSingleItem);
const getArrayIfSingleItem = (mayBeArray)=>Array.isArray(mayBeArray) ? mayBeArray : [
        mayBeArray
    ];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ggvWO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getValueFromTextNode", ()=>getValueFromTextNode);
const getValueFromTextNode = (obj)=>{
    const textNodeName = "#text";
    for(const key in obj){
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) obj[key] = obj[key][textNodeName];
        else if (typeof obj[key] === "object" && obj[key] !== null) obj[key] = getValueFromTextNode(obj[key]);
    }
    return obj;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"js6bs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringWrapper", ()=>StringWrapper);
parcelHelpers.export(exports, "LazyJsonString", ()=>LazyJsonString);
const StringWrapper = function() {
    const Class = Object.getPrototypeOf(this).constructor;
    const Constructor = Function.bind.apply(String, [
        null,
        ...arguments
    ]);
    const instance = new Constructor();
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
        value: StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
    }
});
Object.setPrototypeOf(StringWrapper, String);
class LazyJsonString extends StringWrapper {
    deserializeJSON() {
        return JSON.parse(super.toString());
    }
    toJSON() {
        return super.toString();
    }
    static fromObject(object) {
        if (object instanceof LazyJsonString) return object;
        else if (object instanceof String || typeof object === "string") return new LazyJsonString(object);
        return new LazyJsonString(JSON.stringify(object));
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cvh8s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "map", ()=>map);
parcelHelpers.export(exports, "convertMap", ()=>convertMap);
parcelHelpers.export(exports, "take", ()=>take);
function map(arg0, arg1, arg2) {
    let target;
    let filter;
    let instructions;
    if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
    } else {
        target = arg0;
        if (typeof arg1 === "function") {
            filter = arg1;
            instructions = arg2;
            return mapWithFilter(target, filter, instructions);
        } else instructions = arg1;
    }
    for (const key of Object.keys(instructions)){
        if (!Array.isArray(instructions[key])) {
            target[key] = instructions[key];
            continue;
        }
        applyInstruction(target, null, instructions, key);
    }
    return target;
}
const convertMap = (target)=>{
    const output = {};
    for (const [k, v] of Object.entries(target || {}))output[k] = [
        ,
        v
    ];
    return output;
};
const take = (source, instructions)=>{
    const out = {};
    for(const key in instructions)applyInstruction(out, source, instructions, key);
    return out;
};
const mapWithFilter = (target, filter, instructions)=>{
    return map(target, Object.entries(instructions).reduce((_instructions, [key, value])=>{
        if (Array.isArray(value)) _instructions[key] = value;
        else if (typeof value === "function") _instructions[key] = [
            filter,
            value()
        ];
        else _instructions[key] = [
            filter,
            value
        ];
        return _instructions;
    }, {}));
};
const applyInstruction = (target, source, instructions, targetKey)=>{
    if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") instruction = [
            ,
            instruction
        ];
        const [filter = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter === "function" && filter(source[sourceKey]) || typeof filter !== "function" && !!filter) target[targetKey] = valueFn(source[sourceKey]);
        return;
    }
    let [filter, value] = instructions[targetKey];
    if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === undefined && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) target[targetKey] = _value;
        else if (customFilterPassed) target[targetKey] = value();
    } else {
        const defaultFilterPassed = filter === undefined && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) target[targetKey] = value;
    }
};
const nonNullish = (_)=>_ != null;
const pass = (_)=>_;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43uvW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolvedPath", ()=>resolvedPath);
var _extendedEncodeUriComponent = require("./extended-encode-uri-component");
const resolvedPath = (resolvedPath, input, memberName, labelValueProvider, uriLabel, isGreedyLabel)=>{
    if (input != null && input[memberName] !== undefined) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        resolvedPath = resolvedPath.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment)=>(0, _extendedEncodeUriComponent.extendedEncodeURIComponent)(segment)).join("/") : (0, _extendedEncodeUriComponent.extendedEncodeURIComponent)(labelValue));
    } else throw new Error("No value provided for input HTTP label: " + memberName + ".");
    return resolvedPath;
};

},{"./extended-encode-uri-component":"843Ff","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjeXK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeFloat", ()=>serializeFloat);
const serializeFloat = (value)=>{
    if (value !== value) return "NaN";
    switch(value){
        case Infinity:
            return "Infinity";
        case -Infinity:
            return "-Infinity";
        default:
            return value;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ctpX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_json", ()=>_json);
const _json = (obj)=>{
    if (obj == null) return {};
    if (Array.isArray(obj)) return obj.filter((_)=>_ != null);
    if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)){
            if (obj[key] == null) continue;
            target[key] = _json(obj[key]);
        }
        return target;
    }
    return obj;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4jYlS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "splitEvery", ()=>splitEvery);
function splitEvery(value, delimiter, numDelimiters) {
    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
    const segments = value.split(delimiter);
    if (numDelimiters === 1) return segments;
    const compoundSegments = [];
    let currentSegment = "";
    for(let i = 0; i < segments.length; i++){
        if (currentSegment === "") currentSegment = segments[i];
        else currentSegment += delimiter + segments[i];
        if ((i + 1) % numDelimiters === 0) {
            compoundSegments.push(currentSegment);
            currentSegment = "";
        }
    }
    if (currentSegment !== "") compoundSegments.push(currentSegment);
    return compoundSegments;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iCqTl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveClientEndpointParameters", ()=>resolveClientEndpointParameters);
const resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,
        defaultSigningName: "s3"
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3p984":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRuntimeConfig", ()=>getRuntimeConfig);
var _packageJson = require("../package.json");
var _packageJsonDefault = parcelHelpers.interopDefault(_packageJson);
var _sha1Browser = require("@aws-crypto/sha1-browser");
var _sha256Browser = require("@aws-crypto/sha256-browser");
var _configResolver = require("@aws-sdk/config-resolver");
var _eventstreamSerdeBrowser = require("@aws-sdk/eventstream-serde-browser");
var _fetchHttpHandler = require("@aws-sdk/fetch-http-handler");
var _hashBlobBrowser = require("@aws-sdk/hash-blob-browser");
var _invalidDependency = require("@aws-sdk/invalid-dependency");
var _md5Js = require("@aws-sdk/md5-js");
var _utilBodyLengthBrowser = require("@aws-sdk/util-body-length-browser");
var _utilRetry = require("@aws-sdk/util-retry");
var _utilStreamBrowser = require("@aws-sdk/util-stream-browser");
var _utilUserAgentBrowser = require("@aws-sdk/util-user-agent-browser");
var _runtimeConfigShared = require("./runtimeConfig.shared");
var _smithyClient = require("@aws-sdk/smithy-client");
var _utilDefaultsModeBrowser = require("@aws-sdk/util-defaults-mode-browser");
const getRuntimeConfig = (config)=>{
    const defaultsMode = (0, _utilDefaultsModeBrowser.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then((0, _smithyClient.loadConfigsForDefaultMode));
    const clientSharedValues = (0, _runtimeConfigShared.getRuntimeConfig)(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "browser",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? (0, _utilBodyLengthBrowser.calculateBodyLength),
        credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_)=>()=>Promise.reject(new Error("Credential is missing"))),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, _utilUserAgentBrowser.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: (0, _packageJsonDefault.default).version
        }),
        eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? (0, _eventstreamSerdeBrowser.eventStreamSerdeProvider),
        getAwsChunkedEncodingStream: config?.getAwsChunkedEncodingStream ?? (0, _utilStreamBrowser.getAwsChunkedEncodingStream),
        maxAttempts: config?.maxAttempts ?? (0, _utilRetry.DEFAULT_MAX_ATTEMPTS),
        md5: config?.md5 ?? (0, _md5Js.Md5),
        region: config?.region ?? (0, _invalidDependency.invalidProvider)("Region is missing"),
        requestHandler: config?.requestHandler ?? new (0, _fetchHttpHandler.FetchHttpHandler)(defaultConfigProvider),
        retryMode: config?.retryMode ?? (async ()=>(await defaultConfigProvider()).retryMode || (0, _utilRetry.DEFAULT_RETRY_MODE)),
        sdkStreamMixin: config?.sdkStreamMixin ?? (0, _utilStreamBrowser.sdkStreamMixin),
        sha1: config?.sha1 ?? (0, _sha1Browser.Sha1),
        sha256: config?.sha256 ?? (0, _sha256Browser.Sha256),
        streamCollector: config?.streamCollector ?? (0, _fetchHttpHandler.streamCollector),
        streamHasher: config?.streamHasher ?? (0, _hashBlobBrowser.blobHasher),
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (()=>Promise.resolve((0, _configResolver.DEFAULT_USE_DUALSTACK_ENDPOINT))),
        useFipsEndpoint: config?.useFipsEndpoint ?? (()=>Promise.resolve((0, _configResolver.DEFAULT_USE_FIPS_ENDPOINT)))
    };
};

},{"../package.json":"47F6X","@aws-crypto/sha1-browser":"k4LA4","@aws-crypto/sha256-browser":"h7M77","@aws-sdk/config-resolver":"2Zj28","@aws-sdk/eventstream-serde-browser":"axzf7","@aws-sdk/fetch-http-handler":"etWgp","@aws-sdk/hash-blob-browser":"hS8AF","@aws-sdk/invalid-dependency":"1kvFV","@aws-sdk/md5-js":"d6LDZ","@aws-sdk/util-body-length-browser":"6ddt5","@aws-sdk/util-retry":"dmBPM","@aws-sdk/util-stream-browser":"igCq1","@aws-sdk/util-user-agent-browser":"duqKe","./runtimeConfig.shared":"60D0X","@aws-sdk/smithy-client":"ats0l","@aws-sdk/util-defaults-mode-browser":"lFq8A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"47F6X":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"@aws-sdk/client-s3","description":"AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native","version":"3.348.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"tsc -p tsconfig.cjs.json","build:docs":"typedoc","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","extract:docs":"api-extractor run --local","generate:client":"node ../../scripts/generate-clients/single-service --solo s3","test":"yarn test:unit","test:e2e":"ts-mocha test/**/*.ispec.ts && karma start karma.conf.js","test:unit":"ts-mocha test/**/*.spec.ts"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha1-browser":"3.0.0","@aws-crypto/sha256-browser":"3.0.0","@aws-crypto/sha256-js":"3.0.0","@aws-sdk/client-sts":"3.348.0","@aws-sdk/config-resolver":"3.347.0","@aws-sdk/credential-provider-node":"3.348.0","@aws-sdk/eventstream-serde-browser":"3.347.0","@aws-sdk/eventstream-serde-config-resolver":"3.347.0","@aws-sdk/eventstream-serde-node":"3.347.0","@aws-sdk/fetch-http-handler":"3.347.0","@aws-sdk/hash-blob-browser":"3.347.0","@aws-sdk/hash-node":"3.347.0","@aws-sdk/hash-stream-node":"3.347.0","@aws-sdk/invalid-dependency":"3.347.0","@aws-sdk/md5-js":"3.347.0","@aws-sdk/middleware-bucket-endpoint":"3.347.0","@aws-sdk/middleware-content-length":"3.347.0","@aws-sdk/middleware-endpoint":"3.347.0","@aws-sdk/middleware-expect-continue":"3.347.0","@aws-sdk/middleware-flexible-checksums":"3.347.0","@aws-sdk/middleware-host-header":"3.347.0","@aws-sdk/middleware-location-constraint":"3.347.0","@aws-sdk/middleware-logger":"3.347.0","@aws-sdk/middleware-recursion-detection":"3.347.0","@aws-sdk/middleware-retry":"3.347.0","@aws-sdk/middleware-sdk-s3":"3.347.0","@aws-sdk/middleware-serde":"3.347.0","@aws-sdk/middleware-signing":"3.347.0","@aws-sdk/middleware-ssec":"3.347.0","@aws-sdk/middleware-stack":"3.347.0","@aws-sdk/middleware-user-agent":"3.347.0","@aws-sdk/node-config-provider":"3.347.0","@aws-sdk/node-http-handler":"3.348.0","@aws-sdk/signature-v4-multi-region":"3.347.0","@aws-sdk/smithy-client":"3.347.0","@aws-sdk/types":"3.347.0","@aws-sdk/url-parser":"3.347.0","@aws-sdk/util-base64":"3.310.0","@aws-sdk/util-body-length-browser":"3.310.0","@aws-sdk/util-body-length-node":"3.310.0","@aws-sdk/util-defaults-mode-browser":"3.347.0","@aws-sdk/util-defaults-mode-node":"3.347.0","@aws-sdk/util-endpoints":"3.347.0","@aws-sdk/util-retry":"3.347.0","@aws-sdk/util-stream-browser":"3.347.0","@aws-sdk/util-stream-node":"3.348.0","@aws-sdk/util-user-agent-browser":"3.347.0","@aws-sdk/util-user-agent-node":"3.347.0","@aws-sdk/util-utf8":"3.310.0","@aws-sdk/util-waiter":"3.347.0","@aws-sdk/xml-builder":"3.310.0","@smithy/protocol-http":"^1.0.1","@smithy/types":"^1.0.0","fast-xml-parser":"4.2.4","tslib":"^2.5.0"},"devDependencies":{"@aws-sdk/service-client-documentation-generator":"3.310.0","@tsconfig/node14":"1.0.3","@types/chai":"^4.2.11","@types/mocha":"^8.0.4","@types/node":"^14.14.31","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typedoc":"0.23.23","typescript":"~4.9.5"},"engines":{"node":">=14.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*/**"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-s3"}}');

},{}],"k4LA4":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebCryptoSha1 = exports.Ie11Sha1 = void 0;
var tslib_1 = require("d1132793b35a83ca");
tslib_1.__exportStar(require("b4a9505372e4c902"), exports);
var ie11Sha1_1 = require("a016356e487f5cae");
Object.defineProperty(exports, "Ie11Sha1", {
    enumerable: true,
    get: function() {
        return ie11Sha1_1.Sha1;
    }
});
var webCryptoSha1_1 = require("e2fa7d0e5f6e38a7");
Object.defineProperty(exports, "WebCryptoSha1", {
    enumerable: true,
    get: function() {
        return webCryptoSha1_1.Sha1;
    }
});

},{"d1132793b35a83ca":"bMSdT","b4a9505372e4c902":"6Nmd8","a016356e487f5cae":"fe5Nm","e2fa7d0e5f6e38a7":"kz8i6"}],"bMSdT":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Nmd8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha1 = void 0;
var ie11Sha1_1 = require("dbac00ee4407cd3e");
var webCryptoSha1_1 = require("9a4882f7186a425c");
var supports_web_crypto_1 = require("808285e30b30c064");
var ie11_detection_1 = require("5cbd08492c28b653");
var util_locate_window_1 = require("8ef5151d9ab1b345");
var util_1 = require("37ac2fc8b976e99");
var Sha1 = /** @class */ function() {
    function Sha1(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) this.hash = new webCryptoSha1_1.Sha1(secret);
        else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) this.hash = new ie11Sha1_1.Sha1(secret);
        else throw new Error("SHA1 not supported");
    }
    Sha1.prototype.update = function(data, encoding) {
        this.hash.update((0, util_1.convertToBuffer)(data));
    };
    Sha1.prototype.digest = function() {
        return this.hash.digest();
    };
    Sha1.prototype.reset = function() {
        this.hash.reset();
    };
    return Sha1;
}();
exports.Sha1 = Sha1;

},{"dbac00ee4407cd3e":"fe5Nm","9a4882f7186a425c":"kz8i6","808285e30b30c064":"hF3NL","5cbd08492c28b653":"l9y1G","8ef5151d9ab1b345":"7axS0","37ac2fc8b976e99":"aDvRG"}],"fe5Nm":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha1 = void 0;
var isEmptyData_1 = require("a7ec0d35432d198d");
var constants_1 = require("f04e5dbe1953aa53");
var util_utf8_browser_1 = require("9a99c3a81eeaade7");
var util_locate_window_1 = require("595835debe9aa267");
var Sha1 = /** @class */ function() {
    function Sha1(secret) {
        this.secret = secret;
        this.reset();
    }
    Sha1.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) return;
        this.operation = this.operation.then(function(operation) {
            operation.onerror = function() {
                _this.operation = Promise.reject(new Error("Error encountered updating hash"));
            };
            operation.process(toArrayBufferView(toHash));
            return operation;
        });
        this.operation.catch(function() {});
    };
    Sha1.prototype.digest = function() {
        return this.operation.then(function(operation) {
            return new Promise(function(resolve, reject) {
                operation.onerror = function() {
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.oncomplete = function() {
                    if (operation.result) resolve(new Uint8Array(operation.result));
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.finish();
            });
        });
    };
    Sha1.prototype.reset = function() {
        if (this.secret) {
            this.operation = getKeyPromise(this.secret).then(function(keyData) {
                return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, keyData);
            });
            this.operation.catch(function() {});
        } else this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-1"));
    };
    return Sha1;
}();
exports.Sha1 = Sha1;
function getKeyPromise(secret) {
    return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_1_HMAC_ALGO, false, [
            "sign"
        ]);
        keyOperation.oncomplete = function() {
            if (keyOperation.result) resolve(keyOperation.result);
            reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
            reject(new Error("ImportKey failed to import key."));
        };
    });
}
function toArrayBufferView(data) {
    if (typeof data === "string") return (0, util_utf8_browser_1.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}

},{"a7ec0d35432d198d":"62uja","f04e5dbe1953aa53":"atqaA","9a99c3a81eeaade7":"3Y1HX","595835debe9aa267":"7axS0"}],"62uja":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;

},{}],"atqaA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EMPTY_DATA_SHA_1 = exports.SHA_1_HMAC_ALGO = exports.SHA_1_HASH = void 0;
exports.SHA_1_HASH = {
    name: "SHA-1"
};
exports.SHA_1_HMAC_ALGO = {
    name: "HMAC",
    hash: exports.SHA_1_HASH
};
exports.EMPTY_DATA_SHA_1 = new Uint8Array([
    218,
    57,
    163,
    238,
    94,
    107,
    75,
    13,
    50,
    85,
    191,
    239,
    149,
    96,
    24,
    144,
    175,
    216,
    7,
    9
]);

},{}],"7axS0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "locateWindow", ()=>locateWindow);
const fallbackWindow = {};
function locateWindow() {
    if (typeof window !== "undefined") return window;
    else if (typeof self !== "undefined") return self;
    return fallbackWindow;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kz8i6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha1 = void 0;
var util_utf8_browser_1 = require("9c4829376f8f187a");
var isEmptyData_1 = require("c5a7c087c6b6e6ae");
var constants_1 = require("f2a955e130baedb");
var util_locate_window_1 = require("bc0521f68bf5131f");
var Sha1 = /** @class */ function() {
    function Sha1(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
            this.key = new Promise(function(resolve, reject) {
                (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", convertToBuffer(secret), constants_1.SHA_1_HMAC_ALGO, false, [
                    "sign"
                ]).then(resolve, reject);
            });
            this.key.catch(function() {});
        }
    }
    Sha1.prototype.update = function(data) {
        if ((0, isEmptyData_1.isEmptyData)(data)) return;
        var update = convertToBuffer(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
    };
    Sha1.prototype.digest = function() {
        var _this = this;
        if (this.key) return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, key, _this.toHash).then(function(data) {
                return new Uint8Array(data);
            });
        });
        if ((0, isEmptyData_1.isEmptyData)(this.toHash)) return Promise.resolve(constants_1.EMPTY_DATA_SHA_1);
        return Promise.resolve().then(function() {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_1_HASH, _this.toHash);
        }).then(function(data) {
            return Promise.resolve(new Uint8Array(data));
        });
    };
    Sha1.prototype.reset = function() {
        this.toHash = new Uint8Array(0);
    };
    return Sha1;
}();
exports.Sha1 = Sha1;
function convertToBuffer(data) {
    if (typeof data === "string") return (0, util_utf8_browser_1.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}

},{"9c4829376f8f187a":"3Y1HX","c5a7c087c6b6e6ae":"62uja","f2a955e130baedb":"atqaA","bc0521f68bf5131f":"7axS0"}],"hF3NL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("77b6e702e4b0428a");
tslib_1.__exportStar(require("150bdc65f19f6fe8"), exports);

},{"77b6e702e4b0428a":"eEys3","150bdc65f19f6fe8":"4T8k1"}],"eEys3":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4T8k1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
var tslib_1 = require("d9d4edfd7f160da1");
var subtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function supportsWebCrypto(window) {
    if (supportsSecureRandom(window) && typeof window.crypto.subtle === "object") {
        var subtle = window.crypto.subtle;
        return supportsSubtleCrypto(subtle);
    }
    return false;
}
exports.supportsWebCrypto = supportsWebCrypto;
function supportsSecureRandom(window) {
    if (typeof window === "object" && typeof window.crypto === "object") {
        var getRandomValues = window.crypto.getRandomValues;
        return typeof getRandomValues === "function";
    }
    return false;
}
exports.supportsSecureRandom = supportsSecureRandom;
function supportsSubtleCrypto(subtle) {
    return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
    });
}
exports.supportsSubtleCrypto = supportsSubtleCrypto;
function supportsZeroByteGCM(subtle) {
    return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    if (!supportsSubtleCrypto(subtle)) return [
                        2 /*return*/ ,
                        false
                    ];
                    _b.label = 1;
                case 1:
                    _b.trys.push([
                        1,
                        4,
                        ,
                        5
                    ]);
                    return [
                        4 /*yield*/ ,
                        subtle.generateKey({
                            name: "AES-GCM",
                            length: 128
                        }, false, [
                            "encrypt"
                        ])
                    ];
                case 2:
                    key = _b.sent();
                    return [
                        4 /*yield*/ ,
                        subtle.encrypt({
                            name: "AES-GCM",
                            iv: new Uint8Array(Array(12)),
                            additionalData: new Uint8Array(Array(16)),
                            tagLength: 128
                        }, key, new Uint8Array(0))
                    ];
                case 3:
                    zeroByteAuthTag = _b.sent();
                    return [
                        2 /*return*/ ,
                        zeroByteAuthTag.byteLength === 16
                    ];
                case 4:
                    _a = _b.sent();
                    return [
                        2 /*return*/ ,
                        false
                    ];
                case 5:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
exports.supportsZeroByteGCM = supportsZeroByteGCM;

},{"d9d4edfd7f160da1":"eEys3"}],"l9y1G":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("349d4ad1a84f9391");
tslib_1.__exportStar(require("21db5ac52614a3fc"), exports);
tslib_1.__exportStar(require("d258f06221e01140"), exports);
tslib_1.__exportStar(require("ffb697f6ff78bfa1"), exports);
tslib_1.__exportStar(require("84552afc7d264010"), exports);
tslib_1.__exportStar(require("14b671c7aac632d"), exports);

},{"349d4ad1a84f9391":"8UVaX","21db5ac52614a3fc":"7MrWv","d258f06221e01140":"grtd6","ffb697f6ff78bfa1":"lUZoT","84552afc7d264010":"690sd","14b671c7aac632d":"jSZab"}],"8UVaX":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7MrWv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"grtd6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"lUZoT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"690sd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"jSZab":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMsWindow = void 0;
var msSubtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function quacksLikeAnMsWindow(window) {
    return "MSInputMethodContext" in window && "msCrypto" in window;
}
/**
 * Determines if the provided window is (or is like) the window object one would
 * expect to encounter in Internet Explorer 11.
 */ function isMsWindow(window) {
    if (quacksLikeAnMsWindow(window) && window.msCrypto.subtle !== undefined) {
        var _a = window.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
            return subtle_1[methodName];
        }).concat(getRandomValues).every(function(method) {
            return typeof method === "function";
        });
    }
    return false;
}
exports.isMsWindow = isMsWindow;

},{}],"h7M77":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
var tslib_1 = require("62ec12493516a334");
tslib_1.__exportStar(require("e099a4a7ffb231f5"), exports);
var ie11Sha256_1 = require("de15e02776b0e316");
Object.defineProperty(exports, "Ie11Sha256", {
    enumerable: true,
    get: function() {
        return ie11Sha256_1.Sha256;
    }
});
var webCryptoSha256_1 = require("8c4446d1ab49a729");
Object.defineProperty(exports, "WebCryptoSha256", {
    enumerable: true,
    get: function() {
        return webCryptoSha256_1.Sha256;
    }
});

},{"62ec12493516a334":"1ibki","e099a4a7ffb231f5":"5zD05","de15e02776b0e316":"4aNxR","8c4446d1ab49a729":"1toRi"}],"1ibki":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5zD05":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var ie11Sha256_1 = require("a7f146ad1f3cbfc1");
var webCryptoSha256_1 = require("725c2de9fef54f64");
var sha256_js_1 = require("acd71c1991c101d8");
var supports_web_crypto_1 = require("b78851f350642902");
var ie11_detection_1 = require("d3a26cad479a1048");
var util_locate_window_1 = require("cb5027cfddf0ae5a");
var util_1 = require("ef4bedef1a2e8fc2");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) this.hash = new webCryptoSha256_1.Sha256(secret);
        else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) this.hash = new ie11Sha256_1.Sha256(secret);
        else this.hash = new sha256_js_1.Sha256(secret);
    }
    Sha256.prototype.update = function(data, encoding) {
        this.hash.update((0, util_1.convertToBuffer)(data));
    };
    Sha256.prototype.digest = function() {
        return this.hash.digest();
    };
    Sha256.prototype.reset = function() {
        this.hash.reset();
    };
    return Sha256;
}();
exports.Sha256 = Sha256;

},{"a7f146ad1f3cbfc1":"4aNxR","725c2de9fef54f64":"1toRi","acd71c1991c101d8":"fXmvu","b78851f350642902":"hF3NL","d3a26cad479a1048":"l9y1G","cb5027cfddf0ae5a":"7axS0","ef4bedef1a2e8fc2":"aDvRG"}],"4aNxR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var isEmptyData_1 = require("d8dc3989d6db06cb");
var constants_1 = require("d71db60dd455789b");
var util_utf8_browser_1 = require("b2a4d6e137ed6620");
var util_locate_window_1 = require("fb05deefe8f5231");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        this.secret = secret;
        this.reset();
    }
    Sha256.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) return;
        this.operation = this.operation.then(function(operation) {
            operation.onerror = function() {
                _this.operation = Promise.reject(new Error("Error encountered updating hash"));
            };
            operation.process(toArrayBufferView(toHash));
            return operation;
        });
        this.operation.catch(function() {});
    };
    Sha256.prototype.digest = function() {
        return this.operation.then(function(operation) {
            return new Promise(function(resolve, reject) {
                operation.onerror = function() {
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.oncomplete = function() {
                    if (operation.result) resolve(new Uint8Array(operation.result));
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.finish();
            });
        });
    };
    Sha256.prototype.reset = function() {
        if (this.secret) {
            this.operation = getKeyPromise(this.secret).then(function(keyData) {
                return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
            });
            this.operation.catch(function() {});
        } else this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
    };
    return Sha256;
}();
exports.Sha256 = Sha256;
function getKeyPromise(secret) {
    return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [
            "sign"
        ]);
        keyOperation.oncomplete = function() {
            if (keyOperation.result) resolve(keyOperation.result);
            reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
            reject(new Error("ImportKey failed to import key."));
        };
    });
}
function toArrayBufferView(data) {
    if (typeof data === "string") return (0, util_utf8_browser_1.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}

},{"d8dc3989d6db06cb":"2P0qd","d71db60dd455789b":"YaYqM","b2a4d6e137ed6620":"3Y1HX","fb05deefe8f5231":"7axS0"}],"2P0qd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;

},{}],"YaYqM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
exports.SHA_256_HASH = {
    name: "SHA-256"
};
exports.SHA_256_HMAC_ALGO = {
    name: "HMAC",
    hash: exports.SHA_256_HASH
};
exports.EMPTY_DATA_SHA_256 = new Uint8Array([
    227,
    176,
    196,
    66,
    152,
    252,
    28,
    20,
    154,
    251,
    244,
    200,
    153,
    111,
    185,
    36,
    39,
    174,
    65,
    228,
    100,
    155,
    147,
    76,
    164,
    149,
    153,
    27,
    120,
    82,
    184,
    85
]);

},{}],"1toRi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var util_1 = require("fd29082ab97241f2");
var constants_1 = require("a96b793b8f5ad16");
var util_locate_window_1 = require("3b3155587be8430d");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        this.toHash = new Uint8Array(0);
        this.secret = secret;
        this.reset();
    }
    Sha256.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) return;
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
    };
    Sha256.prototype.digest = function() {
        var _this = this;
        if (this.key) return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
                return new Uint8Array(data);
            });
        });
        if ((0, util_1.isEmptyData)(this.toHash)) return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        return Promise.resolve().then(function() {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
            return Promise.resolve(new Uint8Array(data));
        });
    };
    Sha256.prototype.reset = function() {
        var _this = this;
        this.toHash = new Uint8Array(0);
        if (this.secret && this.secret !== void 0) {
            this.key = new Promise(function(resolve, reject) {
                (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(_this.secret), constants_1.SHA_256_HMAC_ALGO, false, [
                    "sign"
                ]).then(resolve, reject);
            });
            this.key.catch(function() {});
        }
    };
    return Sha256;
}();
exports.Sha256 = Sha256;

},{"fd29082ab97241f2":"aDvRG","a96b793b8f5ad16":"YaYqM","3b3155587be8430d":"7axS0"}],"fXmvu":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("847e9f41fbd48d18");
tslib_1.__exportStar(require("952fa851a97011d6"), exports);

},{"847e9f41fbd48d18":"h6r7o","952fa851a97011d6":"3dWmU"}],"h6r7o":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3dWmU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var tslib_1 = require("4cf08e042cbd4f6b");
var constants_1 = require("2f5507f5e1102429");
var RawSha256_1 = require("c4be19be66a5b026");
var util_1 = require("2d947ee16d17c108");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        this.secret = secret;
        this.hash = new RawSha256_1.RawSha256();
        this.reset();
    }
    Sha256.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) return;
        try {
            this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e) {
            this.error = e;
        }
    };
    /* This synchronous method keeps compatibility
     * with the v2 aws-sdk.
     */ Sha256.prototype.digestSync = function() {
        if (this.error) throw this.error;
        if (this.outer) {
            if (!this.outer.finished) this.outer.update(this.hash.digest());
            return this.outer.digest();
        }
        return this.hash.digest();
    };
    /* The underlying digest method here is synchronous.
     * To keep the same interface with the other hash functions
     * the default is to expose this as an async method.
     * However, it can sometimes be useful to have a sync method.
     */ Sha256.prototype.digest = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.digestSync()
                ];
            });
        });
    };
    Sha256.prototype.reset = function() {
        this.hash = new RawSha256_1.RawSha256();
        if (this.secret) {
            this.outer = new RawSha256_1.RawSha256();
            var inner = bufferFromSecret(this.secret);
            var outer = new Uint8Array(constants_1.BLOCK_SIZE);
            outer.set(inner);
            for(var i = 0; i < constants_1.BLOCK_SIZE; i++){
                inner[i] ^= 0x36;
                outer[i] ^= 0x5c;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            // overwrite the copied key in memory
            for(var i = 0; i < inner.byteLength; i++)inner[i] = 0;
        }
    };
    return Sha256;
}();
exports.Sha256 = Sha256;
function bufferFromSecret(secret) {
    var input = (0, util_1.convertToBuffer)(secret);
    if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
    }
    var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
    buffer.set(input);
    return buffer;
}

},{"4cf08e042cbd4f6b":"h6r7o","2f5507f5e1102429":"hkOxZ","c4be19be66a5b026":"4LQhY","2d947ee16d17c108":"aDvRG"}],"hkOxZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
/**
 * @internal
 */ exports.BLOCK_SIZE = 64;
/**
 * @internal
 */ exports.DIGEST_LENGTH = 32;
/**
 * @internal
 */ exports.KEY = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
/**
 * @internal
 */ exports.INIT = [
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
];
/**
 * @internal
 */ exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

},{}],"4LQhY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RawSha256 = void 0;
var constants_1 = require("611362490e842507");
/**
 * @internal
 */ var RawSha256 = /** @class */ function() {
    function RawSha256() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        /**
         * @internal
         */ this.finished = false;
    }
    RawSha256.prototype.update = function(data) {
        if (this.finished) throw new Error("Attempted to update an already finished hash.");
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) throw new Error("Cannot hash more than 2^53 - 1 bits");
        while(byteLength > 0){
            this.buffer[this.bufferLength++] = data[position++];
            byteLength--;
            if (this.bufferLength === constants_1.BLOCK_SIZE) {
                this.hashBuffer();
                this.bufferLength = 0;
            }
        }
    };
    RawSha256.prototype.digest = function() {
        if (!this.finished) {
            var bitsHashed = this.bytesHashed * 8;
            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
            var undecoratedLength = this.bufferLength;
            bufferView.setUint8(this.bufferLength++, 0x80);
            // Ensure the final block has enough room for the hashed length
            if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
                for(var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++)bufferView.setUint8(i, 0);
                this.hashBuffer();
                this.bufferLength = 0;
            }
            for(var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++)bufferView.setUint8(i, 0);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
            this.hashBuffer();
            this.finished = true;
        }
        // The value in state is little-endian rather than big-endian, so flip
        // each word into a new Uint8Array
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for(var i = 0; i < 8; i++){
            out[i * 4] = this.state[i] >>> 24 & 0xff;
            out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;
            out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;
            out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;
        }
        return out;
    };
    RawSha256.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for(var i = 0; i < constants_1.BLOCK_SIZE; i++){
            if (i < 16) this.temp[i] = (buffer[i * 4] & 0xff) << 24 | (buffer[i * 4 + 1] & 0xff) << 16 | (buffer[i * 4 + 2] & 0xff) << 8 | buffer[i * 4 + 3] & 0xff;
            else {
                var u = this.temp[i - 2];
                var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
                u = this.temp[i - 15];
                var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
                this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
            }
            var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
            var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
            state7 = state6;
            state6 = state5;
            state5 = state4;
            state4 = state3 + t1 | 0;
            state3 = state2;
            state2 = state1;
            state1 = state0;
            state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
    };
    return RawSha256;
}();
exports.RawSha256 = RawSha256;

},{"611362490e842507":"hkOxZ"}],"axzf7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventStreamMarshaller = require("./EventStreamMarshaller");
parcelHelpers.exportAll(_eventStreamMarshaller, exports);
var _provider = require("./provider");
parcelHelpers.exportAll(_provider, exports);
var _utils = require("./utils");
parcelHelpers.exportAll(_utils, exports);

},{"./EventStreamMarshaller":"laOq4","./provider":"2dsFH","./utils":"cMoqN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"laOq4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventStreamMarshaller", ()=>EventStreamMarshaller);
var _eventstreamSerdeUniversal = require("@aws-sdk/eventstream-serde-universal");
var _utils = require("./utils");
class EventStreamMarshaller {
    constructor({ utf8Encoder , utf8Decoder  }){
        this.universalMarshaller = new (0, _eventstreamSerdeUniversal.EventStreamMarshaller)({
            utf8Decoder,
            utf8Encoder
        });
    }
    deserialize(body, deserializer) {
        const bodyIterable = isReadableStream(body) ? (0, _utils.readableStreamtoIterable)(body) : body;
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
    }
    serialize(input, serializer) {
        const serialziedIterable = this.universalMarshaller.serialize(input, serializer);
        return typeof ReadableStream === "function" ? (0, _utils.iterableToReadableStream)(serialziedIterable) : serialziedIterable;
    }
}
const isReadableStream = (body)=>typeof ReadableStream === "function" && body instanceof ReadableStream;

},{"@aws-sdk/eventstream-serde-universal":"lJG2Z","./utils":"cMoqN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJG2Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventStreamMarshaller = require("./EventStreamMarshaller");
parcelHelpers.exportAll(_eventStreamMarshaller, exports);
var _provider = require("./provider");
parcelHelpers.exportAll(_provider, exports);

},{"./EventStreamMarshaller":"51Ay1","./provider":"7igH0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"51Ay1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventStreamMarshaller", ()=>EventStreamMarshaller);
var _eventstreamCodec = require("@aws-sdk/eventstream-codec");
var _getChunkedStream = require("./getChunkedStream");
var _getUnmarshalledStream = require("./getUnmarshalledStream");
class EventStreamMarshaller {
    constructor({ utf8Encoder , utf8Decoder  }){
        this.eventStreamCodec = new (0, _eventstreamCodec.EventStreamCodec)(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
    }
    deserialize(body, deserializer) {
        const inputStream = (0, _getChunkedStream.getChunkedStream)(body);
        return new (0, _eventstreamCodec.SmithyMessageDecoderStream)({
            messageStream: new (0, _eventstreamCodec.MessageDecoderStream)({
                inputStream,
                decoder: this.eventStreamCodec
            }),
            deserializer: (0, _getUnmarshalledStream.getMessageUnmarshaller)(deserializer, this.utfEncoder)
        });
    }
    serialize(inputStream, serializer) {
        return new (0, _eventstreamCodec.MessageEncoderStream)({
            messageStream: new (0, _eventstreamCodec.SmithyMessageEncoderStream)({
                inputStream,
                serializer
            }),
            encoder: this.eventStreamCodec,
            includeEndFrame: true
        });
    }
}

},{"@aws-sdk/eventstream-codec":"03PLO","./getChunkedStream":"36Zkf","./getUnmarshalledStream":"fdx7E","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"36Zkf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getChunkedStream", ()=>getChunkedStream);
function getChunkedStream(source) {
    let currentMessageTotalLength = 0;
    let currentMessagePendingLength = 0;
    let currentMessage = null;
    let messageLengthBuffer = null;
    const allocateMessage = (size)=>{
        if (typeof size !== "number") throw new Error("Attempted to allocate an event message where size was not a number: " + size);
        currentMessageTotalLength = size;
        currentMessagePendingLength = 4;
        currentMessage = new Uint8Array(size);
        const currentMessageView = new DataView(currentMessage.buffer);
        currentMessageView.setUint32(0, size, false);
    };
    const iterator = async function*() {
        const sourceIterator = source[Symbol.asyncIterator]();
        while(true){
            const { value , done  } = await sourceIterator.next();
            if (done) {
                if (!currentMessageTotalLength) return;
                else if (currentMessageTotalLength === currentMessagePendingLength) yield currentMessage;
                else throw new Error("Truncated event message received.");
                return;
            }
            const chunkLength = value.length;
            let currentOffset = 0;
            while(currentOffset < chunkLength){
                if (!currentMessage) {
                    const bytesRemaining = chunkLength - currentOffset;
                    if (!messageLengthBuffer) messageLengthBuffer = new Uint8Array(4);
                    const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
                    messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
                    currentMessagePendingLength += numBytesForTotal;
                    currentOffset += numBytesForTotal;
                    if (currentMessagePendingLength < 4) break;
                    allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
                    messageLengthBuffer = null;
                }
                const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
                currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
                currentMessagePendingLength += numBytesToWrite;
                currentOffset += numBytesToWrite;
                if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
                    yield currentMessage;
                    currentMessage = null;
                    currentMessageTotalLength = 0;
                    currentMessagePendingLength = 0;
                }
            }
        }
    };
    return {
        [Symbol.asyncIterator]: iterator
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fdx7E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getUnmarshalledStream", ()=>getUnmarshalledStream);
parcelHelpers.export(exports, "getMessageUnmarshaller", ()=>getMessageUnmarshaller);
function getUnmarshalledStream(source, options) {
    const messageUnmarshaller = getMessageUnmarshaller(options.deserializer, options.toUtf8);
    return {
        [Symbol.asyncIterator]: async function*() {
            for await (const chunk of source){
                const message = options.eventStreamCodec.decode(chunk);
                const type = await messageUnmarshaller(message);
                if (type === undefined) continue;
                yield type;
            }
        }
    };
}
function getMessageUnmarshaller(deserializer, toUtf8) {
    return async function(message) {
        const { value: messageType  } = message.headers[":message-type"];
        if (messageType === "error") {
            const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
            unmodeledError.name = message.headers[":error-code"].value;
            throw unmodeledError;
        } else if (messageType === "exception") {
            const code = message.headers[":exception-type"].value;
            const exception = {
                [code]: message
            };
            const deserializedException = await deserializer(exception);
            if (deserializedException.$unknown) {
                const error = new Error(toUtf8(message.body));
                error.name = code;
                throw error;
            }
            throw deserializedException[code];
        } else if (messageType === "event") {
            const event = {
                [message.headers[":event-type"].value]: message
            };
            const deserialized = await deserializer(event);
            if (deserialized.$unknown) return;
            return deserialized;
        } else throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7igH0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eventStreamSerdeProvider", ()=>eventStreamSerdeProvider);
var _eventStreamMarshaller = require("./EventStreamMarshaller");
const eventStreamSerdeProvider = (options)=>new (0, _eventStreamMarshaller.EventStreamMarshaller)(options);

},{"./EventStreamMarshaller":"51Ay1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cMoqN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "readableStreamtoIterable", ()=>readableStreamtoIterable);
parcelHelpers.export(exports, "iterableToReadableStream", ()=>iterableToReadableStream);
const readableStreamtoIterable = (readableStream)=>({
        [Symbol.asyncIterator]: async function*() {
            const reader = readableStream.getReader();
            try {
                while(true){
                    const { done , value  } = await reader.read();
                    if (done) return;
                    yield value;
                }
            } finally{
                reader.releaseLock();
            }
        }
    });
const iterableToReadableStream = (asyncIterable)=>{
    const iterator = asyncIterable[Symbol.asyncIterator]();
    return new ReadableStream({
        async pull (controller) {
            const { done , value  } = await iterator.next();
            if (done) return controller.close();
            controller.enqueue(value);
        }
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2dsFH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eventStreamSerdeProvider", ()=>eventStreamSerdeProvider);
var _eventStreamMarshaller = require("./EventStreamMarshaller");
const eventStreamSerdeProvider = (options)=>new (0, _eventStreamMarshaller.EventStreamMarshaller)(options);

},{"./EventStreamMarshaller":"laOq4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"etWgp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fetchHttpHandler = require("./fetch-http-handler");
parcelHelpers.exportAll(_fetchHttpHandler, exports);
var _streamCollector = require("./stream-collector");
parcelHelpers.exportAll(_streamCollector, exports);

},{"./fetch-http-handler":"3VXwU","./stream-collector":"gak9T","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3VXwU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FetchHttpHandler", ()=>FetchHttpHandler);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _querystringBuilder = require("@aws-sdk/querystring-builder");
var _requestTimeout = require("./request-timeout");
class FetchHttpHandler {
    constructor(options){
        if (typeof options === "function") this.configProvider = options().then((opts)=>opts || {});
        else {
            this.config = options ?? {};
            this.configProvider = Promise.resolve(this.config);
        }
    }
    destroy() {}
    async handle(request, { abortSignal  } = {}) {
        if (!this.config) this.config = await this.configProvider;
        const requestTimeoutInMs = this.config.requestTimeout;
        if (abortSignal?.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            return Promise.reject(abortError);
        }
        let path = request.path;
        const queryString = (0, _querystringBuilder.buildQueryString)(request.query || {});
        if (queryString) path += `?${queryString}`;
        if (request.fragment) path += `#${request.fragment}`;
        let auth = "";
        if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}@`;
        }
        const { port , method  } = request;
        const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ""}${path}`;
        const body = method === "GET" || method === "HEAD" ? undefined : request.body;
        const requestOptions = {
            body,
            headers: new Headers(request.headers),
            method: method
        };
        if (typeof AbortController !== "undefined") requestOptions["signal"] = abortSignal;
        const fetchRequest = new Request(url, requestOptions);
        const raceOfPromises = [
            fetch(fetchRequest).then((response)=>{
                const fetchHeaders = response.headers;
                const transformedHeaders = {};
                for (const pair of fetchHeaders.entries())transformedHeaders[pair[0]] = pair[1];
                const hasReadableStream = response.body != undefined;
                if (!hasReadableStream) return response.blob().then((body)=>({
                        response: new (0, _protocolHttp.HttpResponse)({
                            headers: transformedHeaders,
                            reason: response.statusText,
                            statusCode: response.status,
                            body
                        })
                    }));
                return {
                    response: new (0, _protocolHttp.HttpResponse)({
                        headers: transformedHeaders,
                        reason: response.statusText,
                        statusCode: response.status,
                        body: response.body
                    })
                };
            }),
            (0, _requestTimeout.requestTimeout)(requestTimeoutInMs)
        ];
        if (abortSignal) raceOfPromises.push(new Promise((resolve, reject)=>{
            abortSignal.onabort = ()=>{
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
            };
        }));
        return Promise.race(raceOfPromises);
    }
}

},{"@aws-sdk/protocol-http":"lkWtc","@aws-sdk/querystring-builder":"7hUzg","./request-timeout":"cQtCo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7hUzg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildQueryString", ()=>buildQueryString);
var _utilUriEscape = require("@aws-sdk/util-uri-escape");
function buildQueryString(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()){
        const value = query[key];
        key = (0, _utilUriEscape.escapeUri)(key);
        if (Array.isArray(value)) for(let i = 0, iLen = value.length; i < iLen; i++)parts.push(`${key}=${(0, _utilUriEscape.escapeUri)(value[i])}`);
        else {
            let qsEntry = key;
            if (value || typeof value === "string") qsEntry += `=${(0, _utilUriEscape.escapeUri)(value)}`;
            parts.push(qsEntry);
        }
    }
    return parts.join("&");
}

},{"@aws-sdk/util-uri-escape":"ihZwy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQtCo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "requestTimeout", ()=>requestTimeout);
function requestTimeout(timeoutInMs = 0) {
    return new Promise((resolve, reject)=>{
        if (timeoutInMs) setTimeout(()=>{
            const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
            timeoutError.name = "TimeoutError";
            reject(timeoutError);
        }, timeoutInMs);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gak9T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "streamCollector", ()=>streamCollector);
var _utilBase64 = require("@aws-sdk/util-base64");
const streamCollector = (stream)=>{
    if (typeof Blob === "function" && stream instanceof Blob) return collectBlob(stream);
    return collectStream(stream);
};
async function collectBlob(blob) {
    const base64 = await readToBase64(blob);
    const arrayBuffer = (0, _utilBase64.fromBase64)(base64);
    return new Uint8Array(arrayBuffer);
}
async function collectStream(stream) {
    let res = new Uint8Array(0);
    const reader = stream.getReader();
    let isDone = false;
    while(!isDone){
        const { done , value  } = await reader.read();
        if (value) {
            const prior = res;
            res = new Uint8Array(prior.length + value.length);
            res.set(prior);
            res.set(value, prior.length);
        }
        isDone = done;
    }
    return res;
}
function readToBase64(blob) {
    return new Promise((resolve, reject)=>{
        const reader = new FileReader();
        reader.onloadend = ()=>{
            if (reader.readyState !== 2) return reject(new Error("Reader aborted too early"));
            const result = reader.result ?? "";
            const commaIndex = result.indexOf(",");
            const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
            resolve(result.substring(dataOffset));
        };
        reader.onabort = ()=>reject(new Error("Read aborted"));
        reader.onerror = ()=>reject(reader.error);
        reader.readAsDataURL(blob);
    });
}

},{"@aws-sdk/util-base64":"8pQZq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8pQZq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fromBase64 = require("./fromBase64");
parcelHelpers.exportAll(_fromBase64, exports);
var _toBase64 = require("./toBase64");
parcelHelpers.exportAll(_toBase64, exports);

},{"./fromBase64":"lgSeV","./toBase64":"bgIig","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lgSeV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromBase64", ()=>fromBase64);
var _constantsBrowser = require("./constants.browser");
const fromBase64 = (input)=>{
    let totalByteLength = input.length / 4 * 3;
    if (input.slice(-2) === "==") totalByteLength -= 2;
    else if (input.slice(-1) === "=") totalByteLength--;
    const out = new ArrayBuffer(totalByteLength);
    const dataView = new DataView(out);
    for(let i = 0; i < input.length; i += 4){
        let bits = 0;
        let bitLength = 0;
        for(let j = i, limit = i + 3; j <= limit; j++)if (input[j] !== "=") {
            if (!(input[j] in (0, _constantsBrowser.alphabetByEncoding))) throw new TypeError(`Invalid character ${input[j]} in base64 string.`);
            bits |= (0, _constantsBrowser.alphabetByEncoding)[input[j]] << (limit - j) * (0, _constantsBrowser.bitsPerLetter);
            bitLength += (0, _constantsBrowser.bitsPerLetter);
        } else bits >>= (0, _constantsBrowser.bitsPerLetter);
        const chunkOffset = i / 4 * 3;
        bits >>= bitLength % (0, _constantsBrowser.bitsPerByte);
        const byteLength = Math.floor(bitLength / (0, _constantsBrowser.bitsPerByte));
        for(let k = 0; k < byteLength; k++){
            const offset = (byteLength - k - 1) * (0, _constantsBrowser.bitsPerByte);
            dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);
        }
    }
    return new Uint8Array(out);
};

},{"./constants.browser":"g2IUz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g2IUz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "alphabetByEncoding", ()=>alphabetByEncoding);
parcelHelpers.export(exports, "alphabetByValue", ()=>alphabetByValue);
parcelHelpers.export(exports, "bitsPerLetter", ()=>bitsPerLetter);
parcelHelpers.export(exports, "bitsPerByte", ()=>bitsPerByte);
parcelHelpers.export(exports, "maxLetterValue", ()=>maxLetterValue);
const alphabetByEncoding = {};
const alphabetByValue = new Array(64);
for(let i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++){
    const char = String.fromCharCode(i + start);
    alphabetByEncoding[char] = i;
    alphabetByValue[i] = char;
}
for(let i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++){
    const char = String.fromCharCode(i + start);
    const index = i + 26;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
}
for(let i = 0; i < 10; i++){
    alphabetByEncoding[i.toString(10)] = i + 52;
    const char = i.toString(10);
    const index = i + 52;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
}
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
const bitsPerLetter = 6;
const bitsPerByte = 8;
const maxLetterValue = 63;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgIig":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toBase64", ()=>toBase64);
var _constantsBrowser = require("./constants.browser");
function toBase64(input) {
    let str = "";
    for(let i = 0; i < input.length; i += 3){
        let bits = 0;
        let bitLength = 0;
        for(let j = i, limit = Math.min(i + 3, input.length); j < limit; j++){
            bits |= input[j] << (limit - j - 1) * (0, _constantsBrowser.bitsPerByte);
            bitLength += (0, _constantsBrowser.bitsPerByte);
        }
        const bitClusterCount = Math.ceil(bitLength / (0, _constantsBrowser.bitsPerLetter));
        bits <<= bitClusterCount * (0, _constantsBrowser.bitsPerLetter) - bitLength;
        for(let k = 1; k <= bitClusterCount; k++){
            const offset = (bitClusterCount - k) * (0, _constantsBrowser.bitsPerLetter);
            str += (0, _constantsBrowser.alphabetByValue)[(bits & (0, _constantsBrowser.maxLetterValue) << offset) >> offset];
        }
        str += "==".slice(0, 4 - bitClusterCount);
    }
    return str;
}

},{"./constants.browser":"g2IUz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hS8AF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "blobHasher", ()=>blobHasher);
var _chunkedBlobReader = require("@aws-sdk/chunked-blob-reader");
const blobHasher = async function blobHasher(hashCtor, blob) {
    const hash = new hashCtor();
    await (0, _chunkedBlobReader.blobReader)(blob, (chunk)=>{
        hash.update(chunk);
    });
    return hash.digest();
};

},{"@aws-sdk/chunked-blob-reader":"erRVP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"erRVP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "blobReader", ()=>blobReader);
function blobReader(blob, onChunk, chunkSize = 1048576) {
    return new Promise((resolve, reject)=>{
        const fileReader = new FileReader();
        fileReader.addEventListener("error", reject);
        fileReader.addEventListener("abort", reject);
        const size = blob.size;
        let totalBytesRead = 0;
        function read() {
            if (totalBytesRead >= size) {
                resolve();
                return;
            }
            fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));
        }
        fileReader.addEventListener("load", (event)=>{
            const result = event.target.result;
            onChunk(new Uint8Array(result));
            totalBytesRead += result.byteLength;
            read();
        });
        read();
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1kvFV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _invalidFunction = require("./invalidFunction");
parcelHelpers.exportAll(_invalidFunction, exports);
var _invalidProvider = require("./invalidProvider");
parcelHelpers.exportAll(_invalidProvider, exports);

},{"./invalidFunction":"9hwU4","./invalidProvider":"6lZAH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9hwU4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invalidFunction", ()=>invalidFunction);
const invalidFunction = (message)=>()=>{
        throw new Error(message);
    };

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6lZAH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invalidProvider", ()=>invalidProvider);
const invalidProvider = (message)=>()=>Promise.reject(message);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d6LDZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Md5", ()=>Md5);
var _utilUtf8 = require("@aws-sdk/util-utf8");
var _constants = require("./constants");
class Md5 {
    constructor(){
        this.reset();
    }
    update(sourceData) {
        if (isEmptyData(sourceData)) return;
        else if (this.finished) throw new Error("Attempted to update an already finished hash.");
        const data = convertToBuffer(sourceData);
        let position = 0;
        let { byteLength  } = data;
        this.bytesHashed += byteLength;
        while(byteLength > 0){
            this.buffer.setUint8(this.bufferLength++, data[position++]);
            byteLength--;
            if (this.bufferLength === (0, _constants.BLOCK_SIZE)) {
                this.hashBuffer();
                this.bufferLength = 0;
            }
        }
    }
    async digest() {
        if (!this.finished) {
            const { buffer , bufferLength: undecoratedLength , bytesHashed  } = this;
            const bitsHashed = bytesHashed * 8;
            buffer.setUint8(this.bufferLength++, 128);
            if (undecoratedLength % (0, _constants.BLOCK_SIZE) >= (0, _constants.BLOCK_SIZE) - 8) {
                for(let i = this.bufferLength; i < (0, _constants.BLOCK_SIZE); i++)buffer.setUint8(i, 0);
                this.hashBuffer();
                this.bufferLength = 0;
            }
            for(let i = this.bufferLength; i < (0, _constants.BLOCK_SIZE) - 8; i++)buffer.setUint8(i, 0);
            buffer.setUint32((0, _constants.BLOCK_SIZE) - 8, bitsHashed >>> 0, true);
            buffer.setUint32((0, _constants.BLOCK_SIZE) - 4, Math.floor(bitsHashed / 0x100000000), true);
            this.hashBuffer();
            this.finished = true;
        }
        const out = new DataView(new ArrayBuffer((0, _constants.DIGEST_LENGTH)));
        for(let i = 0; i < 4; i++)out.setUint32(i * 4, this.state[i], true);
        return new Uint8Array(out.buffer, out.byteOffset, out.byteLength);
    }
    hashBuffer() {
        const { buffer , state  } = this;
        let a = state[0], b = state[1], c = state[2], d = state[3];
        a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 0xd76aa478);
        d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 0xe8c7b756);
        c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 0x242070db);
        b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 0xc1bdceee);
        a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 0xf57c0faf);
        d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 0x4787c62a);
        c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 0xa8304613);
        b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 0xfd469501);
        a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 0x698098d8);
        d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 0x8b44f7af);
        c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 0xffff5bb1);
        b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 0x895cd7be);
        a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 0x6b901122);
        d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 0xfd987193);
        c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 0xa679438e);
        b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 0x49b40821);
        a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 0xf61e2562);
        d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 0xc040b340);
        c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 0x265e5a51);
        b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 0xe9b6c7aa);
        a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 0xd62f105d);
        d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 0x02441453);
        c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 0xd8a1e681);
        b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 0xe7d3fbc8);
        a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 0x21e1cde6);
        d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 0xc33707d6);
        c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 0xf4d50d87);
        b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 0x455a14ed);
        a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 0xa9e3e905);
        d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 0xfcefa3f8);
        c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 0x676f02d9);
        b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 0x8d2a4c8a);
        a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 0xfffa3942);
        d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 0x8771f681);
        c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 0x6d9d6122);
        b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 0xfde5380c);
        a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 0xa4beea44);
        d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 0x4bdecfa9);
        c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 0xf6bb4b60);
        b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 0xbebfbc70);
        a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 0x289b7ec6);
        d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 0xeaa127fa);
        c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 0xd4ef3085);
        b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 0x04881d05);
        a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 0xd9d4d039);
        d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 0xe6db99e5);
        c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 0x1fa27cf8);
        b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 0xc4ac5665);
        a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 0xf4292244);
        d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 0x432aff97);
        c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 0xab9423a7);
        b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 0xfc93a039);
        a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 0x655b59c3);
        d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 0x8f0ccc92);
        c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 0xffeff47d);
        b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 0x85845dd1);
        a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 0x6fa87e4f);
        d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 0xfe2ce6e0);
        c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 0xa3014314);
        b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 0x4e0811a1);
        a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 0xf7537e82);
        d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 0xbd3af235);
        c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 0x2ad7d2bb);
        b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 0xeb86d391);
        state[0] = a + state[0] & 0xffffffff;
        state[1] = b + state[1] & 0xffffffff;
        state[2] = c + state[2] & 0xffffffff;
        state[3] = d + state[3] & 0xffffffff;
    }
    reset() {
        this.state = Uint32Array.from((0, _constants.INIT));
        this.buffer = new DataView(new ArrayBuffer((0, _constants.BLOCK_SIZE)));
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
    }
}
function cmn(q, a, b, x, s, t) {
    a = (a + q & 0xffffffff) + (x + t & 0xffffffff) & 0xffffffff;
    return (a << s | a >>> 32 - s) + b & 0xffffffff;
}
function ff(a, b, c, d, x, s, t) {
    return cmn(b & c | ~b & d, a, b, x, s, t);
}
function gg(a, b, c, d, x, s, t) {
    return cmn(b & d | c & ~d, a, b, x, s, t);
}
function hh(a, b, c, d, x, s, t) {
    return cmn(b ^ c ^ d, a, b, x, s, t);
}
function ii(a, b, c, d, x, s, t) {
    return cmn(c ^ (b | ~d), a, b, x, s, t);
}
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
function convertToBuffer(data) {
    if (typeof data === "string") return (0, _utilUtf8.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}

},{"@aws-sdk/util-utf8":"6cVVP","./constants":"gxOw1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gxOw1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BLOCK_SIZE", ()=>BLOCK_SIZE);
parcelHelpers.export(exports, "DIGEST_LENGTH", ()=>DIGEST_LENGTH);
parcelHelpers.export(exports, "INIT", ()=>INIT);
const BLOCK_SIZE = 64;
const DIGEST_LENGTH = 16;
const INIT = [
    0x67452301,
    0xefcdab89,
    0x98badcfe,
    0x10325476
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ddt5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _calculateBodyLength = require("./calculateBodyLength");
parcelHelpers.exportAll(_calculateBodyLength, exports);

},{"./calculateBodyLength":"j6Ih6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j6Ih6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calculateBodyLength", ()=>calculateBodyLength);
const calculateBodyLength = (body)=>{
    if (typeof body === "string") {
        let len = body.length;
        for(let i = len - 1; i >= 0; i--){
            const code = body.charCodeAt(i);
            if (code > 0x7f && code <= 0x7ff) len++;
            else if (code > 0x7ff && code <= 0xffff) len += 2;
            if (code >= 0xdc00 && code <= 0xdfff) i--;
        }
        return len;
    } else if (typeof body.byteLength === "number") return body.byteLength;
    else if (typeof body.size === "number") return body.size;
    throw new Error(`Body Length computation failed for ${body}`);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"igCq1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getAwsChunkedEncodingStream = require("./getAwsChunkedEncodingStream");
parcelHelpers.exportAll(_getAwsChunkedEncodingStream, exports);
var _sdkStreamMixin = require("./sdk-stream-mixin");
parcelHelpers.exportAll(_sdkStreamMixin, exports);

},{"./getAwsChunkedEncodingStream":"5xLNT","./sdk-stream-mixin":"3Sawx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5xLNT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAwsChunkedEncodingStream", ()=>getAwsChunkedEncodingStream);
const getAwsChunkedEncodingStream = (readableStream, options)=>{
    const { base64Encoder , bodyLengthChecker , checksumAlgorithmFn , checksumLocationName , streamHasher  } = options;
    const checksumRequired = base64Encoder !== undefined && bodyLengthChecker !== undefined && checksumAlgorithmFn !== undefined && checksumLocationName !== undefined && streamHasher !== undefined;
    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;
    const reader = readableStream.getReader();
    return new ReadableStream({
        async pull (controller) {
            const { value , done  } = await reader.read();
            if (done) {
                controller.enqueue(`0\r\n`);
                if (checksumRequired) {
                    const checksum = base64Encoder(await digest);
                    controller.enqueue(`${checksumLocationName}:${checksum}\r\n`);
                    controller.enqueue(`\r\n`);
                }
                controller.close();
            } else controller.enqueue(`${(bodyLengthChecker(value) || 0).toString(16)}\r\n${value}\r\n`);
        }
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Sawx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sdkStreamMixin", ()=>sdkStreamMixin);
var _fetchHttpHandler = require("@aws-sdk/fetch-http-handler");
var _utilBase64 = require("@aws-sdk/util-base64");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _utilUtf8 = require("@aws-sdk/util-utf8");
const ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
const sdkStreamMixin = (stream)=>{
    if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {
        const name = stream?.__proto__?.constructor?.name || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
    }
    let transformed = false;
    const transformToByteArray = async ()=>{
        if (transformed) throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        transformed = true;
        return await (0, _fetchHttpHandler.streamCollector)(stream);
    };
    const blobToWebStream = (blob)=>{
        if (typeof blob.stream !== "function") throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        return blob.stream();
    };
    return Object.assign(stream, {
        transformToByteArray: transformToByteArray,
        transformToString: async (encoding)=>{
            const buf = await transformToByteArray();
            if (encoding === "base64") return (0, _utilBase64.toBase64)(buf);
            else if (encoding === "hex") return (0, _utilHexEncoding.toHex)(buf);
            else if (encoding === undefined || encoding === "utf8" || encoding === "utf-8") return (0, _utilUtf8.toUtf8)(buf);
            else if (typeof TextDecoder === "function") return new TextDecoder(encoding).decode(buf);
            else throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
        },
        transformToWebStream: ()=>{
            if (transformed) throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
            transformed = true;
            if (isBlobInstance(stream)) return blobToWebStream(stream);
            else if (isReadableStreamInstance(stream)) return stream;
            else throw new Error(`Cannot transform payload to web stream, got ${stream}`);
        }
    });
};
const isBlobInstance = (stream)=>typeof Blob === "function" && stream instanceof Blob;
const isReadableStreamInstance = (stream)=>typeof ReadableStream === "function" && stream instanceof ReadableStream;

},{"@aws-sdk/fetch-http-handler":"etWgp","@aws-sdk/util-base64":"8pQZq","@aws-sdk/util-hex-encoding":"d6D69","@aws-sdk/util-utf8":"6cVVP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"duqKe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultUserAgent", ()=>defaultUserAgent);
var _bowser = require("bowser");
var _bowserDefault = parcelHelpers.interopDefault(_bowser);
const defaultUserAgent = ({ serviceId , clientVersion  })=>async ()=>{
        const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent ? (0, _bowserDefault.default).parse(window.navigator.userAgent) : undefined;
        const sections = [
            [
                "aws-sdk-js",
                clientVersion
            ],
            [
                "ua",
                "2.0"
            ],
            [
                `os/${parsedUA?.os?.name || "other"}`,
                parsedUA?.os?.version
            ],
            [
                "lang/js"
            ],
            [
                "md/browser",
                `${parsedUA?.browser?.name ?? "unknown"}_${parsedUA?.browser?.version ?? "unknown"}`
            ]
        ];
        if (serviceId) sections.push([
            `api/${serviceId}`,
            clientVersion
        ]);
        return sections;
    };

},{"bowser":"5jYCf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5jYCf":[function(require,module,exports) {
!function(e, t) {
    module.exports = t();
}(this, function() {
    return function(e) {
        var t = {};
        function r(n) {
            if (t[n]) return t[n].exports;
            var i = t[n] = {
                i: n,
                l: !1,
                exports: {}
            };
            return e[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
        }
        return r.m = e, r.c = t, r.d = function(e, t, n) {
            r.o(e, t) || Object.defineProperty(e, t, {
                enumerable: !0,
                get: n
            });
        }, r.r = function(e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            });
        }, r.t = function(e, t) {
            if (1 & t && (e = r(e)), 8 & t) return e;
            if (4 & t && "object" == typeof e && e && e.__esModule) return e;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e) for(var i in e)r.d(n, i, (function(t) {
                return e[t];
            }).bind(null, i));
            return n;
        }, r.n = function(e) {
            var t = e && e.__esModule ? function() {
                return e.default;
            } : function() {
                return e;
            };
            return r.d(t, "a", t), t;
        }, r.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
        }, r.p = "", r(r.s = 90);
    }({
        17: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n = r(18), i = function() {
                function e() {}
                return e.getFirstMatch = function(e, t) {
                    var r = t.match(e);
                    return r && r.length > 0 && r[1] || "";
                }, e.getSecondMatch = function(e, t) {
                    var r = t.match(e);
                    return r && r.length > 1 && r[2] || "";
                }, e.matchAndReturnConst = function(e, t, r) {
                    if (e.test(t)) return r;
                }, e.getWindowsVersionName = function(e) {
                    switch(e){
                        case "NT":
                            return "NT";
                        case "XP":
                            return "XP";
                        case "NT 5.0":
                            return "2000";
                        case "NT 5.1":
                            return "XP";
                        case "NT 5.2":
                            return "2003";
                        case "NT 6.0":
                            return "Vista";
                        case "NT 6.1":
                            return "7";
                        case "NT 6.2":
                            return "8";
                        case "NT 6.3":
                            return "8.1";
                        case "NT 10.0":
                            return "10";
                        default:
                            return;
                    }
                }, e.getMacOSVersionName = function(e) {
                    var t = e.split(".").splice(0, 2).map(function(e) {
                        return parseInt(e, 10) || 0;
                    });
                    if (t.push(0), 10 === t[0]) switch(t[1]){
                        case 5:
                            return "Leopard";
                        case 6:
                            return "Snow Leopard";
                        case 7:
                            return "Lion";
                        case 8:
                            return "Mountain Lion";
                        case 9:
                            return "Mavericks";
                        case 10:
                            return "Yosemite";
                        case 11:
                            return "El Capitan";
                        case 12:
                            return "Sierra";
                        case 13:
                            return "High Sierra";
                        case 14:
                            return "Mojave";
                        case 15:
                            return "Catalina";
                        default:
                            return;
                    }
                }, e.getAndroidVersionName = function(e) {
                    var t = e.split(".").splice(0, 2).map(function(e) {
                        return parseInt(e, 10) || 0;
                    });
                    if (t.push(0), !(1 === t[0] && t[1] < 5)) return 1 === t[0] && t[1] < 6 ? "Cupcake" : 1 === t[0] && t[1] >= 6 ? "Donut" : 2 === t[0] && t[1] < 2 ? "Eclair" : 2 === t[0] && 2 === t[1] ? "Froyo" : 2 === t[0] && t[1] > 2 ? "Gingerbread" : 3 === t[0] ? "Honeycomb" : 4 === t[0] && t[1] < 1 ? "Ice Cream Sandwich" : 4 === t[0] && t[1] < 4 ? "Jelly Bean" : 4 === t[0] && t[1] >= 4 ? "KitKat" : 5 === t[0] ? "Lollipop" : 6 === t[0] ? "Marshmallow" : 7 === t[0] ? "Nougat" : 8 === t[0] ? "Oreo" : 9 === t[0] ? "Pie" : void 0;
                }, e.getVersionPrecision = function(e) {
                    return e.split(".").length;
                }, e.compareVersions = function(t, r, n) {
                    void 0 === n && (n = !1);
                    var i = e.getVersionPrecision(t), s = e.getVersionPrecision(r), a = Math.max(i, s), o = 0, u = e.map([
                        t,
                        r
                    ], function(t) {
                        var r = a - e.getVersionPrecision(t), n = t + new Array(r + 1).join(".0");
                        return e.map(n.split("."), function(e) {
                            return new Array(20 - e.length).join("0") + e;
                        }).reverse();
                    });
                    for(n && (o = a - Math.min(i, s)), a -= 1; a >= o;){
                        if (u[0][a] > u[1][a]) return 1;
                        if (u[0][a] === u[1][a]) {
                            if (a === o) return 0;
                            a -= 1;
                        } else if (u[0][a] < u[1][a]) return -1;
                    }
                }, e.map = function(e, t) {
                    var r, n = [];
                    if (Array.prototype.map) return Array.prototype.map.call(e, t);
                    for(r = 0; r < e.length; r += 1)n.push(t(e[r]));
                    return n;
                }, e.find = function(e, t) {
                    var r, n;
                    if (Array.prototype.find) return Array.prototype.find.call(e, t);
                    for(r = 0, n = e.length; r < n; r += 1){
                        var i = e[r];
                        if (t(i, r)) return i;
                    }
                }, e.assign = function(e) {
                    for(var t, r, n = e, i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), a = 1; a < i; a++)s[a - 1] = arguments[a];
                    if (Object.assign) return Object.assign.apply(Object, [
                        e
                    ].concat(s));
                    var o = function() {
                        var e = s[t];
                        "object" == typeof e && null !== e && Object.keys(e).forEach(function(t) {
                            n[t] = e[t];
                        });
                    };
                    for(t = 0, r = s.length; t < r; t += 1)o();
                    return e;
                }, e.getBrowserAlias = function(e) {
                    return n.BROWSER_ALIASES_MAP[e];
                }, e.getBrowserTypeByAlias = function(e) {
                    return n.BROWSER_MAP[e] || "";
                }, e;
            }();
            t.default = i, e.exports = t.default;
        },
        18: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0;
            t.BROWSER_ALIASES_MAP = {
                "Amazon Silk": "amazon_silk",
                "Android Browser": "android",
                Bada: "bada",
                BlackBerry: "blackberry",
                Chrome: "chrome",
                Chromium: "chromium",
                Electron: "electron",
                Epiphany: "epiphany",
                Firefox: "firefox",
                Focus: "focus",
                Generic: "generic",
                "Google Search": "google_search",
                Googlebot: "googlebot",
                "Internet Explorer": "ie",
                "K-Meleon": "k_meleon",
                Maxthon: "maxthon",
                "Microsoft Edge": "edge",
                "MZ Browser": "mz",
                "NAVER Whale Browser": "naver",
                Opera: "opera",
                "Opera Coast": "opera_coast",
                PhantomJS: "phantomjs",
                Puffin: "puffin",
                QupZilla: "qupzilla",
                QQ: "qq",
                QQLite: "qqlite",
                Safari: "safari",
                Sailfish: "sailfish",
                "Samsung Internet for Android": "samsung_internet",
                SeaMonkey: "seamonkey",
                Sleipnir: "sleipnir",
                Swing: "swing",
                Tizen: "tizen",
                "UC Browser": "uc",
                Vivaldi: "vivaldi",
                "WebOS Browser": "webos",
                WeChat: "wechat",
                "Yandex Browser": "yandex",
                Roku: "roku"
            };
            t.BROWSER_MAP = {
                amazon_silk: "Amazon Silk",
                android: "Android Browser",
                bada: "Bada",
                blackberry: "BlackBerry",
                chrome: "Chrome",
                chromium: "Chromium",
                electron: "Electron",
                epiphany: "Epiphany",
                firefox: "Firefox",
                focus: "Focus",
                generic: "Generic",
                googlebot: "Googlebot",
                google_search: "Google Search",
                ie: "Internet Explorer",
                k_meleon: "K-Meleon",
                maxthon: "Maxthon",
                edge: "Microsoft Edge",
                mz: "MZ Browser",
                naver: "NAVER Whale Browser",
                opera: "Opera",
                opera_coast: "Opera Coast",
                phantomjs: "PhantomJS",
                puffin: "Puffin",
                qupzilla: "QupZilla",
                qq: "QQ Browser",
                qqlite: "QQ Browser Lite",
                safari: "Safari",
                sailfish: "Sailfish",
                samsung_internet: "Samsung Internet for Android",
                seamonkey: "SeaMonkey",
                sleipnir: "Sleipnir",
                swing: "Swing",
                tizen: "Tizen",
                uc: "UC Browser",
                vivaldi: "Vivaldi",
                webos: "WebOS Browser",
                wechat: "WeChat",
                yandex: "Yandex Browser"
            };
            t.PLATFORMS_MAP = {
                tablet: "tablet",
                mobile: "mobile",
                desktop: "desktop",
                tv: "tv"
            };
            t.OS_MAP = {
                WindowsPhone: "Windows Phone",
                Windows: "Windows",
                MacOS: "macOS",
                iOS: "iOS",
                Android: "Android",
                WebOS: "WebOS",
                BlackBerry: "BlackBerry",
                Bada: "Bada",
                Tizen: "Tizen",
                Linux: "Linux",
                ChromeOS: "Chrome OS",
                PlayStation4: "PlayStation 4",
                Roku: "Roku"
            };
            t.ENGINE_MAP = {
                EdgeHTML: "EdgeHTML",
                Blink: "Blink",
                Trident: "Trident",
                Presto: "Presto",
                Gecko: "Gecko",
                WebKit: "WebKit"
            };
        },
        90: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(91)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            function a(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                }
            }
            var o = function() {
                function e() {}
                var t, r, n;
                return e.getParser = function(e, t) {
                    if (void 0 === t && (t = !1), "string" != typeof e) throw new Error("UserAgent should be a string");
                    return new i.default(e, t);
                }, e.parse = function(e) {
                    return new i.default(e).getResult();
                }, t = e, n = [
                    {
                        key: "BROWSER_MAP",
                        get: function() {
                            return s.BROWSER_MAP;
                        }
                    },
                    {
                        key: "ENGINE_MAP",
                        get: function() {
                            return s.ENGINE_MAP;
                        }
                    },
                    {
                        key: "OS_MAP",
                        get: function() {
                            return s.OS_MAP;
                        }
                    },
                    {
                        key: "PLATFORMS_MAP",
                        get: function() {
                            return s.PLATFORMS_MAP;
                        }
                    }
                ], r = null, n && a(t, n), e;
            }();
            t.default = o, e.exports = t.default;
        },
        91: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n = u(r(92)), i = u(r(93)), s = u(r(94)), a = u(r(95)), o = u(r(17));
            function u(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            }
            var d = function() {
                function e(e, t) {
                    if (void 0 === t && (t = !1), null == e || "" === e) throw new Error("UserAgent parameter can't be empty");
                    this._ua = e, this.parsedResult = {}, !0 !== t && this.parse();
                }
                var t = e.prototype;
                return t.getUA = function() {
                    return this._ua;
                }, t.test = function(e) {
                    return e.test(this._ua);
                }, t.parseBrowser = function() {
                    var e = this;
                    this.parsedResult.browser = {};
                    var t = o.default.find(n.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.browser = t.describe(this.getUA())), this.parsedResult.browser;
                }, t.getBrowser = function() {
                    return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
                }, t.getBrowserName = function(e) {
                    return e ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
                }, t.getBrowserVersion = function() {
                    return this.getBrowser().version;
                }, t.getOS = function() {
                    return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
                }, t.parseOS = function() {
                    var e = this;
                    this.parsedResult.os = {};
                    var t = o.default.find(i.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.os = t.describe(this.getUA())), this.parsedResult.os;
                }, t.getOSName = function(e) {
                    var t = this.getOS().name;
                    return e ? String(t).toLowerCase() || "" : t || "";
                }, t.getOSVersion = function() {
                    return this.getOS().version;
                }, t.getPlatform = function() {
                    return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
                }, t.getPlatformType = function(e) {
                    void 0 === e && (e = !1);
                    var t = this.getPlatform().type;
                    return e ? String(t).toLowerCase() || "" : t || "";
                }, t.parsePlatform = function() {
                    var e = this;
                    this.parsedResult.platform = {};
                    var t = o.default.find(s.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.platform = t.describe(this.getUA())), this.parsedResult.platform;
                }, t.getEngine = function() {
                    return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
                }, t.getEngineName = function(e) {
                    return e ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
                }, t.parseEngine = function() {
                    var e = this;
                    this.parsedResult.engine = {};
                    var t = o.default.find(a.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.engine = t.describe(this.getUA())), this.parsedResult.engine;
                }, t.parse = function() {
                    return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
                }, t.getResult = function() {
                    return o.default.assign({}, this.parsedResult);
                }, t.satisfies = function(e) {
                    var t = this, r = {}, n = 0, i = {}, s = 0;
                    if (Object.keys(e).forEach(function(t) {
                        var a = e[t];
                        "string" == typeof a ? (i[t] = a, s += 1) : "object" == typeof a && (r[t] = a, n += 1);
                    }), n > 0) {
                        var a = Object.keys(r), u = o.default.find(a, function(e) {
                            return t.isOS(e);
                        });
                        if (u) {
                            var d = this.satisfies(r[u]);
                            if (void 0 !== d) return d;
                        }
                        var c = o.default.find(a, function(e) {
                            return t.isPlatform(e);
                        });
                        if (c) {
                            var f = this.satisfies(r[c]);
                            if (void 0 !== f) return f;
                        }
                    }
                    if (s > 0) {
                        var l = Object.keys(i), h = o.default.find(l, function(e) {
                            return t.isBrowser(e, !0);
                        });
                        if (void 0 !== h) return this.compareVersion(i[h]);
                    }
                }, t.isBrowser = function(e, t) {
                    void 0 === t && (t = !1);
                    var r = this.getBrowserName().toLowerCase(), n = e.toLowerCase(), i = o.default.getBrowserTypeByAlias(n);
                    return t && i && (n = i.toLowerCase()), n === r;
                }, t.compareVersion = function(e) {
                    var t = [
                        0
                    ], r = e, n = !1, i = this.getBrowserVersion();
                    if ("string" == typeof i) return ">" === e[0] || "<" === e[0] ? (r = e.substr(1), "=" === e[1] ? (n = !0, r = e.substr(2)) : t = [], ">" === e[0] ? t.push(1) : t.push(-1)) : "=" === e[0] ? r = e.substr(1) : "~" === e[0] && (n = !0, r = e.substr(1)), t.indexOf(o.default.compareVersions(i, r, n)) > -1;
                }, t.isOS = function(e) {
                    return this.getOSName(!0) === String(e).toLowerCase();
                }, t.isPlatform = function(e) {
                    return this.getPlatformType(!0) === String(e).toLowerCase();
                }, t.isEngine = function(e) {
                    return this.getEngineName(!0) === String(e).toLowerCase();
                }, t.is = function(e, t) {
                    return void 0 === t && (t = !1), this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e);
                }, t.some = function(e) {
                    var t = this;
                    return void 0 === e && (e = []), e.some(function(e) {
                        return t.is(e);
                    });
                }, e;
            }();
            t.default = d, e.exports = t.default;
        },
        92: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            };
            var s = /version\/(\d+(\.?_?\d+)+)/i, a = [
                {
                    test: [
                        /googlebot/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Googlebot"
                        }, r = i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opera/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opr\/|opios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera"
                        }, r = i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /SamsungBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Samsung Internet for Android"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /Whale/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "NAVER Whale Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /MZBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "MZ Browser"
                        }, r = i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /focus/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Focus"
                        }, r = i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /swing/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Swing"
                        }, r = i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /coast/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera Coast"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opt\/\d+(?:.?_?\d+)+/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera Touch"
                        }, r = i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /yabrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Yandex Browser"
                        }, r = i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /ucbrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "UC Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /Maxthon|mxios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Maxthon"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /epiphany/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Epiphany"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /puffin/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Puffin"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /sleipnir/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Sleipnir"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /k-meleon/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "K-Meleon"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /micromessenger/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "WeChat"
                        }, r = i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /qqbrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: /qqbrowserlite/i.test(e) ? "QQ Browser Lite" : "QQ Browser"
                        }, r = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /msie|trident/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Internet Explorer"
                        }, r = i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /\sedg\//i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Microsoft Edge"
                        }, r = i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /edg([ea]|ios)/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Microsoft Edge"
                        }, r = i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /vivaldi/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Vivaldi"
                        }, r = i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /seamonkey/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "SeaMonkey"
                        }, r = i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /sailfish/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Sailfish"
                        }, r = i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /silk/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Amazon Silk"
                        }, r = i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /phantom/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "PhantomJS"
                        }, r = i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /slimerjs/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "SlimerJS"
                        }, r = i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /blackberry|\bbb\d+/i,
                        /rim\stablet/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "BlackBerry"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /(web|hpw)[o0]s/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "WebOS Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /bada/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Bada"
                        }, r = i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /tizen/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Tizen"
                        }, r = i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /qupzilla/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "QupZilla"
                        }, r = i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /firefox|iceweasel|fxios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Firefox"
                        }, r = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /electron/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Electron"
                        }, r = i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /MiuiBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Miui"
                        }, r = i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /chromium/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Chromium"
                        }, r = i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /chrome|crios|crmo/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Chrome"
                        }, r = i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /GSA/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Google Search"
                        }, r = i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        var t = !e.test(/like android/i), r = e.test(/android/i);
                        return t && r;
                    },
                    describe: function(e) {
                        var t = {
                            name: "Android Browser"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /playstation 4/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "PlayStation 4"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /safari|applewebkit/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Safari"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /.*/i
                    ],
                    describe: function(e) {
                        var t = -1 !== e.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
                        return {
                            name: i.default.getFirstMatch(t, e),
                            version: i.default.getSecondMatch(t, e)
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        93: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: [
                        /Roku\/DVP/
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e);
                        return {
                            name: s.OS_MAP.Roku,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /windows phone/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.WindowsPhone,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /windows /i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e), r = i.default.getWindowsVersionName(t);
                        return {
                            name: s.OS_MAP.Windows,
                            version: t,
                            versionName: r
                        };
                    }
                },
                {
                    test: [
                        /Macintosh(.*?) FxiOS(.*?)\//
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.OS_MAP.iOS
                        }, r = i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /macintosh/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e).replace(/[_\s]/g, "."), r = i.default.getMacOSVersionName(t), n = {
                            name: s.OS_MAP.MacOS,
                            version: t
                        };
                        return r && (n.versionName = r), n;
                    }
                },
                {
                    test: [
                        /(ipod|iphone|ipad)/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e).replace(/[_\s]/g, ".");
                        return {
                            name: s.OS_MAP.iOS,
                            version: t
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = !e.test(/like android/i), r = e.test(/android/i);
                        return t && r;
                    },
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e), r = i.default.getAndroidVersionName(t), n = {
                            name: s.OS_MAP.Android,
                            version: t
                        };
                        return r && (n.versionName = r), n;
                    }
                },
                {
                    test: [
                        /(web|hpw)[o0]s/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e), r = {
                            name: s.OS_MAP.WebOS
                        };
                        return t && t.length && (r.version = t), r;
                    }
                },
                {
                    test: [
                        /blackberry|\bbb\d+/i,
                        /rim\stablet/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e) || i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e) || i.default.getFirstMatch(/\bbb(\d+)/i, e);
                        return {
                            name: s.OS_MAP.BlackBerry,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /bada/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.Bada,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /tizen/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.Tizen,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /linux/i
                    ],
                    describe: function() {
                        return {
                            name: s.OS_MAP.Linux
                        };
                    }
                },
                {
                    test: [
                        /CrOS/
                    ],
                    describe: function() {
                        return {
                            name: s.OS_MAP.ChromeOS
                        };
                    }
                },
                {
                    test: [
                        /PlayStation 4/
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.PlayStation4,
                            version: t
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        94: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: [
                        /googlebot/i
                    ],
                    describe: function() {
                        return {
                            type: "bot",
                            vendor: "Google"
                        };
                    }
                },
                {
                    test: [
                        /huawei/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(can-l01)/i, e) && "Nova", r = {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Huawei"
                        };
                        return t && (r.model = t), r;
                    }
                },
                {
                    test: [
                        /nexus\s*(?:7|8|9|10).*/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Nexus"
                        };
                    }
                },
                {
                    test: [
                        /ipad/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Apple",
                            model: "iPad"
                        };
                    }
                },
                {
                    test: [
                        /Macintosh(.*?) FxiOS(.*?)\//
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Apple",
                            model: "iPad"
                        };
                    }
                },
                {
                    test: [
                        /kftt build/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Amazon",
                            model: "Kindle Fire HD 7"
                        };
                    }
                },
                {
                    test: [
                        /silk/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Amazon"
                        };
                    }
                },
                {
                    test: [
                        /tablet(?! pc)/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = e.test(/ipod|iphone/i), r = e.test(/like (ipod|iphone)/i);
                        return t && !r;
                    },
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(ipod|iphone)/i, e);
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Apple",
                            model: t
                        };
                    }
                },
                {
                    test: [
                        /nexus\s*[0-6].*/i,
                        /galaxy nexus/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Nexus"
                        };
                    }
                },
                {
                    test: [
                        /[^-]mobi/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "blackberry" === e.getBrowserName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "BlackBerry"
                        };
                    }
                },
                {
                    test: function(e) {
                        return "bada" === e.getBrowserName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "windows phone" === e.getBrowserName();
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Microsoft"
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = Number(String(e.getOSVersion()).split(".")[0]);
                        return "android" === e.getOSName(!0) && t >= 3;
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet
                        };
                    }
                },
                {
                    test: function(e) {
                        return "android" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "macos" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop,
                            vendor: "Apple"
                        };
                    }
                },
                {
                    test: function(e) {
                        return "windows" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop
                        };
                    }
                },
                {
                    test: function(e) {
                        return "linux" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop
                        };
                    }
                },
                {
                    test: function(e) {
                        return "playstation 4" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tv
                        };
                    }
                },
                {
                    test: function(e) {
                        return "roku" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tv
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        95: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: function(e) {
                        return "microsoft edge" === e.getBrowserName(!0);
                    },
                    describe: function(e) {
                        if (/\sedg\//i.test(e)) return {
                            name: s.ENGINE_MAP.Blink
                        };
                        var t = i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e);
                        return {
                            name: s.ENGINE_MAP.EdgeHTML,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /trident/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Trident
                        }, r = i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        return e.test(/presto/i);
                    },
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Presto
                        }, r = i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        var t = e.test(/gecko/i), r = e.test(/like gecko/i);
                        return t && !r;
                    },
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Gecko
                        }, r = i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /(apple)?webkit\/537\.36/i
                    ],
                    describe: function() {
                        return {
                            name: s.ENGINE_MAP.Blink
                        };
                    }
                },
                {
                    test: [
                        /(apple)?webkit/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.WebKit
                        }, r = i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        }
    });
});

},{}],"60D0X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRuntimeConfig", ()=>getRuntimeConfig);
var _signatureV4MultiRegion = require("@aws-sdk/signature-v4-multi-region");
var _smithyClient = require("@aws-sdk/smithy-client");
var _urlParser = require("@aws-sdk/url-parser");
var _utilBase64 = require("@aws-sdk/util-base64");
var _utilUtf8 = require("@aws-sdk/util-utf8");
var _endpointResolver = require("./endpoint/endpointResolver");
const getRuntimeConfig = (config)=>({
        apiVersion: "2006-03-01",
        base64Decoder: config?.base64Decoder ?? (0, _utilBase64.fromBase64),
        base64Encoder: config?.base64Encoder ?? (0, _utilBase64.toBase64),
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? (0, _endpointResolver.defaultEndpointResolver),
        logger: config?.logger ?? new (0, _smithyClient.NoOpLogger)(),
        serviceId: config?.serviceId ?? "S3",
        signerConstructor: config?.signerConstructor ?? (0, _signatureV4MultiRegion.SignatureV4MultiRegion),
        signingEscapePath: config?.signingEscapePath ?? false,
        urlParser: config?.urlParser ?? (0, _urlParser.parseUrl),
        useArnRegion: config?.useArnRegion ?? false,
        utf8Decoder: config?.utf8Decoder ?? (0, _utilUtf8.fromUtf8),
        utf8Encoder: config?.utf8Encoder ?? (0, _utilUtf8.toUtf8)
    });

},{"@aws-sdk/signature-v4-multi-region":"h2QSP","@aws-sdk/smithy-client":"ats0l","@aws-sdk/url-parser":"7tZsl","@aws-sdk/util-base64":"8pQZq","@aws-sdk/util-utf8":"6cVVP","./endpoint/endpointResolver":"b2ROr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2QSP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _signatureV4MultiRegion = require("./SignatureV4MultiRegion");
parcelHelpers.exportAll(_signatureV4MultiRegion, exports);

},{"./SignatureV4MultiRegion":"jLwlj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jLwlj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SignatureV4MultiRegion", ()=>SignatureV4MultiRegion);
var _signatureV4 = require("@aws-sdk/signature-v4");
class SignatureV4MultiRegion {
    constructor(options){
        this.sigv4Signer = new (0, _signatureV4.SignatureV4)(options);
        this.signerOptions = options;
    }
    async sign(requestToSign, options = {}) {
        if (options.signingRegion === "*") {
            if (this.signerOptions.runtime !== "node") throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
            return this.getSigv4aSigner().sign(requestToSign, options);
        }
        return this.sigv4Signer.sign(requestToSign, options);
    }
    async presign(originalRequest, options = {}) {
        if (options.signingRegion === "*") {
            if (this.signerOptions.runtime !== "node") throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
            return this.getSigv4aSigner().presign(originalRequest, options);
        }
        return this.sigv4Signer.presign(originalRequest, options);
    }
    getSigv4aSigner() {
        if (!this.sigv4aSigner) {
            let CrtSignerV4;
            try {
                CrtSignerV4 = (0, require("efb056564c80fbc2").CrtSignerV4);
                if (typeof CrtSignerV4 !== "function") throw new Error();
            } catch (e) {
                e.message = `${e.message}\nPlease check if you have installed "@aws-sdk/signature-v4-crt" package explicitly. \n` + "For more information please go to " + "https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt";
                throw e;
            }
            this.sigv4aSigner = new CrtSignerV4({
                ...this.signerOptions,
                signingAlgorithm: 1
            });
        }
        return this.sigv4aSigner;
    }
}

},{"@aws-sdk/signature-v4":"6hvul","efb056564c80fbc2":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"b2ROr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultEndpointResolver", ()=>defaultEndpointResolver);
var _utilEndpoints = require("@aws-sdk/util-endpoints");
var _ruleset = require("./ruleset");
const defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, _utilEndpoints.resolveEndpoint)((0, _ruleset.ruleSet), {
        endpointParams: endpointParams,
        logger: context.logger
    });
};

},{"@aws-sdk/util-endpoints":"hUX6q","./ruleset":"9yY0k","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9yY0k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ruleSet", ()=>ruleSet);
const bV = "required", bW = "type", bX = "rules", bY = "conditions", bZ = "fn", ca = "argv", cb = "ref", cc = "assign", cd = "url", ce = "properties", cf = "authSchemes", cg = "disableDoubleEncoding", ch = "signingName", ci = "signingRegion", cj = "headers";
const a = false, b = true, c = "tree", d = "isSet", e = "substring", f = "hardwareType", g = "regionPrefix", h = "abbaSuffix", i = "outpostId", j = "aws.partition", k = "stringEquals", l = "isValidHostLabel", m = "not", n = "error", o = "parseURL", p = "s3-outposts", q = "endpoint", r = "booleanEquals", s = "aws.parseArn", t = "s3", u = "aws.isVirtualHostableS3Bucket", v = "getAttr", w = "name", x = "Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate", y = "https://{Bucket}.s3.{partitionResult#dnsSuffix}", z = "bucketArn", A = "arnType", B = "", C = "s3-object-lambda", D = "accesspoint", E = "accessPointName", F = "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}", G = "mrapPartition", H = "outpostType", I = "arnPrefix", J = "{url#scheme}://{url#authority}{url#path}", K = "https://s3.{partitionResult#dnsSuffix}", L = {
    [bV]: false,
    [bW]: "String"
}, M = {
    [bV]: true,
    "default": false,
    [bW]: "Boolean"
}, N = {
    [bV]: false,
    [bW]: "Boolean"
}, O = {
    [bZ]: d,
    [ca]: [
        {
            [cb]: "Bucket"
        }
    ]
}, P = {
    [cb]: "Bucket"
}, Q = {
    [cb]: f
}, R = {
    [bY]: [
        {
            [bZ]: m,
            [ca]: [
                {
                    [bZ]: d,
                    [ca]: [
                        {
                            [cb]: "Endpoint"
                        }
                    ]
                }
            ]
        }
    ],
    [n]: "Expected a endpoint to be specified but no endpoint was found",
    [bW]: n
}, S = {
    [bZ]: m,
    [ca]: [
        {
            [bZ]: d,
            [ca]: [
                {
                    [cb]: "Endpoint"
                }
            ]
        }
    ]
}, T = {
    [bZ]: d,
    [ca]: [
        {
            [cb]: "Endpoint"
        }
    ]
}, U = {
    [bZ]: o,
    [ca]: [
        {
            [cb]: "Endpoint"
        }
    ],
    [cc]: "url"
}, V = {
    [cf]: [
        {
            [cg]: true,
            [w]: "sigv4",
            [ch]: p,
            [ci]: "{Region}"
        }
    ]
}, W = {}, X = {
    [cb]: "ForcePathStyle"
}, Y = {
    [bY]: [
        {
            [bZ]: "uriEncode",
            [ca]: [
                P
            ],
            [cc]: "uri_encoded_bucket"
        }
    ],
    [bW]: c,
    [bX]: [
        {
            [bY]: [
                {
                    [bZ]: r,
                    [ca]: [
                        {
                            [cb]: "UseDualStack"
                        },
                        true
                    ]
                },
                T
            ],
            [n]: "Cannot set dual-stack in combination with a custom endpoint.",
            [bW]: n
        },
        {
            [bW]: c,
            [bX]: [
                {
                    [bY]: [
                        {
                            [bZ]: j,
                            [ca]: [
                                {
                                    [cb]: "Region"
                                }
                            ],
                            [cc]: "partitionResult"
                        }
                    ],
                    [bW]: c,
                    [bX]: [
                        {
                            [bW]: c,
                            [bX]: [
                                {
                                    [bY]: [
                                        {
                                            [bZ]: r,
                                            [ca]: [
                                                {
                                                    [cb]: "Accelerate"
                                                },
                                                false
                                            ]
                                        }
                                    ],
                                    [bW]: c,
                                    [bX]: [
                                        {
                                            [bW]: c,
                                            [bX]: [
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [q]: {
                                                                [cd]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                [ce]: {
                                                                    [cf]: [
                                                                        {
                                                                            [cg]: true,
                                                                            [w]: "sigv4",
                                                                            [ch]: t,
                                                                            [ci]: "{Region}"
                                                                        }
                                                                    ]
                                                                },
                                                                [cj]: {}
                                                            },
                                                            [bW]: q
                                                        }
                                                    ]
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                false
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        T,
                                                        U,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        T,
                                                        U,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        T,
                                                        U,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [q]: {
                                                                [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                [ce]: {
                                                                    [cf]: [
                                                                        {
                                                                            [cg]: true,
                                                                            [w]: "sigv4",
                                                                            [ch]: t,
                                                                            [ci]: "{Region}"
                                                                        }
                                                                    ]
                                                                },
                                                                [cj]: {}
                                                            },
                                                            [bW]: q
                                                        }
                                                    ]
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        T,
                                                        U,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                false
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [q]: {
                                                                [cd]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                [ce]: {
                                                                    [cf]: [
                                                                        {
                                                                            [cg]: true,
                                                                            [w]: "sigv4",
                                                                            [ch]: t,
                                                                            [ci]: "{Region}"
                                                                        }
                                                                    ]
                                                                },
                                                                [cj]: {}
                                                            },
                                                            [bW]: q
                                                        }
                                                    ]
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                false
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [q]: {
                                                                [cd]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                [ce]: {
                                                                    [cf]: [
                                                                        {
                                                                            [cg]: true,
                                                                            [w]: "sigv4",
                                                                            [ch]: t,
                                                                            [ci]: "{Region}"
                                                                        }
                                                                    ]
                                                                },
                                                                [cj]: {}
                                                            },
                                                            [bW]: q
                                                        }
                                                    ]
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                false
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        T,
                                                        U,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        T,
                                                        U,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        T,
                                                        U,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [bY]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "us-east-1"
                                                                    ]
                                                                }
                                                            ],
                                                            [q]: {
                                                                [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                [ce]: {
                                                                    [cf]: [
                                                                        {
                                                                            [cg]: true,
                                                                            [w]: "sigv4",
                                                                            [ch]: t,
                                                                            [ci]: "{Region}"
                                                                        }
                                                                    ]
                                                                },
                                                                [cj]: {}
                                                            },
                                                            [bW]: q
                                                        },
                                                        {
                                                            [q]: {
                                                                [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                                [ce]: {
                                                                    [cf]: [
                                                                        {
                                                                            [cg]: true,
                                                                            [w]: "sigv4",
                                                                            [ch]: t,
                                                                            [ci]: "{Region}"
                                                                        }
                                                                    ]
                                                                },
                                                                [cj]: {}
                                                            },
                                                            [bW]: q
                                                        }
                                                    ]
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        T,
                                                        U,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                false
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "Region"
                                                                },
                                                                "aws-global"
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "us-east-1"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [bY]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "us-east-1"
                                                                    ]
                                                                }
                                                            ],
                                                            [q]: {
                                                                [cd]: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                [ce]: {
                                                                    [cf]: [
                                                                        {
                                                                            [cg]: true,
                                                                            [w]: "sigv4",
                                                                            [ch]: t,
                                                                            [ci]: "{Region}"
                                                                        }
                                                                    ]
                                                                },
                                                                [cj]: {}
                                                            },
                                                            [bW]: q
                                                        },
                                                        {
                                                            [q]: {
                                                                [cd]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                                [ce]: {
                                                                    [cf]: [
                                                                        {
                                                                            [cg]: true,
                                                                            [w]: "sigv4",
                                                                            [ch]: t,
                                                                            [ci]: "{Region}"
                                                                        }
                                                                    ]
                                                                },
                                                                [cj]: {}
                                                            },
                                                            [bW]: q
                                                        }
                                                    ]
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseDualStack"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        S,
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseFIPS"
                                                                },
                                                                false
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        {
                                                                            [cb]: "Region"
                                                                        },
                                                                        "aws-global"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                {
                                                                    [cb]: "UseGlobalEndpoint"
                                                                },
                                                                false
                                                            ]
                                                        }
                                                    ],
                                                    [q]: {
                                                        [cd]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                                                        [ce]: {
                                                            [cf]: [
                                                                {
                                                                    [cg]: true,
                                                                    [w]: "sigv4",
                                                                    [ch]: t,
                                                                    [ci]: "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        [cj]: {}
                                                    },
                                                    [bW]: q
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    [n]: "Path-style addressing cannot be used with S3 Accelerate",
                                    [bW]: n
                                }
                            ]
                        }
                    ]
                },
                {
                    [n]: "A valid partition could not be determined",
                    [bW]: n
                }
            ]
        }
    ]
}, Z = {
    [bZ]: r,
    [ca]: [
        {
            [cb]: "UseDualStack"
        },
        true
    ]
}, aa = {
    [bZ]: r,
    [ca]: [
        {
            [cb]: "Accelerate"
        },
        false
    ]
}, ab = {
    [bZ]: r,
    [ca]: [
        {
            [cb]: "UseFIPS"
        },
        true
    ]
}, ac = {
    [bZ]: m,
    [ca]: [
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ]
}, ad = {
    [bZ]: r,
    [ca]: [
        {
            [cb]: "UseGlobalEndpoint"
        },
        true
    ]
}, ae = {
    [cf]: [
        {
            [cg]: true,
            [w]: "sigv4",
            [ch]: t,
            [ci]: "{Region}"
        }
    ]
}, af = {
    [bZ]: r,
    [ca]: [
        {
            [cb]: "UseGlobalEndpoint"
        },
        false
    ]
}, ag = {
    [bZ]: r,
    [ca]: [
        {
            [cb]: "UseDualStack"
        },
        false
    ]
}, ah = {
    [bZ]: r,
    [ca]: [
        {
            [cb]: "UseFIPS"
        },
        false
    ]
}, ai = {
    [n]: "A valid partition could not be determined",
    [bW]: n
}, aj = {
    [bY]: [
        ab,
        {
            [bZ]: k,
            [ca]: [
                {
                    [bZ]: v,
                    [ca]: [
                        {
                            [cb]: "partitionResult"
                        },
                        w
                    ]
                },
                "aws-cn"
            ]
        }
    ],
    [n]: "Partition does not support FIPS",
    [bW]: n
}, ak = {
    [bZ]: k,
    [ca]: [
        {
            [bZ]: v,
            [ca]: [
                {
                    [cb]: "partitionResult"
                },
                w
            ]
        },
        "aws-cn"
    ]
}, al = {
    [bZ]: r,
    [ca]: [
        {
            [cb]: "Accelerate"
        },
        true
    ]
}, am = {
    [bY]: [
        Z,
        ab,
        aa,
        S,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}",
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, an = {
    [cd]: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}",
    [ce]: ae,
    [cj]: {}
}, ao = {
    [bY]: [
        ag,
        ab,
        aa,
        S,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}",
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, ap = {
    [cd]: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}",
    [ce]: ae,
    [cj]: {}
}, aq = {
    [bY]: [
        Z,
        ah,
        al,
        S,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}",
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, ar = {
    [cd]: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}",
    [ce]: ae,
    [cj]: {}
}, as = {
    [bY]: [
        Z,
        ah,
        aa,
        S,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}",
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, at = {
    [cd]: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}",
    [ce]: ae,
    [cj]: {}
}, au = {
    [bY]: [
        ag,
        ah,
        aa,
        T,
        U,
        {
            [bZ]: r,
            [ca]: [
                {
                    [bZ]: v,
                    [ca]: [
                        {
                            [cb]: "url"
                        },
                        "isIp"
                    ]
                },
                true
            ]
        },
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}",
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, av = {
    [bZ]: r,
    [ca]: [
        {
            [bZ]: v,
            [ca]: [
                {
                    [cb]: "url"
                },
                "isIp"
            ]
        },
        true
    ]
}, aw = {
    [cb]: "url"
}, ax = {
    [bY]: [
        ag,
        ah,
        aa,
        T,
        U,
        {
            [bZ]: r,
            [ca]: [
                {
                    [bZ]: v,
                    [ca]: [
                        aw,
                        "isIp"
                    ]
                },
                false
            ]
        },
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: "{url#scheme}://{Bucket}.{url#authority}{url#path}",
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, ay = {
    [bZ]: r,
    [ca]: [
        {
            [bZ]: v,
            [ca]: [
                aw,
                "isIp"
            ]
        },
        false
    ]
}, az = {
    [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}",
    [ce]: ae,
    [cj]: {}
}, aA = {
    [cd]: "{url#scheme}://{Bucket}.{url#authority}{url#path}",
    [ce]: ae,
    [cj]: {}
}, aB = {
    [q]: aA,
    [bW]: q
}, aC = {
    [bY]: [
        ag,
        ah,
        al,
        S,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}",
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, aD = {
    [cd]: "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}",
    [ce]: ae,
    [cj]: {}
}, aE = {
    [bY]: [
        ag,
        ah,
        aa,
        S,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: y,
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, aF = {
    [cd]: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}",
    [ce]: ae,
    [cj]: {}
}, aG = {
    [n]: "Invalid region: region was not a valid DNS name.",
    [bW]: n
}, aH = {
    [cb]: z
}, aI = {
    [cb]: A
}, aJ = {
    [bZ]: v,
    [ca]: [
        aH,
        "service"
    ]
}, aK = {
    [cb]: E
}, aL = {
    [bY]: [
        Z
    ],
    [n]: "S3 Object Lambda does not support Dual-stack",
    [bW]: n
}, aM = {
    [bY]: [
        al
    ],
    [n]: "S3 Object Lambda does not support S3 Accelerate",
    [bW]: n
}, aN = {
    [bY]: [
        {
            [bZ]: d,
            [ca]: [
                {
                    [cb]: "DisableAccessPoints"
                }
            ]
        },
        {
            [bZ]: r,
            [ca]: [
                {
                    [cb]: "DisableAccessPoints"
                },
                true
            ]
        }
    ],
    [n]: "Access points are not supported for this operation",
    [bW]: n
}, aO = {
    [bY]: [
        {
            [bZ]: d,
            [ca]: [
                {
                    [cb]: "UseArnRegion"
                }
            ]
        },
        {
            [bZ]: r,
            [ca]: [
                {
                    [cb]: "UseArnRegion"
                },
                false
            ]
        },
        {
            [bZ]: m,
            [ca]: [
                {
                    [bZ]: k,
                    [ca]: [
                        {
                            [bZ]: v,
                            [ca]: [
                                aH,
                                "region"
                            ]
                        },
                        "{Region}"
                    ]
                }
            ]
        }
    ],
    [n]: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`",
    [bW]: n
}, aP = {
    [bZ]: v,
    [ca]: [
        {
            [cb]: "bucketPartition"
        },
        w
    ]
}, aQ = {
    [bZ]: v,
    [ca]: [
        aH,
        "accountId"
    ]
}, aR = {
    [bY]: [
        ab,
        {
            [bZ]: k,
            [ca]: [
                aP,
                "aws-cn"
            ]
        }
    ],
    [n]: "Partition does not support FIPS",
    [bW]: n
}, aS = {
    [cf]: [
        {
            [cg]: true,
            [w]: "sigv4",
            [ch]: C,
            [ci]: "{bucketArn#region}"
        }
    ]
}, aT = {
    [n]: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`",
    [bW]: n
}, aU = {
    [n]: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`",
    [bW]: n
}, aV = {
    [n]: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)",
    [bW]: n
}, aW = {
    [n]: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`",
    [bW]: n
}, aX = {
    [n]: "Could not load partition for ARN region `{bucketArn#region}`",
    [bW]: n
}, aY = {
    [n]: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.",
    [bW]: n
}, aZ = {
    [n]: "Invalid ARN: bucket ARN is missing a region",
    [bW]: n
}, ba = {
    [n]: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided",
    [bW]: n
}, bb = {
    [cf]: [
        {
            [cg]: true,
            [w]: "sigv4",
            [ch]: t,
            [ci]: "{bucketArn#region}"
        }
    ]
}, bc = {
    [cf]: [
        {
            [cg]: true,
            [w]: "sigv4",
            [ch]: p,
            [ci]: "{bucketArn#region}"
        }
    ]
}, bd = {
    [cb]: "UseObjectLambdaEndpoint"
}, be = {
    [cf]: [
        {
            [cg]: true,
            [w]: "sigv4",
            [ch]: C,
            [ci]: "{Region}"
        }
    ]
}, bf = {
    [bY]: [
        ab,
        Z,
        T,
        U,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: J,
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, bg = {
    [q]: {
        [cd]: J,
        [ce]: ae,
        [cj]: {}
    },
    [bW]: q
}, bh = {
    [cd]: J,
    [ce]: ae,
    [cj]: {}
}, bi = {
    [bY]: [
        ab,
        Z,
        S,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}",
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, bj = {
    [cd]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}",
    [ce]: ae,
    [cj]: {}
}, bk = {
    [bY]: [
        ab,
        ag,
        T,
        U,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: J,
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, bl = {
    [bY]: [
        ab,
        ag,
        S,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}",
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, bm = {
    [cd]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}",
    [ce]: ae,
    [cj]: {}
}, bn = {
    [bY]: [
        ah,
        Z,
        T,
        U,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: J,
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, bo = {
    [bY]: [
        ah,
        Z,
        S,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}",
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, bp = {
    [cd]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}",
    [ce]: ae,
    [cj]: {}
}, bq = {
    [bY]: [
        ah,
        ag,
        T,
        U,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: J,
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, br = {
    [bY]: [
        ah,
        ag,
        S,
        {
            [bZ]: k,
            [ca]: [
                {
                    [cb]: "Region"
                },
                "aws-global"
            ]
        }
    ],
    [q]: {
        [cd]: K,
        [ce]: {
            [cf]: [
                {
                    [cg]: true,
                    [w]: "sigv4",
                    [ch]: t,
                    [ci]: "us-east-1"
                }
            ]
        },
        [cj]: {}
    },
    [bW]: q
}, bs = {
    [cd]: "https://s3.{Region}.{partitionResult#dnsSuffix}",
    [ce]: ae,
    [cj]: {}
}, bt = [
    {
        [cb]: "Region"
    }
], bu = [
    P
], bv = [
    {
        [bZ]: l,
        [ca]: [
            {
                [cb]: i
            },
            false
        ]
    }
], bw = [
    {
        [bZ]: k,
        [ca]: [
            {
                [cb]: g
            },
            "beta"
        ]
    }
], bx = [
    {
        [cb]: "Endpoint"
    }
], by = [
    T,
    U
], bz = [
    O
], bA = [
    {
        [bZ]: s,
        [ca]: [
            P
        ]
    }
], bB = [
    Z,
    T
], bC = [
    {
        [bZ]: j,
        [ca]: bt,
        [cc]: "partitionResult"
    }
], bD = [
    {
        [bZ]: k,
        [ca]: [
            {
                [cb]: "Region"
            },
            "us-east-1"
        ]
    }
], bE = [
    {
        [bZ]: l,
        [ca]: [
            {
                [cb]: "Region"
            },
            false
        ]
    }
], bF = [
    {
        [bZ]: k,
        [ca]: [
            aI,
            D
        ]
    }
], bG = [
    {
        [bZ]: v,
        [ca]: [
            aH,
            "resourceId[1]"
        ],
        [cc]: E
    },
    {
        [bZ]: m,
        [ca]: [
            {
                [bZ]: k,
                [ca]: [
                    aK,
                    B
                ]
            }
        ]
    }
], bH = [
    aH,
    "resourceId[1]"
], bI = [
    Z
], bJ = [
    al
], bK = [
    {
        [bZ]: m,
        [ca]: [
            {
                [bZ]: k,
                [ca]: [
                    {
                        [bZ]: v,
                        [ca]: [
                            aH,
                            "region"
                        ]
                    },
                    B
                ]
            }
        ]
    }
], bL = [
    {
        [bZ]: m,
        [ca]: [
            {
                [bZ]: d,
                [ca]: [
                    {
                        [bZ]: v,
                        [ca]: [
                            aH,
                            "resourceId[2]"
                        ]
                    }
                ]
            }
        ]
    }
], bM = [
    aH,
    "resourceId[2]"
], bN = [
    {
        [bZ]: j,
        [ca]: [
            {
                [bZ]: v,
                [ca]: [
                    aH,
                    "region"
                ]
            }
        ],
        [cc]: "bucketPartition"
    }
], bO = [
    {
        [bZ]: k,
        [ca]: [
            aP,
            {
                [bZ]: v,
                [ca]: [
                    {
                        [cb]: "partitionResult"
                    },
                    w
                ]
            }
        ]
    }
], bP = [
    {
        [bZ]: l,
        [ca]: [
            {
                [bZ]: v,
                [ca]: [
                    aH,
                    "region"
                ]
            },
            true
        ]
    }
], bQ = [
    {
        [bZ]: l,
        [ca]: [
            aQ,
            false
        ]
    }
], bR = [
    {
        [bZ]: l,
        [ca]: [
            aK,
            false
        ]
    }
], bS = [
    ab
], bT = [
    {
        [bZ]: l,
        [ca]: [
            {
                [cb]: "Region"
            },
            true
        ]
    }
], bU = [
    bg
];
const _data = {
    version: "1.0",
    parameters: {
        Bucket: L,
        Region: L,
        UseFIPS: M,
        UseDualStack: M,
        Endpoint: L,
        ForcePathStyle: N,
        Accelerate: M,
        UseGlobalEndpoint: M,
        UseObjectLambdaEndpoint: N,
        DisableAccessPoints: N,
        DisableMultiRegionAccessPoints: M,
        UseArnRegion: N
    },
    [bX]: [
        {
            [bW]: c,
            [bX]: [
                {
                    [bY]: [
                        {
                            [bZ]: d,
                            [ca]: bt
                        }
                    ],
                    [bW]: c,
                    [bX]: [
                        {
                            [bW]: c,
                            [bX]: [
                                {
                                    [bY]: [
                                        O,
                                        {
                                            [bZ]: e,
                                            [ca]: [
                                                P,
                                                49,
                                                50,
                                                b
                                            ],
                                            [cc]: f
                                        },
                                        {
                                            [bZ]: e,
                                            [ca]: [
                                                P,
                                                8,
                                                12,
                                                b
                                            ],
                                            [cc]: g
                                        },
                                        {
                                            [bZ]: e,
                                            [ca]: [
                                                P,
                                                0,
                                                7,
                                                b
                                            ],
                                            [cc]: h
                                        },
                                        {
                                            [bZ]: e,
                                            [ca]: [
                                                P,
                                                32,
                                                49,
                                                b
                                            ],
                                            [cc]: i
                                        },
                                        {
                                            [bZ]: j,
                                            [ca]: bt,
                                            [cc]: "regionPartition"
                                        },
                                        {
                                            [bZ]: k,
                                            [ca]: [
                                                {
                                                    [cb]: h
                                                },
                                                "--op-s3"
                                            ]
                                        }
                                    ],
                                    [bW]: c,
                                    [bX]: [
                                        {
                                            [bY]: bv,
                                            [bW]: c,
                                            [bX]: [
                                                {
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [bY]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        Q,
                                                                        "e"
                                                                    ]
                                                                }
                                                            ],
                                                            [bW]: c,
                                                            [bX]: [
                                                                {
                                                                    [bY]: bw,
                                                                    [bW]: c,
                                                                    [bX]: [
                                                                        R,
                                                                        {
                                                                            [bY]: by,
                                                                            endpoint: {
                                                                                [cd]: "https://{Bucket}.ec2.{url#authority}",
                                                                                [ce]: V,
                                                                                [cj]: W
                                                                            },
                                                                            [bW]: q
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    endpoint: {
                                                                        [cd]: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}",
                                                                        [ce]: V,
                                                                        [cj]: W
                                                                    },
                                                                    [bW]: q
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            [bY]: [
                                                                {
                                                                    [bZ]: k,
                                                                    [ca]: [
                                                                        Q,
                                                                        "o"
                                                                    ]
                                                                }
                                                            ],
                                                            [bW]: c,
                                                            [bX]: [
                                                                {
                                                                    [bY]: bw,
                                                                    [bW]: c,
                                                                    [bX]: [
                                                                        R,
                                                                        {
                                                                            [bY]: by,
                                                                            endpoint: {
                                                                                [cd]: "https://{Bucket}.op-{outpostId}.{url#authority}",
                                                                                [ce]: V,
                                                                                [cj]: W
                                                                            },
                                                                            [bW]: q
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    endpoint: {
                                                                        [cd]: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}",
                                                                        [ce]: V,
                                                                        [cj]: W
                                                                    },
                                                                    [bW]: q
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            error: 'Unrecognized hardware type: "Expected hardware type o or e but got {hardwareType}"',
                                                            [bW]: n
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.",
                                            [bW]: n
                                        }
                                    ]
                                },
                                {
                                    [bY]: bz,
                                    [bW]: c,
                                    [bX]: [
                                        {
                                            [bY]: [
                                                T,
                                                {
                                                    [bZ]: m,
                                                    [ca]: [
                                                        {
                                                            [bZ]: d,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: o,
                                                                    [ca]: bx
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            error: "Custom endpoint `{Endpoint}` was not a valid URI",
                                            [bW]: n
                                        },
                                        {
                                            [bW]: c,
                                            [bX]: [
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: d,
                                                            [ca]: [
                                                                X
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: r,
                                                            [ca]: [
                                                                X,
                                                                b
                                                            ]
                                                        }
                                                    ],
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [bW]: c,
                                                            [bX]: [
                                                                {
                                                                    [bY]: bA,
                                                                    error: "Path-style addressing cannot be used with ARN buckets",
                                                                    [bW]: n
                                                                },
                                                                Y
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: u,
                                                            [ca]: [
                                                                P,
                                                                a
                                                            ]
                                                        }
                                                    ],
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [bY]: bC,
                                                            [bW]: c,
                                                            [bX]: [
                                                                {
                                                                    [bW]: c,
                                                                    [bX]: [
                                                                        {
                                                                            [bY]: bE,
                                                                            [bW]: c,
                                                                            [bX]: [
                                                                                {
                                                                                    [bW]: c,
                                                                                    [bX]: [
                                                                                        aj,
                                                                                        {
                                                                                            [bW]: c,
                                                                                            [bX]: [
                                                                                                {
                                                                                                    [bY]: [
                                                                                                        al,
                                                                                                        ab
                                                                                                    ],
                                                                                                    error: "Accelerate cannot be used with FIPS",
                                                                                                    [bW]: n
                                                                                                },
                                                                                                {
                                                                                                    [bW]: c,
                                                                                                    [bX]: [
                                                                                                        {
                                                                                                            [bY]: [
                                                                                                                al,
                                                                                                                ak
                                                                                                            ],
                                                                                                            error: "S3 Accelerate cannot be used in this region",
                                                                                                            [bW]: n
                                                                                                        },
                                                                                                        {
                                                                                                            [bW]: c,
                                                                                                            [bX]: [
                                                                                                                {
                                                                                                                    [bY]: [
                                                                                                                        T,
                                                                                                                        Z
                                                                                                                    ],
                                                                                                                    error: x,
                                                                                                                    [bW]: n
                                                                                                                },
                                                                                                                {
                                                                                                                    [bW]: c,
                                                                                                                    [bX]: [
                                                                                                                        {
                                                                                                                            [bY]: [
                                                                                                                                T,
                                                                                                                                ab
                                                                                                                            ],
                                                                                                                            error: x,
                                                                                                                            [bW]: n
                                                                                                                        },
                                                                                                                        {
                                                                                                                            [bW]: c,
                                                                                                                            [bX]: [
                                                                                                                                {
                                                                                                                                    [bY]: [
                                                                                                                                        T,
                                                                                                                                        al
                                                                                                                                    ],
                                                                                                                                    error: x,
                                                                                                                                    [bW]: n
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    [bW]: c,
                                                                                                                                    [bX]: [
                                                                                                                                        am,
                                                                                                                                        am,
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                Z,
                                                                                                                                                ab,
                                                                                                                                                aa,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                ad
                                                                                                                                            ],
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                {
                                                                                                                                                    endpoint: an,
                                                                                                                                                    [bW]: q
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                Z,
                                                                                                                                                ab,
                                                                                                                                                aa,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                af
                                                                                                                                            ],
                                                                                                                                            endpoint: an,
                                                                                                                                            [bW]: q
                                                                                                                                        },
                                                                                                                                        ao,
                                                                                                                                        ao,
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                ag,
                                                                                                                                                ab,
                                                                                                                                                aa,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                ad
                                                                                                                                            ],
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                {
                                                                                                                                                    endpoint: ap,
                                                                                                                                                    [bW]: q
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                ag,
                                                                                                                                                ab,
                                                                                                                                                aa,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                af
                                                                                                                                            ],
                                                                                                                                            endpoint: ap,
                                                                                                                                            [bW]: q
                                                                                                                                        },
                                                                                                                                        aq,
                                                                                                                                        aq,
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                Z,
                                                                                                                                                ah,
                                                                                                                                                al,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                ad
                                                                                                                                            ],
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                {
                                                                                                                                                    endpoint: ar,
                                                                                                                                                    [bW]: q
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                Z,
                                                                                                                                                ah,
                                                                                                                                                al,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                af
                                                                                                                                            ],
                                                                                                                                            endpoint: ar,
                                                                                                                                            [bW]: q
                                                                                                                                        },
                                                                                                                                        as,
                                                                                                                                        as,
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                Z,
                                                                                                                                                ah,
                                                                                                                                                aa,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                ad
                                                                                                                                            ],
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                {
                                                                                                                                                    endpoint: at,
                                                                                                                                                    [bW]: q
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                Z,
                                                                                                                                                ah,
                                                                                                                                                aa,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                af
                                                                                                                                            ],
                                                                                                                                            endpoint: at,
                                                                                                                                            [bW]: q
                                                                                                                                        },
                                                                                                                                        au,
                                                                                                                                        ax,
                                                                                                                                        au,
                                                                                                                                        ax,
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                ag,
                                                                                                                                                ah,
                                                                                                                                                aa,
                                                                                                                                                T,
                                                                                                                                                U,
                                                                                                                                                av,
                                                                                                                                                ac,
                                                                                                                                                ad
                                                                                                                                            ],
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                {
                                                                                                                                                    [bY]: bD,
                                                                                                                                                    endpoint: az,
                                                                                                                                                    [bW]: q
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    endpoint: az,
                                                                                                                                                    [bW]: q
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                ag,
                                                                                                                                                ah,
                                                                                                                                                aa,
                                                                                                                                                T,
                                                                                                                                                U,
                                                                                                                                                ay,
                                                                                                                                                ac,
                                                                                                                                                ad
                                                                                                                                            ],
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                {
                                                                                                                                                    [bY]: bD,
                                                                                                                                                    endpoint: aA,
                                                                                                                                                    [bW]: q
                                                                                                                                                },
                                                                                                                                                aB
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                ag,
                                                                                                                                                ah,
                                                                                                                                                aa,
                                                                                                                                                T,
                                                                                                                                                U,
                                                                                                                                                av,
                                                                                                                                                ac,
                                                                                                                                                af
                                                                                                                                            ],
                                                                                                                                            endpoint: az,
                                                                                                                                            [bW]: q
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                ag,
                                                                                                                                                ah,
                                                                                                                                                aa,
                                                                                                                                                T,
                                                                                                                                                U,
                                                                                                                                                ay,
                                                                                                                                                ac,
                                                                                                                                                af
                                                                                                                                            ],
                                                                                                                                            endpoint: aA,
                                                                                                                                            [bW]: q
                                                                                                                                        },
                                                                                                                                        aC,
                                                                                                                                        aC,
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                ag,
                                                                                                                                                ah,
                                                                                                                                                al,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                ad
                                                                                                                                            ],
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                {
                                                                                                                                                    [bY]: bD,
                                                                                                                                                    endpoint: aD,
                                                                                                                                                    [bW]: q
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    endpoint: aD,
                                                                                                                                                    [bW]: q
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                ag,
                                                                                                                                                ah,
                                                                                                                                                al,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                af
                                                                                                                                            ],
                                                                                                                                            endpoint: aD,
                                                                                                                                            [bW]: q
                                                                                                                                        },
                                                                                                                                        aE,
                                                                                                                                        aE,
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                ag,
                                                                                                                                                ah,
                                                                                                                                                aa,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                ad
                                                                                                                                            ],
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                {
                                                                                                                                                    [bY]: bD,
                                                                                                                                                    endpoint: {
                                                                                                                                                        [cd]: y,
                                                                                                                                                        [ce]: ae,
                                                                                                                                                        [cj]: W
                                                                                                                                                    },
                                                                                                                                                    [bW]: q
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    endpoint: aF,
                                                                                                                                                    [bW]: q
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            [bY]: [
                                                                                                                                                ag,
                                                                                                                                                ah,
                                                                                                                                                aa,
                                                                                                                                                S,
                                                                                                                                                ac,
                                                                                                                                                af
                                                                                                                                            ],
                                                                                                                                            endpoint: aF,
                                                                                                                                            [bW]: q
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        aG
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        ai
                                                    ]
                                                },
                                                {
                                                    [bY]: [
                                                        T,
                                                        U,
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: v,
                                                                    [ca]: [
                                                                        aw,
                                                                        "scheme"
                                                                    ]
                                                                },
                                                                "http"
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: u,
                                                            [ca]: [
                                                                P,
                                                                b
                                                            ]
                                                        },
                                                        ah,
                                                        ag,
                                                        aa
                                                    ],
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [bY]: bC,
                                                            [bW]: c,
                                                            [bX]: [
                                                                {
                                                                    [bW]: c,
                                                                    [bX]: [
                                                                        {
                                                                            [bY]: bE,
                                                                            [bW]: c,
                                                                            [bX]: [
                                                                                aB
                                                                            ]
                                                                        },
                                                                        aG
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        ai
                                                    ]
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: s,
                                                            [ca]: bu,
                                                            [cc]: z
                                                        }
                                                    ],
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [bY]: [
                                                                {
                                                                    [bZ]: v,
                                                                    [ca]: [
                                                                        aH,
                                                                        "resourceId[0]"
                                                                    ],
                                                                    [cc]: A
                                                                },
                                                                {
                                                                    [bZ]: m,
                                                                    [ca]: [
                                                                        {
                                                                            [bZ]: k,
                                                                            [ca]: [
                                                                                aI,
                                                                                B
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            [bW]: c,
                                                            [bX]: [
                                                                {
                                                                    [bW]: c,
                                                                    [bX]: [
                                                                        {
                                                                            [bY]: [
                                                                                {
                                                                                    [bZ]: k,
                                                                                    [ca]: [
                                                                                        aJ,
                                                                                        C
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            [bW]: c,
                                                                            [bX]: [
                                                                                {
                                                                                    [bY]: bF,
                                                                                    [bW]: c,
                                                                                    [bX]: [
                                                                                        {
                                                                                            [bW]: c,
                                                                                            [bX]: [
                                                                                                {
                                                                                                    [bY]: bG,
                                                                                                    [bW]: c,
                                                                                                    [bX]: [
                                                                                                        {
                                                                                                            [bW]: c,
                                                                                                            [bX]: [
                                                                                                                aL,
                                                                                                                {
                                                                                                                    [bW]: c,
                                                                                                                    [bX]: [
                                                                                                                        aM,
                                                                                                                        {
                                                                                                                            [bW]: c,
                                                                                                                            [bX]: [
                                                                                                                                {
                                                                                                                                    [bY]: bK,
                                                                                                                                    [bW]: c,
                                                                                                                                    [bX]: [
                                                                                                                                        {
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                aN,
                                                                                                                                                {
                                                                                                                                                    [bW]: c,
                                                                                                                                                    [bX]: [
                                                                                                                                                        {
                                                                                                                                                            [bY]: bL,
                                                                                                                                                            [bW]: c,
                                                                                                                                                            [bX]: [
                                                                                                                                                                {
                                                                                                                                                                    [bW]: c,
                                                                                                                                                                    [bX]: [
                                                                                                                                                                        aO,
                                                                                                                                                                        {
                                                                                                                                                                            [bW]: c,
                                                                                                                                                                            [bX]: [
                                                                                                                                                                                {
                                                                                                                                                                                    [bY]: bN,
                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                        {
                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    [bY]: bC,
                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    [bY]: bO,
                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    [bY]: bP,
                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    [bY]: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            [bZ]: k,
                                                                                                                                                                                                                                                            [ca]: [
                                                                                                                                                                                                                                                                aQ,
                                                                                                                                                                                                                                                                B
                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                    error: "Invalid ARN: Missing account id",
                                                                                                                                                                                                                                                    [bW]: n
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            [bY]: bQ,
                                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            [bY]: bR,
                                                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                                                                        aR,
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    [bY]: by,
                                                                                                                                                                                                                                                                                                    endpoint: {
                                                                                                                                                                                                                                                                                                        [cd]: F,
                                                                                                                                                                                                                                                                                                        [ce]: aS,
                                                                                                                                                                                                                                                                                                        [cj]: W
                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                    [bW]: q
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    [bY]: bS,
                                                                                                                                                                                                                                                                                                    endpoint: {
                                                                                                                                                                                                                                                                                                        [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                        [ce]: aS,
                                                                                                                                                                                                                                                                                                        [cj]: W
                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                    [bW]: q
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    endpoint: {
                                                                                                                                                                                                                                                                                                        [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                        [ce]: aS,
                                                                                                                                                                                                                                                                                                        [cj]: W
                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                    [bW]: q
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                        aT
                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                        aU
                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                aV
                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                },
                                                                                                                                                                                                                aW
                                                                                                                                                                                                            ]
                                                                                                                                                                                                        }
                                                                                                                                                                                                    ]
                                                                                                                                                                                                },
                                                                                                                                                                                                ai
                                                                                                                                                                                            ]
                                                                                                                                                                                        }
                                                                                                                                                                                    ]
                                                                                                                                                                                },
                                                                                                                                                                                aX
                                                                                                                                                                            ]
                                                                                                                                                                        }
                                                                                                                                                                    ]
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        },
                                                                                                                                                        aY
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                aZ
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                ba
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`",
                                                                                    [bW]: n
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            [bY]: bF,
                                                                            [bW]: c,
                                                                            [bX]: [
                                                                                {
                                                                                    [bY]: bG,
                                                                                    [bW]: c,
                                                                                    [bX]: [
                                                                                        {
                                                                                            [bW]: c,
                                                                                            [bX]: [
                                                                                                {
                                                                                                    [bY]: bK,
                                                                                                    [bW]: c,
                                                                                                    [bX]: [
                                                                                                        {
                                                                                                            [bY]: bF,
                                                                                                            [bW]: c,
                                                                                                            [bX]: [
                                                                                                                {
                                                                                                                    [bY]: bK,
                                                                                                                    [bW]: c,
                                                                                                                    [bX]: [
                                                                                                                        {
                                                                                                                            [bW]: c,
                                                                                                                            [bX]: [
                                                                                                                                aN,
                                                                                                                                {
                                                                                                                                    [bW]: c,
                                                                                                                                    [bX]: [
                                                                                                                                        {
                                                                                                                                            [bY]: bL,
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                {
                                                                                                                                                    [bW]: c,
                                                                                                                                                    [bX]: [
                                                                                                                                                        aO,
                                                                                                                                                        {
                                                                                                                                                            [bW]: c,
                                                                                                                                                            [bX]: [
                                                                                                                                                                {
                                                                                                                                                                    [bY]: bN,
                                                                                                                                                                    [bW]: c,
                                                                                                                                                                    [bX]: [
                                                                                                                                                                        {
                                                                                                                                                                            [bW]: c,
                                                                                                                                                                            [bX]: [
                                                                                                                                                                                {
                                                                                                                                                                                    [bY]: bC,
                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                        {
                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    [bY]: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            [bZ]: k,
                                                                                                                                                                                                            [ca]: [
                                                                                                                                                                                                                aP,
                                                                                                                                                                                                                "{partitionResult#name}"
                                                                                                                                                                                                            ]
                                                                                                                                                                                                        }
                                                                                                                                                                                                    ],
                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    [bY]: bP,
                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    [bY]: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            [bZ]: k,
                                                                                                                                                                                                                                            [ca]: [
                                                                                                                                                                                                                                                aJ,
                                                                                                                                                                                                                                                t
                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    [bY]: bQ,
                                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    [bY]: bR,
                                                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    [bY]: bJ,
                                                                                                                                                                                                                                                                                    error: "Access Points do not support S3 Accelerate",
                                                                                                                                                                                                                                                                                    [bW]: n
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                                                                        aR,
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    [bY]: bB,
                                                                                                                                                                                                                                                                                                    error: "DualStack cannot be combined with a Host override (PrivateLink)",
                                                                                                                                                                                                                                                                                                    [bW]: n
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            [bY]: [
                                                                                                                                                                                                                                                                                                                ab,
                                                                                                                                                                                                                                                                                                                Z
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                                [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                                [ce]: bb,
                                                                                                                                                                                                                                                                                                                [cj]: W
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            [bW]: q
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            [bY]: [
                                                                                                                                                                                                                                                                                                                ab,
                                                                                                                                                                                                                                                                                                                ag
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                                [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                                [ce]: bb,
                                                                                                                                                                                                                                                                                                                [cj]: W
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            [bW]: q
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            [bY]: [
                                                                                                                                                                                                                                                                                                                ah,
                                                                                                                                                                                                                                                                                                                Z
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                                [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                                [ce]: bb,
                                                                                                                                                                                                                                                                                                                [cj]: W
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            [bW]: q
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            [bY]: [
                                                                                                                                                                                                                                                                                                                ah,
                                                                                                                                                                                                                                                                                                                ag,
                                                                                                                                                                                                                                                                                                                T,
                                                                                                                                                                                                                                                                                                                U
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                                [cd]: F,
                                                                                                                                                                                                                                                                                                                [ce]: bb,
                                                                                                                                                                                                                                                                                                                [cj]: W
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            [bW]: q
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            [bY]: [
                                                                                                                                                                                                                                                                                                                ah,
                                                                                                                                                                                                                                                                                                                ag
                                                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                                [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                                [ce]: bb,
                                                                                                                                                                                                                                                                                                                [cj]: W
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            [bW]: q
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                aT
                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                aU
                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}",
                                                                                                                                                                                                                                    [bW]: n
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                },
                                                                                                                                                                                                                aV
                                                                                                                                                                                                            ]
                                                                                                                                                                                                        }
                                                                                                                                                                                                    ]
                                                                                                                                                                                                },
                                                                                                                                                                                                aW
                                                                                                                                                                                            ]
                                                                                                                                                                                        }
                                                                                                                                                                                    ]
                                                                                                                                                                                },
                                                                                                                                                                                ai
                                                                                                                                                                            ]
                                                                                                                                                                        }
                                                                                                                                                                    ]
                                                                                                                                                                },
                                                                                                                                                                aX
                                                                                                                                                            ]
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        aY
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                aZ
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    [bW]: c,
                                                                                                    [bX]: [
                                                                                                        {
                                                                                                            [bY]: [
                                                                                                                {
                                                                                                                    [bZ]: l,
                                                                                                                    [ca]: [
                                                                                                                        aK,
                                                                                                                        b
                                                                                                                    ]
                                                                                                                }
                                                                                                            ],
                                                                                                            [bW]: c,
                                                                                                            [bX]: [
                                                                                                                {
                                                                                                                    [bW]: c,
                                                                                                                    [bX]: [
                                                                                                                        {
                                                                                                                            [bY]: bI,
                                                                                                                            error: "S3 MRAP does not support dual-stack",
                                                                                                                            [bW]: n
                                                                                                                        },
                                                                                                                        {
                                                                                                                            [bW]: c,
                                                                                                                            [bX]: [
                                                                                                                                {
                                                                                                                                    [bY]: bS,
                                                                                                                                    error: "S3 MRAP does not support FIPS",
                                                                                                                                    [bW]: n
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    [bW]: c,
                                                                                                                                    [bX]: [
                                                                                                                                        {
                                                                                                                                            [bY]: bJ,
                                                                                                                                            error: "S3 MRAP does not support S3 Accelerate",
                                                                                                                                            [bW]: n
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                {
                                                                                                                                                    [bY]: [
                                                                                                                                                        {
                                                                                                                                                            [bZ]: r,
                                                                                                                                                            [ca]: [
                                                                                                                                                                {
                                                                                                                                                                    [cb]: "DisableMultiRegionAccessPoints"
                                                                                                                                                                },
                                                                                                                                                                b
                                                                                                                                                            ]
                                                                                                                                                        }
                                                                                                                                                    ],
                                                                                                                                                    error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.",
                                                                                                                                                    [bW]: n
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    [bW]: c,
                                                                                                                                                    [bX]: [
                                                                                                                                                        {
                                                                                                                                                            [bY]: [
                                                                                                                                                                {
                                                                                                                                                                    [bZ]: j,
                                                                                                                                                                    [ca]: bt,
                                                                                                                                                                    [cc]: G
                                                                                                                                                                }
                                                                                                                                                            ],
                                                                                                                                                            [bW]: c,
                                                                                                                                                            [bX]: [
                                                                                                                                                                {
                                                                                                                                                                    [bW]: c,
                                                                                                                                                                    [bX]: [
                                                                                                                                                                        {
                                                                                                                                                                            [bY]: [
                                                                                                                                                                                {
                                                                                                                                                                                    [bZ]: k,
                                                                                                                                                                                    [ca]: [
                                                                                                                                                                                        {
                                                                                                                                                                                            [bZ]: v,
                                                                                                                                                                                            [ca]: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    [cb]: G
                                                                                                                                                                                                },
                                                                                                                                                                                                w
                                                                                                                                                                                            ]
                                                                                                                                                                                        },
                                                                                                                                                                                        {
                                                                                                                                                                                            [bZ]: v,
                                                                                                                                                                                            [ca]: [
                                                                                                                                                                                                aH,
                                                                                                                                                                                                "partition"
                                                                                                                                                                                            ]
                                                                                                                                                                                        }
                                                                                                                                                                                    ]
                                                                                                                                                                                }
                                                                                                                                                                            ],
                                                                                                                                                                            [bW]: c,
                                                                                                                                                                            [bX]: [
                                                                                                                                                                                {
                                                                                                                                                                                    endpoint: {
                                                                                                                                                                                        [cd]: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}",
                                                                                                                                                                                        [ce]: {
                                                                                                                                                                                            [cf]: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    [cg]: b,
                                                                                                                                                                                                    name: "sigv4a",
                                                                                                                                                                                                    [ch]: t,
                                                                                                                                                                                                    signingRegionSet: [
                                                                                                                                                                                                        "*"
                                                                                                                                                                                                    ]
                                                                                                                                                                                                }
                                                                                                                                                                                            ]
                                                                                                                                                                                        },
                                                                                                                                                                                        [cj]: W
                                                                                                                                                                                    },
                                                                                                                                                                                    [bW]: q
                                                                                                                                                                                }
                                                                                                                                                                            ]
                                                                                                                                                                        },
                                                                                                                                                                        {
                                                                                                                                                                            error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`",
                                                                                                                                                                            [bW]: n
                                                                                                                                                                        }
                                                                                                                                                                    ]
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            error: "{Region} was not a valid region",
                                                                                                                                                            [bW]: n
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            error: "Invalid Access Point Name",
                                                                                                            [bW]: n
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                ba
                                                                            ]
                                                                        },
                                                                        {
                                                                            [bY]: [
                                                                                {
                                                                                    [bZ]: k,
                                                                                    [ca]: [
                                                                                        aJ,
                                                                                        p
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            [bW]: c,
                                                                            [bX]: [
                                                                                {
                                                                                    [bY]: bI,
                                                                                    error: "S3 Outposts does not support Dual-stack",
                                                                                    [bW]: n
                                                                                },
                                                                                {
                                                                                    [bW]: c,
                                                                                    [bX]: [
                                                                                        {
                                                                                            [bY]: bS,
                                                                                            error: "S3 Outposts does not support FIPS",
                                                                                            [bW]: n
                                                                                        },
                                                                                        {
                                                                                            [bW]: c,
                                                                                            [bX]: [
                                                                                                {
                                                                                                    [bY]: bJ,
                                                                                                    error: "S3 Outposts does not support S3 Accelerate",
                                                                                                    [bW]: n
                                                                                                },
                                                                                                {
                                                                                                    [bW]: c,
                                                                                                    [bX]: [
                                                                                                        {
                                                                                                            [bY]: [
                                                                                                                {
                                                                                                                    [bZ]: d,
                                                                                                                    [ca]: [
                                                                                                                        {
                                                                                                                            [bZ]: v,
                                                                                                                            [ca]: [
                                                                                                                                aH,
                                                                                                                                "resourceId[4]"
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ],
                                                                                                            error: "Invalid Arn: Outpost Access Point ARN contains sub resources",
                                                                                                            [bW]: n
                                                                                                        },
                                                                                                        {
                                                                                                            [bW]: c,
                                                                                                            [bX]: [
                                                                                                                {
                                                                                                                    [bY]: [
                                                                                                                        {
                                                                                                                            [bZ]: v,
                                                                                                                            [ca]: bH,
                                                                                                                            [cc]: i
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    [bW]: c,
                                                                                                                    [bX]: [
                                                                                                                        {
                                                                                                                            [bW]: c,
                                                                                                                            [bX]: [
                                                                                                                                {
                                                                                                                                    [bY]: bv,
                                                                                                                                    [bW]: c,
                                                                                                                                    [bX]: [
                                                                                                                                        {
                                                                                                                                            [bW]: c,
                                                                                                                                            [bX]: [
                                                                                                                                                aO,
                                                                                                                                                {
                                                                                                                                                    [bW]: c,
                                                                                                                                                    [bX]: [
                                                                                                                                                        {
                                                                                                                                                            [bY]: bN,
                                                                                                                                                            [bW]: c,
                                                                                                                                                            [bX]: [
                                                                                                                                                                {
                                                                                                                                                                    [bW]: c,
                                                                                                                                                                    [bX]: [
                                                                                                                                                                        {
                                                                                                                                                                            [bY]: bC,
                                                                                                                                                                            [bW]: c,
                                                                                                                                                                            [bX]: [
                                                                                                                                                                                {
                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                        {
                                                                                                                                                                                            [bY]: bO,
                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                {
                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                        {
                                                                                                                                                                                                            [bY]: bP,
                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            [bY]: bQ,
                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            [bY]: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    [bZ]: v,
                                                                                                                                                                                                                                                    [ca]: bM,
                                                                                                                                                                                                                                                    [cc]: H
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            [bY]: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    [bZ]: v,
                                                                                                                                                                                                                                                                    [ca]: [
                                                                                                                                                                                                                                                                        aH,
                                                                                                                                                                                                                                                                        "resourceId[3]"
                                                                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                                                                    [cc]: E
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            [bY]: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    [bZ]: k,
                                                                                                                                                                                                                                                                                    [ca]: [
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            [cb]: H
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                        D
                                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            ],
                                                                                                                                                                                                                                                                            [bW]: c,
                                                                                                                                                                                                                                                                            [bX]: [
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    [bW]: c,
                                                                                                                                                                                                                                                                                    [bX]: [
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            [bY]: by,
                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                [cd]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}",
                                                                                                                                                                                                                                                                                                [ce]: bc,
                                                                                                                                                                                                                                                                                                [cj]: W
                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                            [bW]: q
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            endpoint: {
                                                                                                                                                                                                                                                                                                [cd]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                                                                                                                                                                                                                                                                                [ce]: bc,
                                                                                                                                                                                                                                                                                                [cj]: W
                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                            [bW]: q
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            error: "Expected an outpost type `accesspoint`, found {outpostType}",
                                                                                                                                                                                                                                                                            [bW]: n
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            error: "Invalid ARN: expected an access point name",
                                                                                                                                                                                                                                                            [bW]: n
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            error: "Invalid ARN: Expected a 4-component resource",
                                                                                                                                                                                                                                            [bW]: n
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        aU
                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                }
                                                                                                                                                                                                            ]
                                                                                                                                                                                                        },
                                                                                                                                                                                                        aV
                                                                                                                                                                                                    ]
                                                                                                                                                                                                }
                                                                                                                                                                                            ]
                                                                                                                                                                                        },
                                                                                                                                                                                        aW
                                                                                                                                                                                    ]
                                                                                                                                                                                }
                                                                                                                                                                            ]
                                                                                                                                                                        },
                                                                                                                                                                        ai
                                                                                                                                                                    ]
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            error: "Could not load partition for ARN region {bucketArn#region}",
                                                                                                                                                            [bW]: n
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`",
                                                                                                                                    [bW]: n
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    error: "Invalid ARN: The Outpost Id was not set",
                                                                                                                    [bW]: n
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})",
                                                                            [bW]: n
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            error: "Invalid ARN: No ARN type specified",
                                                            [bW]: n
                                                        }
                                                    ]
                                                },
                                                {
                                                    [bY]: [
                                                        {
                                                            [bZ]: e,
                                                            [ca]: [
                                                                P,
                                                                0,
                                                                4,
                                                                a
                                                            ],
                                                            [cc]: I
                                                        },
                                                        {
                                                            [bZ]: k,
                                                            [ca]: [
                                                                {
                                                                    [cb]: I
                                                                },
                                                                "arn:"
                                                            ]
                                                        },
                                                        {
                                                            [bZ]: m,
                                                            [ca]: [
                                                                {
                                                                    [bZ]: d,
                                                                    [ca]: bA
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    error: "Invalid ARN: `{Bucket}` was not a valid ARN",
                                                    [bW]: n
                                                },
                                                Y
                                            ]
                                        }
                                    ]
                                },
                                {
                                    [bY]: [
                                        {
                                            [bZ]: d,
                                            [ca]: [
                                                bd
                                            ]
                                        },
                                        {
                                            [bZ]: r,
                                            [ca]: [
                                                bd,
                                                b
                                            ]
                                        }
                                    ],
                                    [bW]: c,
                                    [bX]: [
                                        {
                                            [bY]: bC,
                                            [bW]: c,
                                            [bX]: [
                                                {
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [bY]: bT,
                                                            [bW]: c,
                                                            [bX]: [
                                                                {
                                                                    [bW]: c,
                                                                    [bX]: [
                                                                        aL,
                                                                        {
                                                                            [bW]: c,
                                                                            [bX]: [
                                                                                aM,
                                                                                {
                                                                                    [bW]: c,
                                                                                    [bX]: [
                                                                                        aj,
                                                                                        {
                                                                                            [bW]: c,
                                                                                            [bX]: [
                                                                                                {
                                                                                                    [bY]: by,
                                                                                                    endpoint: {
                                                                                                        [cd]: J,
                                                                                                        [ce]: be,
                                                                                                        [cj]: W
                                                                                                    },
                                                                                                    [bW]: q
                                                                                                },
                                                                                                {
                                                                                                    [bY]: bS,
                                                                                                    endpoint: {
                                                                                                        [cd]: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}",
                                                                                                        [ce]: be,
                                                                                                        [cj]: W
                                                                                                    },
                                                                                                    [bW]: q
                                                                                                },
                                                                                                {
                                                                                                    endpoint: {
                                                                                                        [cd]: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}",
                                                                                                        [ce]: be,
                                                                                                        [cj]: W
                                                                                                    },
                                                                                                    [bW]: q
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        aG
                                                    ]
                                                }
                                            ]
                                        },
                                        ai
                                    ]
                                },
                                {
                                    [bY]: [
                                        {
                                            [bZ]: m,
                                            [ca]: bz
                                        }
                                    ],
                                    [bW]: c,
                                    [bX]: [
                                        {
                                            [bY]: bC,
                                            [bW]: c,
                                            [bX]: [
                                                {
                                                    [bW]: c,
                                                    [bX]: [
                                                        {
                                                            [bY]: bT,
                                                            [bW]: c,
                                                            [bX]: [
                                                                {
                                                                    [bW]: c,
                                                                    [bX]: [
                                                                        aj,
                                                                        {
                                                                            [bW]: c,
                                                                            [bX]: [
                                                                                bf,
                                                                                bf,
                                                                                {
                                                                                    [bY]: [
                                                                                        ab,
                                                                                        Z,
                                                                                        T,
                                                                                        U,
                                                                                        ac,
                                                                                        ad
                                                                                    ],
                                                                                    [bW]: c,
                                                                                    [bX]: bU
                                                                                },
                                                                                {
                                                                                    [bY]: [
                                                                                        ab,
                                                                                        Z,
                                                                                        T,
                                                                                        U,
                                                                                        ac,
                                                                                        af
                                                                                    ],
                                                                                    endpoint: bh,
                                                                                    [bW]: q
                                                                                },
                                                                                bi,
                                                                                bi,
                                                                                {
                                                                                    [bY]: [
                                                                                        ab,
                                                                                        Z,
                                                                                        S,
                                                                                        ac,
                                                                                        ad
                                                                                    ],
                                                                                    [bW]: c,
                                                                                    [bX]: [
                                                                                        {
                                                                                            endpoint: bj,
                                                                                            [bW]: q
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    [bY]: [
                                                                                        ab,
                                                                                        Z,
                                                                                        S,
                                                                                        ac,
                                                                                        af
                                                                                    ],
                                                                                    endpoint: bj,
                                                                                    [bW]: q
                                                                                },
                                                                                bk,
                                                                                bk,
                                                                                {
                                                                                    [bY]: [
                                                                                        ab,
                                                                                        ag,
                                                                                        T,
                                                                                        U,
                                                                                        ac,
                                                                                        ad
                                                                                    ],
                                                                                    [bW]: c,
                                                                                    [bX]: bU
                                                                                },
                                                                                {
                                                                                    [bY]: [
                                                                                        ab,
                                                                                        ag,
                                                                                        T,
                                                                                        U,
                                                                                        ac,
                                                                                        af
                                                                                    ],
                                                                                    endpoint: bh,
                                                                                    [bW]: q
                                                                                },
                                                                                bl,
                                                                                bl,
                                                                                {
                                                                                    [bY]: [
                                                                                        ab,
                                                                                        ag,
                                                                                        S,
                                                                                        ac,
                                                                                        ad
                                                                                    ],
                                                                                    [bW]: c,
                                                                                    [bX]: [
                                                                                        {
                                                                                            endpoint: bm,
                                                                                            [bW]: q
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    [bY]: [
                                                                                        ab,
                                                                                        ag,
                                                                                        S,
                                                                                        ac,
                                                                                        af
                                                                                    ],
                                                                                    endpoint: bm,
                                                                                    [bW]: q
                                                                                },
                                                                                bn,
                                                                                bn,
                                                                                {
                                                                                    [bY]: [
                                                                                        ah,
                                                                                        Z,
                                                                                        T,
                                                                                        U,
                                                                                        ac,
                                                                                        ad
                                                                                    ],
                                                                                    [bW]: c,
                                                                                    [bX]: bU
                                                                                },
                                                                                {
                                                                                    [bY]: [
                                                                                        ah,
                                                                                        Z,
                                                                                        T,
                                                                                        U,
                                                                                        ac,
                                                                                        af
                                                                                    ],
                                                                                    endpoint: bh,
                                                                                    [bW]: q
                                                                                },
                                                                                bo,
                                                                                bo,
                                                                                {
                                                                                    [bY]: [
                                                                                        ah,
                                                                                        Z,
                                                                                        S,
                                                                                        ac,
                                                                                        ad
                                                                                    ],
                                                                                    [bW]: c,
                                                                                    [bX]: [
                                                                                        {
                                                                                            endpoint: bp,
                                                                                            [bW]: q
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    [bY]: [
                                                                                        ah,
                                                                                        Z,
                                                                                        S,
                                                                                        ac,
                                                                                        af
                                                                                    ],
                                                                                    endpoint: bp,
                                                                                    [bW]: q
                                                                                },
                                                                                bq,
                                                                                bq,
                                                                                {
                                                                                    [bY]: [
                                                                                        ah,
                                                                                        ag,
                                                                                        T,
                                                                                        U,
                                                                                        ac,
                                                                                        ad
                                                                                    ],
                                                                                    [bW]: c,
                                                                                    [bX]: [
                                                                                        {
                                                                                            [bY]: bD,
                                                                                            endpoint: bh,
                                                                                            [bW]: q
                                                                                        },
                                                                                        bg
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    [bY]: [
                                                                                        ah,
                                                                                        ag,
                                                                                        T,
                                                                                        U,
                                                                                        ac,
                                                                                        af
                                                                                    ],
                                                                                    endpoint: bh,
                                                                                    [bW]: q
                                                                                },
                                                                                br,
                                                                                br,
                                                                                {
                                                                                    [bY]: [
                                                                                        ah,
                                                                                        ag,
                                                                                        S,
                                                                                        ac,
                                                                                        ad
                                                                                    ],
                                                                                    [bW]: c,
                                                                                    [bX]: [
                                                                                        {
                                                                                            [bY]: bD,
                                                                                            endpoint: {
                                                                                                [cd]: K,
                                                                                                [ce]: ae,
                                                                                                [cj]: W
                                                                                            },
                                                                                            [bW]: q
                                                                                        },
                                                                                        {
                                                                                            endpoint: bs,
                                                                                            [bW]: q
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    [bY]: [
                                                                                        ah,
                                                                                        ag,
                                                                                        S,
                                                                                        ac,
                                                                                        af
                                                                                    ],
                                                                                    endpoint: bs,
                                                                                    [bW]: q
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        aG
                                                    ]
                                                }
                                            ]
                                        },
                                        ai
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    error: "A region must be set when sending requests to S3.",
                    [bW]: n
                }
            ]
        }
    ]
};
const ruleSet = _data;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFq8A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resolveDefaultsModeConfig = require("./resolveDefaultsModeConfig");
parcelHelpers.exportAll(_resolveDefaultsModeConfig, exports);

},{"./resolveDefaultsModeConfig":"4Z3Kq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Z3Kq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveDefaultsModeConfig", ()=>resolveDefaultsModeConfig);
var _propertyProvider = require("@aws-sdk/property-provider");
var _bowser = require("bowser");
var _bowserDefault = parcelHelpers.interopDefault(_bowser);
var _constants = require("./constants");
const resolveDefaultsModeConfig = ({ defaultsMode  } = {})=>(0, _propertyProvider.memoize)(async ()=>{
        const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
        switch(mode?.toLowerCase()){
            case "auto":
                return Promise.resolve(isMobileBrowser() ? "mobile" : "standard");
            case "mobile":
            case "in-region":
            case "cross-region":
            case "standard":
            case "legacy":
                return Promise.resolve(mode?.toLocaleLowerCase());
            case undefined:
                return Promise.resolve("legacy");
            default:
                throw new Error(`Invalid parameter for "defaultsMode", expect ${(0, _constants.DEFAULTS_MODE_OPTIONS).join(", ")}, got ${mode}`);
        }
    });
const isMobileBrowser = ()=>{
    const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent ? (0, _bowserDefault.default).parse(window.navigator.userAgent) : undefined;
    const platform = parsedUA?.platform?.type;
    return platform === "tablet" || platform === "mobile";
};

},{"@aws-sdk/property-provider":"eAar8","bowser":"5jYCf","./constants":"dgYQg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dgYQg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULTS_MODE_OPTIONS", ()=>DEFAULTS_MODE_OPTIONS);
const DEFAULTS_MODE_OPTIONS = [
    "in-region",
    "cross-region",
    "mobile",
    "standard",
    "legacy"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cLQRb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "S3", ()=>S3);
var _smithyClient = require("@aws-sdk/smithy-client");
var _abortMultipartUploadCommand = require("./commands/AbortMultipartUploadCommand");
var _completeMultipartUploadCommand = require("./commands/CompleteMultipartUploadCommand");
var _copyObjectCommand = require("./commands/CopyObjectCommand");
var _createBucketCommand = require("./commands/CreateBucketCommand");
var _createMultipartUploadCommand = require("./commands/CreateMultipartUploadCommand");
var _deleteBucketAnalyticsConfigurationCommand = require("./commands/DeleteBucketAnalyticsConfigurationCommand");
var _deleteBucketCommand = require("./commands/DeleteBucketCommand");
var _deleteBucketCorsCommand = require("./commands/DeleteBucketCorsCommand");
var _deleteBucketEncryptionCommand = require("./commands/DeleteBucketEncryptionCommand");
var _deleteBucketIntelligentTieringConfigurationCommand = require("./commands/DeleteBucketIntelligentTieringConfigurationCommand");
var _deleteBucketInventoryConfigurationCommand = require("./commands/DeleteBucketInventoryConfigurationCommand");
var _deleteBucketLifecycleCommand = require("./commands/DeleteBucketLifecycleCommand");
var _deleteBucketMetricsConfigurationCommand = require("./commands/DeleteBucketMetricsConfigurationCommand");
var _deleteBucketOwnershipControlsCommand = require("./commands/DeleteBucketOwnershipControlsCommand");
var _deleteBucketPolicyCommand = require("./commands/DeleteBucketPolicyCommand");
var _deleteBucketReplicationCommand = require("./commands/DeleteBucketReplicationCommand");
var _deleteBucketTaggingCommand = require("./commands/DeleteBucketTaggingCommand");
var _deleteBucketWebsiteCommand = require("./commands/DeleteBucketWebsiteCommand");
var _deleteObjectCommand = require("./commands/DeleteObjectCommand");
var _deleteObjectsCommand = require("./commands/DeleteObjectsCommand");
var _deleteObjectTaggingCommand = require("./commands/DeleteObjectTaggingCommand");
var _deletePublicAccessBlockCommand = require("./commands/DeletePublicAccessBlockCommand");
var _getBucketAccelerateConfigurationCommand = require("./commands/GetBucketAccelerateConfigurationCommand");
var _getBucketAclCommand = require("./commands/GetBucketAclCommand");
var _getBucketAnalyticsConfigurationCommand = require("./commands/GetBucketAnalyticsConfigurationCommand");
var _getBucketCorsCommand = require("./commands/GetBucketCorsCommand");
var _getBucketEncryptionCommand = require("./commands/GetBucketEncryptionCommand");
var _getBucketIntelligentTieringConfigurationCommand = require("./commands/GetBucketIntelligentTieringConfigurationCommand");
var _getBucketInventoryConfigurationCommand = require("./commands/GetBucketInventoryConfigurationCommand");
var _getBucketLifecycleConfigurationCommand = require("./commands/GetBucketLifecycleConfigurationCommand");
var _getBucketLocationCommand = require("./commands/GetBucketLocationCommand");
var _getBucketLoggingCommand = require("./commands/GetBucketLoggingCommand");
var _getBucketMetricsConfigurationCommand = require("./commands/GetBucketMetricsConfigurationCommand");
var _getBucketNotificationConfigurationCommand = require("./commands/GetBucketNotificationConfigurationCommand");
var _getBucketOwnershipControlsCommand = require("./commands/GetBucketOwnershipControlsCommand");
var _getBucketPolicyCommand = require("./commands/GetBucketPolicyCommand");
var _getBucketPolicyStatusCommand = require("./commands/GetBucketPolicyStatusCommand");
var _getBucketReplicationCommand = require("./commands/GetBucketReplicationCommand");
var _getBucketRequestPaymentCommand = require("./commands/GetBucketRequestPaymentCommand");
var _getBucketTaggingCommand = require("./commands/GetBucketTaggingCommand");
var _getBucketVersioningCommand = require("./commands/GetBucketVersioningCommand");
var _getBucketWebsiteCommand = require("./commands/GetBucketWebsiteCommand");
var _getObjectAclCommand = require("./commands/GetObjectAclCommand");
var _getObjectAttributesCommand = require("./commands/GetObjectAttributesCommand");
var _getObjectCommand = require("./commands/GetObjectCommand");
var _getObjectLegalHoldCommand = require("./commands/GetObjectLegalHoldCommand");
var _getObjectLockConfigurationCommand = require("./commands/GetObjectLockConfigurationCommand");
var _getObjectRetentionCommand = require("./commands/GetObjectRetentionCommand");
var _getObjectTaggingCommand = require("./commands/GetObjectTaggingCommand");
var _getObjectTorrentCommand = require("./commands/GetObjectTorrentCommand");
var _getPublicAccessBlockCommand = require("./commands/GetPublicAccessBlockCommand");
var _headBucketCommand = require("./commands/HeadBucketCommand");
var _headObjectCommand = require("./commands/HeadObjectCommand");
var _listBucketAnalyticsConfigurationsCommand = require("./commands/ListBucketAnalyticsConfigurationsCommand");
var _listBucketIntelligentTieringConfigurationsCommand = require("./commands/ListBucketIntelligentTieringConfigurationsCommand");
var _listBucketInventoryConfigurationsCommand = require("./commands/ListBucketInventoryConfigurationsCommand");
var _listBucketMetricsConfigurationsCommand = require("./commands/ListBucketMetricsConfigurationsCommand");
var _listBucketsCommand = require("./commands/ListBucketsCommand");
var _listMultipartUploadsCommand = require("./commands/ListMultipartUploadsCommand");
var _listObjectsCommand = require("./commands/ListObjectsCommand");
var _listObjectsV2Command = require("./commands/ListObjectsV2Command");
var _listObjectVersionsCommand = require("./commands/ListObjectVersionsCommand");
var _listPartsCommand = require("./commands/ListPartsCommand");
var _putBucketAccelerateConfigurationCommand = require("./commands/PutBucketAccelerateConfigurationCommand");
var _putBucketAclCommand = require("./commands/PutBucketAclCommand");
var _putBucketAnalyticsConfigurationCommand = require("./commands/PutBucketAnalyticsConfigurationCommand");
var _putBucketCorsCommand = require("./commands/PutBucketCorsCommand");
var _putBucketEncryptionCommand = require("./commands/PutBucketEncryptionCommand");
var _putBucketIntelligentTieringConfigurationCommand = require("./commands/PutBucketIntelligentTieringConfigurationCommand");
var _putBucketInventoryConfigurationCommand = require("./commands/PutBucketInventoryConfigurationCommand");
var _putBucketLifecycleConfigurationCommand = require("./commands/PutBucketLifecycleConfigurationCommand");
var _putBucketLoggingCommand = require("./commands/PutBucketLoggingCommand");
var _putBucketMetricsConfigurationCommand = require("./commands/PutBucketMetricsConfigurationCommand");
var _putBucketNotificationConfigurationCommand = require("./commands/PutBucketNotificationConfigurationCommand");
var _putBucketOwnershipControlsCommand = require("./commands/PutBucketOwnershipControlsCommand");
var _putBucketPolicyCommand = require("./commands/PutBucketPolicyCommand");
var _putBucketReplicationCommand = require("./commands/PutBucketReplicationCommand");
var _putBucketRequestPaymentCommand = require("./commands/PutBucketRequestPaymentCommand");
var _putBucketTaggingCommand = require("./commands/PutBucketTaggingCommand");
var _putBucketVersioningCommand = require("./commands/PutBucketVersioningCommand");
var _putBucketWebsiteCommand = require("./commands/PutBucketWebsiteCommand");
var _putObjectAclCommand = require("./commands/PutObjectAclCommand");
var _putObjectCommand = require("./commands/PutObjectCommand");
var _putObjectLegalHoldCommand = require("./commands/PutObjectLegalHoldCommand");
var _putObjectLockConfigurationCommand = require("./commands/PutObjectLockConfigurationCommand");
var _putObjectRetentionCommand = require("./commands/PutObjectRetentionCommand");
var _putObjectTaggingCommand = require("./commands/PutObjectTaggingCommand");
var _putPublicAccessBlockCommand = require("./commands/PutPublicAccessBlockCommand");
var _restoreObjectCommand = require("./commands/RestoreObjectCommand");
var _selectObjectContentCommand = require("./commands/SelectObjectContentCommand");
var _uploadPartCommand = require("./commands/UploadPartCommand");
var _uploadPartCopyCommand = require("./commands/UploadPartCopyCommand");
var _writeGetObjectResponseCommand = require("./commands/WriteGetObjectResponseCommand");
var _s3Client = require("./S3Client");
const commands = {
    AbortMultipartUploadCommand: (0, _abortMultipartUploadCommand.AbortMultipartUploadCommand),
    CompleteMultipartUploadCommand: (0, _completeMultipartUploadCommand.CompleteMultipartUploadCommand),
    CopyObjectCommand: (0, _copyObjectCommand.CopyObjectCommand),
    CreateBucketCommand: (0, _createBucketCommand.CreateBucketCommand),
    CreateMultipartUploadCommand: (0, _createMultipartUploadCommand.CreateMultipartUploadCommand),
    DeleteBucketCommand: (0, _deleteBucketCommand.DeleteBucketCommand),
    DeleteBucketAnalyticsConfigurationCommand: (0, _deleteBucketAnalyticsConfigurationCommand.DeleteBucketAnalyticsConfigurationCommand),
    DeleteBucketCorsCommand: (0, _deleteBucketCorsCommand.DeleteBucketCorsCommand),
    DeleteBucketEncryptionCommand: (0, _deleteBucketEncryptionCommand.DeleteBucketEncryptionCommand),
    DeleteBucketIntelligentTieringConfigurationCommand: (0, _deleteBucketIntelligentTieringConfigurationCommand.DeleteBucketIntelligentTieringConfigurationCommand),
    DeleteBucketInventoryConfigurationCommand: (0, _deleteBucketInventoryConfigurationCommand.DeleteBucketInventoryConfigurationCommand),
    DeleteBucketLifecycleCommand: (0, _deleteBucketLifecycleCommand.DeleteBucketLifecycleCommand),
    DeleteBucketMetricsConfigurationCommand: (0, _deleteBucketMetricsConfigurationCommand.DeleteBucketMetricsConfigurationCommand),
    DeleteBucketOwnershipControlsCommand: (0, _deleteBucketOwnershipControlsCommand.DeleteBucketOwnershipControlsCommand),
    DeleteBucketPolicyCommand: (0, _deleteBucketPolicyCommand.DeleteBucketPolicyCommand),
    DeleteBucketReplicationCommand: (0, _deleteBucketReplicationCommand.DeleteBucketReplicationCommand),
    DeleteBucketTaggingCommand: (0, _deleteBucketTaggingCommand.DeleteBucketTaggingCommand),
    DeleteBucketWebsiteCommand: (0, _deleteBucketWebsiteCommand.DeleteBucketWebsiteCommand),
    DeleteObjectCommand: (0, _deleteObjectCommand.DeleteObjectCommand),
    DeleteObjectsCommand: (0, _deleteObjectsCommand.DeleteObjectsCommand),
    DeleteObjectTaggingCommand: (0, _deleteObjectTaggingCommand.DeleteObjectTaggingCommand),
    DeletePublicAccessBlockCommand: (0, _deletePublicAccessBlockCommand.DeletePublicAccessBlockCommand),
    GetBucketAccelerateConfigurationCommand: (0, _getBucketAccelerateConfigurationCommand.GetBucketAccelerateConfigurationCommand),
    GetBucketAclCommand: (0, _getBucketAclCommand.GetBucketAclCommand),
    GetBucketAnalyticsConfigurationCommand: (0, _getBucketAnalyticsConfigurationCommand.GetBucketAnalyticsConfigurationCommand),
    GetBucketCorsCommand: (0, _getBucketCorsCommand.GetBucketCorsCommand),
    GetBucketEncryptionCommand: (0, _getBucketEncryptionCommand.GetBucketEncryptionCommand),
    GetBucketIntelligentTieringConfigurationCommand: (0, _getBucketIntelligentTieringConfigurationCommand.GetBucketIntelligentTieringConfigurationCommand),
    GetBucketInventoryConfigurationCommand: (0, _getBucketInventoryConfigurationCommand.GetBucketInventoryConfigurationCommand),
    GetBucketLifecycleConfigurationCommand: (0, _getBucketLifecycleConfigurationCommand.GetBucketLifecycleConfigurationCommand),
    GetBucketLocationCommand: (0, _getBucketLocationCommand.GetBucketLocationCommand),
    GetBucketLoggingCommand: (0, _getBucketLoggingCommand.GetBucketLoggingCommand),
    GetBucketMetricsConfigurationCommand: (0, _getBucketMetricsConfigurationCommand.GetBucketMetricsConfigurationCommand),
    GetBucketNotificationConfigurationCommand: (0, _getBucketNotificationConfigurationCommand.GetBucketNotificationConfigurationCommand),
    GetBucketOwnershipControlsCommand: (0, _getBucketOwnershipControlsCommand.GetBucketOwnershipControlsCommand),
    GetBucketPolicyCommand: (0, _getBucketPolicyCommand.GetBucketPolicyCommand),
    GetBucketPolicyStatusCommand: (0, _getBucketPolicyStatusCommand.GetBucketPolicyStatusCommand),
    GetBucketReplicationCommand: (0, _getBucketReplicationCommand.GetBucketReplicationCommand),
    GetBucketRequestPaymentCommand: (0, _getBucketRequestPaymentCommand.GetBucketRequestPaymentCommand),
    GetBucketTaggingCommand: (0, _getBucketTaggingCommand.GetBucketTaggingCommand),
    GetBucketVersioningCommand: (0, _getBucketVersioningCommand.GetBucketVersioningCommand),
    GetBucketWebsiteCommand: (0, _getBucketWebsiteCommand.GetBucketWebsiteCommand),
    GetObjectCommand: (0, _getObjectCommand.GetObjectCommand),
    GetObjectAclCommand: (0, _getObjectAclCommand.GetObjectAclCommand),
    GetObjectAttributesCommand: (0, _getObjectAttributesCommand.GetObjectAttributesCommand),
    GetObjectLegalHoldCommand: (0, _getObjectLegalHoldCommand.GetObjectLegalHoldCommand),
    GetObjectLockConfigurationCommand: (0, _getObjectLockConfigurationCommand.GetObjectLockConfigurationCommand),
    GetObjectRetentionCommand: (0, _getObjectRetentionCommand.GetObjectRetentionCommand),
    GetObjectTaggingCommand: (0, _getObjectTaggingCommand.GetObjectTaggingCommand),
    GetObjectTorrentCommand: (0, _getObjectTorrentCommand.GetObjectTorrentCommand),
    GetPublicAccessBlockCommand: (0, _getPublicAccessBlockCommand.GetPublicAccessBlockCommand),
    HeadBucketCommand: (0, _headBucketCommand.HeadBucketCommand),
    HeadObjectCommand: (0, _headObjectCommand.HeadObjectCommand),
    ListBucketAnalyticsConfigurationsCommand: (0, _listBucketAnalyticsConfigurationsCommand.ListBucketAnalyticsConfigurationsCommand),
    ListBucketIntelligentTieringConfigurationsCommand: (0, _listBucketIntelligentTieringConfigurationsCommand.ListBucketIntelligentTieringConfigurationsCommand),
    ListBucketInventoryConfigurationsCommand: (0, _listBucketInventoryConfigurationsCommand.ListBucketInventoryConfigurationsCommand),
    ListBucketMetricsConfigurationsCommand: (0, _listBucketMetricsConfigurationsCommand.ListBucketMetricsConfigurationsCommand),
    ListBucketsCommand: (0, _listBucketsCommand.ListBucketsCommand),
    ListMultipartUploadsCommand: (0, _listMultipartUploadsCommand.ListMultipartUploadsCommand),
    ListObjectsCommand: (0, _listObjectsCommand.ListObjectsCommand),
    ListObjectsV2Command: (0, _listObjectsV2Command.ListObjectsV2Command),
    ListObjectVersionsCommand: (0, _listObjectVersionsCommand.ListObjectVersionsCommand),
    ListPartsCommand: (0, _listPartsCommand.ListPartsCommand),
    PutBucketAccelerateConfigurationCommand: (0, _putBucketAccelerateConfigurationCommand.PutBucketAccelerateConfigurationCommand),
    PutBucketAclCommand: (0, _putBucketAclCommand.PutBucketAclCommand),
    PutBucketAnalyticsConfigurationCommand: (0, _putBucketAnalyticsConfigurationCommand.PutBucketAnalyticsConfigurationCommand),
    PutBucketCorsCommand: (0, _putBucketCorsCommand.PutBucketCorsCommand),
    PutBucketEncryptionCommand: (0, _putBucketEncryptionCommand.PutBucketEncryptionCommand),
    PutBucketIntelligentTieringConfigurationCommand: (0, _putBucketIntelligentTieringConfigurationCommand.PutBucketIntelligentTieringConfigurationCommand),
    PutBucketInventoryConfigurationCommand: (0, _putBucketInventoryConfigurationCommand.PutBucketInventoryConfigurationCommand),
    PutBucketLifecycleConfigurationCommand: (0, _putBucketLifecycleConfigurationCommand.PutBucketLifecycleConfigurationCommand),
    PutBucketLoggingCommand: (0, _putBucketLoggingCommand.PutBucketLoggingCommand),
    PutBucketMetricsConfigurationCommand: (0, _putBucketMetricsConfigurationCommand.PutBucketMetricsConfigurationCommand),
    PutBucketNotificationConfigurationCommand: (0, _putBucketNotificationConfigurationCommand.PutBucketNotificationConfigurationCommand),
    PutBucketOwnershipControlsCommand: (0, _putBucketOwnershipControlsCommand.PutBucketOwnershipControlsCommand),
    PutBucketPolicyCommand: (0, _putBucketPolicyCommand.PutBucketPolicyCommand),
    PutBucketReplicationCommand: (0, _putBucketReplicationCommand.PutBucketReplicationCommand),
    PutBucketRequestPaymentCommand: (0, _putBucketRequestPaymentCommand.PutBucketRequestPaymentCommand),
    PutBucketTaggingCommand: (0, _putBucketTaggingCommand.PutBucketTaggingCommand),
    PutBucketVersioningCommand: (0, _putBucketVersioningCommand.PutBucketVersioningCommand),
    PutBucketWebsiteCommand: (0, _putBucketWebsiteCommand.PutBucketWebsiteCommand),
    PutObjectCommand: (0, _putObjectCommand.PutObjectCommand),
    PutObjectAclCommand: (0, _putObjectAclCommand.PutObjectAclCommand),
    PutObjectLegalHoldCommand: (0, _putObjectLegalHoldCommand.PutObjectLegalHoldCommand),
    PutObjectLockConfigurationCommand: (0, _putObjectLockConfigurationCommand.PutObjectLockConfigurationCommand),
    PutObjectRetentionCommand: (0, _putObjectRetentionCommand.PutObjectRetentionCommand),
    PutObjectTaggingCommand: (0, _putObjectTaggingCommand.PutObjectTaggingCommand),
    PutPublicAccessBlockCommand: (0, _putPublicAccessBlockCommand.PutPublicAccessBlockCommand),
    RestoreObjectCommand: (0, _restoreObjectCommand.RestoreObjectCommand),
    SelectObjectContentCommand: (0, _selectObjectContentCommand.SelectObjectContentCommand),
    UploadPartCommand: (0, _uploadPartCommand.UploadPartCommand),
    UploadPartCopyCommand: (0, _uploadPartCopyCommand.UploadPartCopyCommand),
    WriteGetObjectResponseCommand: (0, _writeGetObjectResponseCommand.WriteGetObjectResponseCommand)
};
class S3 extends (0, _s3Client.S3Client) {
}
(0, _smithyClient.createAggregatedClient)(commands, S3);

},{"@aws-sdk/smithy-client":"ats0l","./commands/AbortMultipartUploadCommand":"2nRBz","./commands/CompleteMultipartUploadCommand":"almpH","./commands/CopyObjectCommand":"3CRz3","./commands/CreateBucketCommand":"6goC4","./commands/CreateMultipartUploadCommand":"8uRl8","./commands/DeleteBucketAnalyticsConfigurationCommand":"faHXV","./commands/DeleteBucketCommand":"jn0Fw","./commands/DeleteBucketCorsCommand":"1xcuV","./commands/DeleteBucketEncryptionCommand":"eKf2i","./commands/DeleteBucketIntelligentTieringConfigurationCommand":"fCldy","./commands/DeleteBucketInventoryConfigurationCommand":"860EX","./commands/DeleteBucketLifecycleCommand":"f9K9o","./commands/DeleteBucketMetricsConfigurationCommand":"cMib0","./commands/DeleteBucketOwnershipControlsCommand":"d7qRW","./commands/DeleteBucketPolicyCommand":"fGSax","./commands/DeleteBucketReplicationCommand":"4U0k2","./commands/DeleteBucketTaggingCommand":"6PWcY","./commands/DeleteBucketWebsiteCommand":"7rdpL","./commands/DeleteObjectCommand":"1SZLs","./commands/DeleteObjectsCommand":"3Xs5S","./commands/DeleteObjectTaggingCommand":"gE019","./commands/DeletePublicAccessBlockCommand":"4vaOW","./commands/GetBucketAccelerateConfigurationCommand":"ijiPj","./commands/GetBucketAclCommand":"hSPaV","./commands/GetBucketAnalyticsConfigurationCommand":"gJrBY","./commands/GetBucketCorsCommand":"49ic2","./commands/GetBucketEncryptionCommand":"hXT2o","./commands/GetBucketIntelligentTieringConfigurationCommand":"8F3Nx","./commands/GetBucketInventoryConfigurationCommand":"jkDGR","./commands/GetBucketLifecycleConfigurationCommand":"aQS7J","./commands/GetBucketLocationCommand":"l1ojc","./commands/GetBucketLoggingCommand":"aYXJ8","./commands/GetBucketMetricsConfigurationCommand":"2Wvbz","./commands/GetBucketNotificationConfigurationCommand":"6vA3E","./commands/GetBucketOwnershipControlsCommand":"30Rfx","./commands/GetBucketPolicyCommand":"9iZjE","./commands/GetBucketPolicyStatusCommand":"kWRPJ","./commands/GetBucketReplicationCommand":"4egcA","./commands/GetBucketRequestPaymentCommand":"KZMrw","./commands/GetBucketTaggingCommand":"iYJZD","./commands/GetBucketVersioningCommand":"gnv3r","./commands/GetBucketWebsiteCommand":"rXCvL","./commands/GetObjectAclCommand":"aKKe8","./commands/GetObjectAttributesCommand":"fQNYl","./commands/GetObjectCommand":"7JB7P","./commands/GetObjectLegalHoldCommand":"exGUh","./commands/GetObjectLockConfigurationCommand":"hqSGb","./commands/GetObjectRetentionCommand":"5QEMq","./commands/GetObjectTaggingCommand":"eTJKj","./commands/GetObjectTorrentCommand":"7g3kA","./commands/GetPublicAccessBlockCommand":"wRCYl","./commands/HeadBucketCommand":"6w0s6","./commands/HeadObjectCommand":"dHKtr","./commands/ListBucketAnalyticsConfigurationsCommand":"7cazJ","./commands/ListBucketIntelligentTieringConfigurationsCommand":"9ZBWg","./commands/ListBucketInventoryConfigurationsCommand":"jxcpe","./commands/ListBucketMetricsConfigurationsCommand":"1U21v","./commands/ListBucketsCommand":"j25ta","./commands/ListMultipartUploadsCommand":"7uXfN","./commands/ListObjectsCommand":"kpKDh","./commands/ListObjectsV2Command":"2fiSo","./commands/ListObjectVersionsCommand":"2F9ix","./commands/ListPartsCommand":"3iUOT","./commands/PutBucketAccelerateConfigurationCommand":"fsI9c","./commands/PutBucketAclCommand":"lgtRq","./commands/PutBucketAnalyticsConfigurationCommand":"6sg2b","./commands/PutBucketCorsCommand":"4JoGb","./commands/PutBucketEncryptionCommand":"dFYuw","./commands/PutBucketIntelligentTieringConfigurationCommand":"jA5Je","./commands/PutBucketInventoryConfigurationCommand":"bjzqq","./commands/PutBucketLifecycleConfigurationCommand":"dLPxU","./commands/PutBucketLoggingCommand":"3pNrt","./commands/PutBucketMetricsConfigurationCommand":"adGnu","./commands/PutBucketNotificationConfigurationCommand":"24ATi","./commands/PutBucketOwnershipControlsCommand":"faEzd","./commands/PutBucketPolicyCommand":"kaWfg","./commands/PutBucketReplicationCommand":"6Ue2q","./commands/PutBucketRequestPaymentCommand":"9LH6x","./commands/PutBucketTaggingCommand":"jT6rN","./commands/PutBucketVersioningCommand":"fsjbT","./commands/PutBucketWebsiteCommand":"97y5a","./commands/PutObjectAclCommand":"j8SCH","./commands/PutObjectCommand":"2J42a","./commands/PutObjectLegalHoldCommand":"29HlY","./commands/PutObjectLockConfigurationCommand":"fbw27","./commands/PutObjectRetentionCommand":"1R5tg","./commands/PutObjectTaggingCommand":"gFb9V","./commands/PutPublicAccessBlockCommand":"9epma","./commands/RestoreObjectCommand":"69civ","./commands/SelectObjectContentCommand":"aU2MM","./commands/UploadPartCommand":"kd9TM","./commands/UploadPartCopyCommand":"2jcli","./commands/WriteGetObjectResponseCommand":"ajOg1","./S3Client":"c6tAy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2nRBz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "AbortMultipartUploadCommand", ()=>AbortMultipartUploadCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class AbortMultipartUploadCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, AbortMultipartUploadCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "AbortMultipartUploadCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_AbortMultipartUploadCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_AbortMultipartUploadCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2et4H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "se_AbortMultipartUploadCommand", ()=>se_AbortMultipartUploadCommand);
parcelHelpers.export(exports, "se_CompleteMultipartUploadCommand", ()=>se_CompleteMultipartUploadCommand);
parcelHelpers.export(exports, "se_CopyObjectCommand", ()=>se_CopyObjectCommand);
parcelHelpers.export(exports, "se_CreateBucketCommand", ()=>se_CreateBucketCommand);
parcelHelpers.export(exports, "se_CreateMultipartUploadCommand", ()=>se_CreateMultipartUploadCommand);
parcelHelpers.export(exports, "se_DeleteBucketCommand", ()=>se_DeleteBucketCommand);
parcelHelpers.export(exports, "se_DeleteBucketAnalyticsConfigurationCommand", ()=>se_DeleteBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "se_DeleteBucketCorsCommand", ()=>se_DeleteBucketCorsCommand);
parcelHelpers.export(exports, "se_DeleteBucketEncryptionCommand", ()=>se_DeleteBucketEncryptionCommand);
parcelHelpers.export(exports, "se_DeleteBucketIntelligentTieringConfigurationCommand", ()=>se_DeleteBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "se_DeleteBucketInventoryConfigurationCommand", ()=>se_DeleteBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "se_DeleteBucketLifecycleCommand", ()=>se_DeleteBucketLifecycleCommand);
parcelHelpers.export(exports, "se_DeleteBucketMetricsConfigurationCommand", ()=>se_DeleteBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "se_DeleteBucketOwnershipControlsCommand", ()=>se_DeleteBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "se_DeleteBucketPolicyCommand", ()=>se_DeleteBucketPolicyCommand);
parcelHelpers.export(exports, "se_DeleteBucketReplicationCommand", ()=>se_DeleteBucketReplicationCommand);
parcelHelpers.export(exports, "se_DeleteBucketTaggingCommand", ()=>se_DeleteBucketTaggingCommand);
parcelHelpers.export(exports, "se_DeleteBucketWebsiteCommand", ()=>se_DeleteBucketWebsiteCommand);
parcelHelpers.export(exports, "se_DeleteObjectCommand", ()=>se_DeleteObjectCommand);
parcelHelpers.export(exports, "se_DeleteObjectsCommand", ()=>se_DeleteObjectsCommand);
parcelHelpers.export(exports, "se_DeleteObjectTaggingCommand", ()=>se_DeleteObjectTaggingCommand);
parcelHelpers.export(exports, "se_DeletePublicAccessBlockCommand", ()=>se_DeletePublicAccessBlockCommand);
parcelHelpers.export(exports, "se_GetBucketAccelerateConfigurationCommand", ()=>se_GetBucketAccelerateConfigurationCommand);
parcelHelpers.export(exports, "se_GetBucketAclCommand", ()=>se_GetBucketAclCommand);
parcelHelpers.export(exports, "se_GetBucketAnalyticsConfigurationCommand", ()=>se_GetBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "se_GetBucketCorsCommand", ()=>se_GetBucketCorsCommand);
parcelHelpers.export(exports, "se_GetBucketEncryptionCommand", ()=>se_GetBucketEncryptionCommand);
parcelHelpers.export(exports, "se_GetBucketIntelligentTieringConfigurationCommand", ()=>se_GetBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "se_GetBucketInventoryConfigurationCommand", ()=>se_GetBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "se_GetBucketLifecycleConfigurationCommand", ()=>se_GetBucketLifecycleConfigurationCommand);
parcelHelpers.export(exports, "se_GetBucketLocationCommand", ()=>se_GetBucketLocationCommand);
parcelHelpers.export(exports, "se_GetBucketLoggingCommand", ()=>se_GetBucketLoggingCommand);
parcelHelpers.export(exports, "se_GetBucketMetricsConfigurationCommand", ()=>se_GetBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "se_GetBucketNotificationConfigurationCommand", ()=>se_GetBucketNotificationConfigurationCommand);
parcelHelpers.export(exports, "se_GetBucketOwnershipControlsCommand", ()=>se_GetBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "se_GetBucketPolicyCommand", ()=>se_GetBucketPolicyCommand);
parcelHelpers.export(exports, "se_GetBucketPolicyStatusCommand", ()=>se_GetBucketPolicyStatusCommand);
parcelHelpers.export(exports, "se_GetBucketReplicationCommand", ()=>se_GetBucketReplicationCommand);
parcelHelpers.export(exports, "se_GetBucketRequestPaymentCommand", ()=>se_GetBucketRequestPaymentCommand);
parcelHelpers.export(exports, "se_GetBucketTaggingCommand", ()=>se_GetBucketTaggingCommand);
parcelHelpers.export(exports, "se_GetBucketVersioningCommand", ()=>se_GetBucketVersioningCommand);
parcelHelpers.export(exports, "se_GetBucketWebsiteCommand", ()=>se_GetBucketWebsiteCommand);
parcelHelpers.export(exports, "se_GetObjectCommand", ()=>se_GetObjectCommand);
parcelHelpers.export(exports, "se_GetObjectAclCommand", ()=>se_GetObjectAclCommand);
parcelHelpers.export(exports, "se_GetObjectAttributesCommand", ()=>se_GetObjectAttributesCommand);
parcelHelpers.export(exports, "se_GetObjectLegalHoldCommand", ()=>se_GetObjectLegalHoldCommand);
parcelHelpers.export(exports, "se_GetObjectLockConfigurationCommand", ()=>se_GetObjectLockConfigurationCommand);
parcelHelpers.export(exports, "se_GetObjectRetentionCommand", ()=>se_GetObjectRetentionCommand);
parcelHelpers.export(exports, "se_GetObjectTaggingCommand", ()=>se_GetObjectTaggingCommand);
parcelHelpers.export(exports, "se_GetObjectTorrentCommand", ()=>se_GetObjectTorrentCommand);
parcelHelpers.export(exports, "se_GetPublicAccessBlockCommand", ()=>se_GetPublicAccessBlockCommand);
parcelHelpers.export(exports, "se_HeadBucketCommand", ()=>se_HeadBucketCommand);
parcelHelpers.export(exports, "se_HeadObjectCommand", ()=>se_HeadObjectCommand);
parcelHelpers.export(exports, "se_ListBucketAnalyticsConfigurationsCommand", ()=>se_ListBucketAnalyticsConfigurationsCommand);
parcelHelpers.export(exports, "se_ListBucketIntelligentTieringConfigurationsCommand", ()=>se_ListBucketIntelligentTieringConfigurationsCommand);
parcelHelpers.export(exports, "se_ListBucketInventoryConfigurationsCommand", ()=>se_ListBucketInventoryConfigurationsCommand);
parcelHelpers.export(exports, "se_ListBucketMetricsConfigurationsCommand", ()=>se_ListBucketMetricsConfigurationsCommand);
parcelHelpers.export(exports, "se_ListBucketsCommand", ()=>se_ListBucketsCommand);
parcelHelpers.export(exports, "se_ListMultipartUploadsCommand", ()=>se_ListMultipartUploadsCommand);
parcelHelpers.export(exports, "se_ListObjectsCommand", ()=>se_ListObjectsCommand);
parcelHelpers.export(exports, "se_ListObjectsV2Command", ()=>se_ListObjectsV2Command);
parcelHelpers.export(exports, "se_ListObjectVersionsCommand", ()=>se_ListObjectVersionsCommand);
parcelHelpers.export(exports, "se_ListPartsCommand", ()=>se_ListPartsCommand);
parcelHelpers.export(exports, "se_PutBucketAccelerateConfigurationCommand", ()=>se_PutBucketAccelerateConfigurationCommand);
parcelHelpers.export(exports, "se_PutBucketAclCommand", ()=>se_PutBucketAclCommand);
parcelHelpers.export(exports, "se_PutBucketAnalyticsConfigurationCommand", ()=>se_PutBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "se_PutBucketCorsCommand", ()=>se_PutBucketCorsCommand);
parcelHelpers.export(exports, "se_PutBucketEncryptionCommand", ()=>se_PutBucketEncryptionCommand);
parcelHelpers.export(exports, "se_PutBucketIntelligentTieringConfigurationCommand", ()=>se_PutBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "se_PutBucketInventoryConfigurationCommand", ()=>se_PutBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "se_PutBucketLifecycleConfigurationCommand", ()=>se_PutBucketLifecycleConfigurationCommand);
parcelHelpers.export(exports, "se_PutBucketLoggingCommand", ()=>se_PutBucketLoggingCommand);
parcelHelpers.export(exports, "se_PutBucketMetricsConfigurationCommand", ()=>se_PutBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "se_PutBucketNotificationConfigurationCommand", ()=>se_PutBucketNotificationConfigurationCommand);
parcelHelpers.export(exports, "se_PutBucketOwnershipControlsCommand", ()=>se_PutBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "se_PutBucketPolicyCommand", ()=>se_PutBucketPolicyCommand);
parcelHelpers.export(exports, "se_PutBucketReplicationCommand", ()=>se_PutBucketReplicationCommand);
parcelHelpers.export(exports, "se_PutBucketRequestPaymentCommand", ()=>se_PutBucketRequestPaymentCommand);
parcelHelpers.export(exports, "se_PutBucketTaggingCommand", ()=>se_PutBucketTaggingCommand);
parcelHelpers.export(exports, "se_PutBucketVersioningCommand", ()=>se_PutBucketVersioningCommand);
parcelHelpers.export(exports, "se_PutBucketWebsiteCommand", ()=>se_PutBucketWebsiteCommand);
parcelHelpers.export(exports, "se_PutObjectCommand", ()=>se_PutObjectCommand);
parcelHelpers.export(exports, "se_PutObjectAclCommand", ()=>se_PutObjectAclCommand);
parcelHelpers.export(exports, "se_PutObjectLegalHoldCommand", ()=>se_PutObjectLegalHoldCommand);
parcelHelpers.export(exports, "se_PutObjectLockConfigurationCommand", ()=>se_PutObjectLockConfigurationCommand);
parcelHelpers.export(exports, "se_PutObjectRetentionCommand", ()=>se_PutObjectRetentionCommand);
parcelHelpers.export(exports, "se_PutObjectTaggingCommand", ()=>se_PutObjectTaggingCommand);
parcelHelpers.export(exports, "se_PutPublicAccessBlockCommand", ()=>se_PutPublicAccessBlockCommand);
parcelHelpers.export(exports, "se_RestoreObjectCommand", ()=>se_RestoreObjectCommand);
parcelHelpers.export(exports, "se_SelectObjectContentCommand", ()=>se_SelectObjectContentCommand);
parcelHelpers.export(exports, "se_UploadPartCommand", ()=>se_UploadPartCommand);
parcelHelpers.export(exports, "se_UploadPartCopyCommand", ()=>se_UploadPartCopyCommand);
parcelHelpers.export(exports, "se_WriteGetObjectResponseCommand", ()=>se_WriteGetObjectResponseCommand);
parcelHelpers.export(exports, "de_AbortMultipartUploadCommand", ()=>de_AbortMultipartUploadCommand);
parcelHelpers.export(exports, "de_CompleteMultipartUploadCommand", ()=>de_CompleteMultipartUploadCommand);
parcelHelpers.export(exports, "de_CopyObjectCommand", ()=>de_CopyObjectCommand);
parcelHelpers.export(exports, "de_CreateBucketCommand", ()=>de_CreateBucketCommand);
parcelHelpers.export(exports, "de_CreateMultipartUploadCommand", ()=>de_CreateMultipartUploadCommand);
parcelHelpers.export(exports, "de_DeleteBucketCommand", ()=>de_DeleteBucketCommand);
parcelHelpers.export(exports, "de_DeleteBucketAnalyticsConfigurationCommand", ()=>de_DeleteBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "de_DeleteBucketCorsCommand", ()=>de_DeleteBucketCorsCommand);
parcelHelpers.export(exports, "de_DeleteBucketEncryptionCommand", ()=>de_DeleteBucketEncryptionCommand);
parcelHelpers.export(exports, "de_DeleteBucketIntelligentTieringConfigurationCommand", ()=>de_DeleteBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "de_DeleteBucketInventoryConfigurationCommand", ()=>de_DeleteBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "de_DeleteBucketLifecycleCommand", ()=>de_DeleteBucketLifecycleCommand);
parcelHelpers.export(exports, "de_DeleteBucketMetricsConfigurationCommand", ()=>de_DeleteBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "de_DeleteBucketOwnershipControlsCommand", ()=>de_DeleteBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "de_DeleteBucketPolicyCommand", ()=>de_DeleteBucketPolicyCommand);
parcelHelpers.export(exports, "de_DeleteBucketReplicationCommand", ()=>de_DeleteBucketReplicationCommand);
parcelHelpers.export(exports, "de_DeleteBucketTaggingCommand", ()=>de_DeleteBucketTaggingCommand);
parcelHelpers.export(exports, "de_DeleteBucketWebsiteCommand", ()=>de_DeleteBucketWebsiteCommand);
parcelHelpers.export(exports, "de_DeleteObjectCommand", ()=>de_DeleteObjectCommand);
parcelHelpers.export(exports, "de_DeleteObjectsCommand", ()=>de_DeleteObjectsCommand);
parcelHelpers.export(exports, "de_DeleteObjectTaggingCommand", ()=>de_DeleteObjectTaggingCommand);
parcelHelpers.export(exports, "de_DeletePublicAccessBlockCommand", ()=>de_DeletePublicAccessBlockCommand);
parcelHelpers.export(exports, "de_GetBucketAccelerateConfigurationCommand", ()=>de_GetBucketAccelerateConfigurationCommand);
parcelHelpers.export(exports, "de_GetBucketAclCommand", ()=>de_GetBucketAclCommand);
parcelHelpers.export(exports, "de_GetBucketAnalyticsConfigurationCommand", ()=>de_GetBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "de_GetBucketCorsCommand", ()=>de_GetBucketCorsCommand);
parcelHelpers.export(exports, "de_GetBucketEncryptionCommand", ()=>de_GetBucketEncryptionCommand);
parcelHelpers.export(exports, "de_GetBucketIntelligentTieringConfigurationCommand", ()=>de_GetBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "de_GetBucketInventoryConfigurationCommand", ()=>de_GetBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "de_GetBucketLifecycleConfigurationCommand", ()=>de_GetBucketLifecycleConfigurationCommand);
parcelHelpers.export(exports, "de_GetBucketLocationCommand", ()=>de_GetBucketLocationCommand);
parcelHelpers.export(exports, "de_GetBucketLoggingCommand", ()=>de_GetBucketLoggingCommand);
parcelHelpers.export(exports, "de_GetBucketMetricsConfigurationCommand", ()=>de_GetBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "de_GetBucketNotificationConfigurationCommand", ()=>de_GetBucketNotificationConfigurationCommand);
parcelHelpers.export(exports, "de_GetBucketOwnershipControlsCommand", ()=>de_GetBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "de_GetBucketPolicyCommand", ()=>de_GetBucketPolicyCommand);
parcelHelpers.export(exports, "de_GetBucketPolicyStatusCommand", ()=>de_GetBucketPolicyStatusCommand);
parcelHelpers.export(exports, "de_GetBucketReplicationCommand", ()=>de_GetBucketReplicationCommand);
parcelHelpers.export(exports, "de_GetBucketRequestPaymentCommand", ()=>de_GetBucketRequestPaymentCommand);
parcelHelpers.export(exports, "de_GetBucketTaggingCommand", ()=>de_GetBucketTaggingCommand);
parcelHelpers.export(exports, "de_GetBucketVersioningCommand", ()=>de_GetBucketVersioningCommand);
parcelHelpers.export(exports, "de_GetBucketWebsiteCommand", ()=>de_GetBucketWebsiteCommand);
parcelHelpers.export(exports, "de_GetObjectCommand", ()=>de_GetObjectCommand);
parcelHelpers.export(exports, "de_GetObjectAclCommand", ()=>de_GetObjectAclCommand);
parcelHelpers.export(exports, "de_GetObjectAttributesCommand", ()=>de_GetObjectAttributesCommand);
parcelHelpers.export(exports, "de_GetObjectLegalHoldCommand", ()=>de_GetObjectLegalHoldCommand);
parcelHelpers.export(exports, "de_GetObjectLockConfigurationCommand", ()=>de_GetObjectLockConfigurationCommand);
parcelHelpers.export(exports, "de_GetObjectRetentionCommand", ()=>de_GetObjectRetentionCommand);
parcelHelpers.export(exports, "de_GetObjectTaggingCommand", ()=>de_GetObjectTaggingCommand);
parcelHelpers.export(exports, "de_GetObjectTorrentCommand", ()=>de_GetObjectTorrentCommand);
parcelHelpers.export(exports, "de_GetPublicAccessBlockCommand", ()=>de_GetPublicAccessBlockCommand);
parcelHelpers.export(exports, "de_HeadBucketCommand", ()=>de_HeadBucketCommand);
parcelHelpers.export(exports, "de_HeadObjectCommand", ()=>de_HeadObjectCommand);
parcelHelpers.export(exports, "de_ListBucketAnalyticsConfigurationsCommand", ()=>de_ListBucketAnalyticsConfigurationsCommand);
parcelHelpers.export(exports, "de_ListBucketIntelligentTieringConfigurationsCommand", ()=>de_ListBucketIntelligentTieringConfigurationsCommand);
parcelHelpers.export(exports, "de_ListBucketInventoryConfigurationsCommand", ()=>de_ListBucketInventoryConfigurationsCommand);
parcelHelpers.export(exports, "de_ListBucketMetricsConfigurationsCommand", ()=>de_ListBucketMetricsConfigurationsCommand);
parcelHelpers.export(exports, "de_ListBucketsCommand", ()=>de_ListBucketsCommand);
parcelHelpers.export(exports, "de_ListMultipartUploadsCommand", ()=>de_ListMultipartUploadsCommand);
parcelHelpers.export(exports, "de_ListObjectsCommand", ()=>de_ListObjectsCommand);
parcelHelpers.export(exports, "de_ListObjectsV2Command", ()=>de_ListObjectsV2Command);
parcelHelpers.export(exports, "de_ListObjectVersionsCommand", ()=>de_ListObjectVersionsCommand);
parcelHelpers.export(exports, "de_ListPartsCommand", ()=>de_ListPartsCommand);
parcelHelpers.export(exports, "de_PutBucketAccelerateConfigurationCommand", ()=>de_PutBucketAccelerateConfigurationCommand);
parcelHelpers.export(exports, "de_PutBucketAclCommand", ()=>de_PutBucketAclCommand);
parcelHelpers.export(exports, "de_PutBucketAnalyticsConfigurationCommand", ()=>de_PutBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "de_PutBucketCorsCommand", ()=>de_PutBucketCorsCommand);
parcelHelpers.export(exports, "de_PutBucketEncryptionCommand", ()=>de_PutBucketEncryptionCommand);
parcelHelpers.export(exports, "de_PutBucketIntelligentTieringConfigurationCommand", ()=>de_PutBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "de_PutBucketInventoryConfigurationCommand", ()=>de_PutBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "de_PutBucketLifecycleConfigurationCommand", ()=>de_PutBucketLifecycleConfigurationCommand);
parcelHelpers.export(exports, "de_PutBucketLoggingCommand", ()=>de_PutBucketLoggingCommand);
parcelHelpers.export(exports, "de_PutBucketMetricsConfigurationCommand", ()=>de_PutBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "de_PutBucketNotificationConfigurationCommand", ()=>de_PutBucketNotificationConfigurationCommand);
parcelHelpers.export(exports, "de_PutBucketOwnershipControlsCommand", ()=>de_PutBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "de_PutBucketPolicyCommand", ()=>de_PutBucketPolicyCommand);
parcelHelpers.export(exports, "de_PutBucketReplicationCommand", ()=>de_PutBucketReplicationCommand);
parcelHelpers.export(exports, "de_PutBucketRequestPaymentCommand", ()=>de_PutBucketRequestPaymentCommand);
parcelHelpers.export(exports, "de_PutBucketTaggingCommand", ()=>de_PutBucketTaggingCommand);
parcelHelpers.export(exports, "de_PutBucketVersioningCommand", ()=>de_PutBucketVersioningCommand);
parcelHelpers.export(exports, "de_PutBucketWebsiteCommand", ()=>de_PutBucketWebsiteCommand);
parcelHelpers.export(exports, "de_PutObjectCommand", ()=>de_PutObjectCommand);
parcelHelpers.export(exports, "de_PutObjectAclCommand", ()=>de_PutObjectAclCommand);
parcelHelpers.export(exports, "de_PutObjectLegalHoldCommand", ()=>de_PutObjectLegalHoldCommand);
parcelHelpers.export(exports, "de_PutObjectLockConfigurationCommand", ()=>de_PutObjectLockConfigurationCommand);
parcelHelpers.export(exports, "de_PutObjectRetentionCommand", ()=>de_PutObjectRetentionCommand);
parcelHelpers.export(exports, "de_PutObjectTaggingCommand", ()=>de_PutObjectTaggingCommand);
parcelHelpers.export(exports, "de_PutPublicAccessBlockCommand", ()=>de_PutPublicAccessBlockCommand);
parcelHelpers.export(exports, "de_RestoreObjectCommand", ()=>de_RestoreObjectCommand);
parcelHelpers.export(exports, "de_SelectObjectContentCommand", ()=>de_SelectObjectContentCommand);
parcelHelpers.export(exports, "de_UploadPartCommand", ()=>de_UploadPartCommand);
parcelHelpers.export(exports, "de_UploadPartCopyCommand", ()=>de_UploadPartCopyCommand);
parcelHelpers.export(exports, "de_WriteGetObjectResponseCommand", ()=>de_WriteGetObjectResponseCommand);
var _smithyClient = require("@aws-sdk/smithy-client");
var _xmlBuilder = require("@aws-sdk/xml-builder");
var _protocolHttp = require("@smithy/protocol-http");
var _fastXmlParser = require("fast-xml-parser");
var _models0 = require("../models/models_0");
var _models1 = require("../models/models_1");
var _s3ServiceException = require("../models/S3ServiceException");
const se_AbortMultipartUploadCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "x-id": [
            ,
            "AbortMultipartUpload"
        ],
        uploadId: [
            ,
            (0, _smithyClient.expectNonNull)(input.UploadId, `UploadId`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_CompleteMultipartUploadCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "x-id": [
            ,
            "CompleteMultipartUpload"
        ],
        uploadId: [
            ,
            (0, _smithyClient.expectNonNull)(input.UploadId, `UploadId`)
        ]
    });
    let body;
    if (input.MultipartUpload !== undefined) body = se_CompletedMultipartUpload(input.MultipartUpload, context);
    let contents;
    if (input.MultipartUpload !== undefined) {
        contents = se_CompletedMultipartUpload(input.MultipartUpload, context);
        contents = contents.withName("CompleteMultipartUpload");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_CopyObjectCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-type": input.ContentType,
        "x-amz-copy-source": input.CopySource,
        "x-amz-copy-source-if-match": input.CopySourceIfMatch,
        "x-amz-copy-source-if-modified-since": [
            ()=>isSerializableHeaderValue(input.CopySourceIfModifiedSince),
            ()=>(0, _smithyClient.dateToUtcString)(input.CopySourceIfModifiedSince).toString()
        ],
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
        "x-amz-copy-source-if-unmodified-since": [
            ()=>isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),
            ()=>(0, _smithyClient.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString()
        ],
        expires: [
            ()=>isSerializableHeaderValue(input.Expires),
            ()=>(0, _smithyClient.dateToUtcString)(input.Expires).toString()
        ],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-metadata-directive": input.MetadataDirective,
        "x-amz-tagging-directive": input.TaggingDirective,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
            ()=>isSerializableHeaderValue(input.BucketKeyEnabled),
            ()=>input.BucketKeyEnabled.toString()
        ],
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
            ()=>isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
            ()=>(input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner,
        ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix)=>{
            acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
            return acc;
        }, {})
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "x-id": [
            ,
            "CopyObject"
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_CreateBucketCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-bucket-object-lock-enabled": [
            ()=>isSerializableHeaderValue(input.ObjectLockEnabledForBucket),
            ()=>input.ObjectLockEnabledForBucket.toString()
        ],
        "x-amz-object-ownership": input.ObjectOwnership
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    let body;
    if (input.CreateBucketConfiguration !== undefined) body = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
    let contents;
    if (input.CreateBucketConfiguration !== undefined) {
        contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
    });
};
const se_CreateMultipartUploadCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-type": input.ContentType,
        expires: [
            ()=>isSerializableHeaderValue(input.Expires),
            ()=>(0, _smithyClient.dateToUtcString)(input.Expires).toString()
        ],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
            ()=>isSerializableHeaderValue(input.BucketKeyEnabled),
            ()=>input.BucketKeyEnabled.toString()
        ],
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
            ()=>isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
            ()=>(input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
        ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix)=>{
            acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
            return acc;
        }, {})
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        uploads: [
            ,
            ""
        ],
        "x-id": [
            ,
            "CreateMultipartUpload"
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
    });
};
const se_DeleteBucketAnalyticsConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        analytics: [
            ,
            ""
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketCorsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        cors: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketEncryptionCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        encryption: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketIntelligentTieringConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        "intelligent-tiering": [
            ,
            ""
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketInventoryConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        inventory: [
            ,
            ""
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketLifecycleCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        lifecycle: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketMetricsConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        metrics: [
            ,
            ""
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketOwnershipControlsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        ownershipControls: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketPolicyCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        policy: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketReplicationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        replication: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketTaggingCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        tagging: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteBucketWebsiteCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        website: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteObjectCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-mfa": input.MFA,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
            ()=>isSerializableHeaderValue(input.BypassGovernanceRetention),
            ()=>input.BypassGovernanceRetention.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "x-id": [
            ,
            "DeleteObject"
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteObjectsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-mfa": input.MFA,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
            ()=>isSerializableHeaderValue(input.BypassGovernanceRetention),
            ()=>input.BypassGovernanceRetention.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        delete: [
            ,
            ""
        ],
        "x-id": [
            ,
            "DeleteObjects"
        ]
    });
    let body;
    if (input.Delete !== undefined) body = se_Delete(input.Delete, context);
    let contents;
    if (input.Delete !== undefined) {
        contents = se_Delete(input.Delete, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeleteObjectTaggingCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        tagging: [
            ,
            ""
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_DeletePublicAccessBlockCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        publicAccessBlock: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketAccelerateConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        accelerate: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketAclCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        acl: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketAnalyticsConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        analytics: [
            ,
            ""
        ],
        "x-id": [
            ,
            "GetBucketAnalyticsConfiguration"
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketCorsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        cors: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketEncryptionCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        encryption: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketIntelligentTieringConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        "intelligent-tiering": [
            ,
            ""
        ],
        "x-id": [
            ,
            "GetBucketIntelligentTieringConfiguration"
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketInventoryConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        inventory: [
            ,
            ""
        ],
        "x-id": [
            ,
            "GetBucketInventoryConfiguration"
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketLifecycleConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        lifecycle: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketLocationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        location: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketLoggingCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        logging: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketMetricsConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        metrics: [
            ,
            ""
        ],
        "x-id": [
            ,
            "GetBucketMetricsConfiguration"
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketNotificationConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        notification: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketOwnershipControlsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        ownershipControls: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketPolicyCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        policy: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketPolicyStatusCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        policyStatus: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketReplicationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        replication: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketRequestPaymentCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        requestPayment: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketTaggingCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        tagging: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketVersioningCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        versioning: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetBucketWebsiteCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        website: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetObjectCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "if-match": input.IfMatch,
        "if-modified-since": [
            ()=>isSerializableHeaderValue(input.IfModifiedSince),
            ()=>(0, _smithyClient.dateToUtcString)(input.IfModifiedSince).toString()
        ],
        "if-none-match": input.IfNoneMatch,
        "if-unmodified-since": [
            ()=>isSerializableHeaderValue(input.IfUnmodifiedSince),
            ()=>(0, _smithyClient.dateToUtcString)(input.IfUnmodifiedSince).toString()
        ],
        range: input.Range,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-mode": input.ChecksumMode
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "x-id": [
            ,
            "GetObject"
        ],
        "response-cache-control": [
            ,
            input.ResponseCacheControl
        ],
        "response-content-disposition": [
            ,
            input.ResponseContentDisposition
        ],
        "response-content-encoding": [
            ,
            input.ResponseContentEncoding
        ],
        "response-content-language": [
            ,
            input.ResponseContentLanguage
        ],
        "response-content-type": [
            ,
            input.ResponseContentType
        ],
        "response-expires": [
            ()=>input.ResponseExpires !== void 0,
            ()=>(0, _smithyClient.dateToUtcString)(input.ResponseExpires).toString()
        ],
        versionId: [
            ,
            input.VersionId
        ],
        partNumber: [
            ()=>input.PartNumber !== void 0,
            ()=>input.PartNumber.toString()
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetObjectAclCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        acl: [
            ,
            ""
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetObjectAttributesCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-max-parts": [
            ()=>isSerializableHeaderValue(input.MaxParts),
            ()=>input.MaxParts.toString()
        ],
        "x-amz-part-number-marker": input.PartNumberMarker,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-object-attributes": [
            ()=>isSerializableHeaderValue(input.ObjectAttributes),
            ()=>(input.ObjectAttributes || []).map((_entry)=>_entry).join(", ")
        ]
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        attributes: [
            ,
            ""
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetObjectLegalHoldCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "legal-hold": [
            ,
            ""
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetObjectLockConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        "object-lock": [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetObjectRetentionCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        retention: [
            ,
            ""
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetObjectTaggingCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        tagging: [
            ,
            ""
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetObjectTorrentCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        torrent: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_GetPublicAccessBlockCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        publicAccessBlock: [
            ,
            ""
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_HeadBucketCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "HEAD",
        headers,
        path: resolvedPath,
        body
    });
};
const se_HeadObjectCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "if-match": input.IfMatch,
        "if-modified-since": [
            ()=>isSerializableHeaderValue(input.IfModifiedSince),
            ()=>(0, _smithyClient.dateToUtcString)(input.IfModifiedSince).toString()
        ],
        "if-none-match": input.IfNoneMatch,
        "if-unmodified-since": [
            ()=>isSerializableHeaderValue(input.IfUnmodifiedSince),
            ()=>(0, _smithyClient.dateToUtcString)(input.IfUnmodifiedSince).toString()
        ],
        range: input.Range,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-mode": input.ChecksumMode
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        versionId: [
            ,
            input.VersionId
        ],
        partNumber: [
            ()=>input.PartNumber !== void 0,
            ()=>input.PartNumber.toString()
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "HEAD",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_ListBucketAnalyticsConfigurationsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        analytics: [
            ,
            ""
        ],
        "x-id": [
            ,
            "ListBucketAnalyticsConfigurations"
        ],
        "continuation-token": [
            ,
            input.ContinuationToken
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_ListBucketIntelligentTieringConfigurationsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        "intelligent-tiering": [
            ,
            ""
        ],
        "x-id": [
            ,
            "ListBucketIntelligentTieringConfigurations"
        ],
        "continuation-token": [
            ,
            input.ContinuationToken
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_ListBucketInventoryConfigurationsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        inventory: [
            ,
            ""
        ],
        "x-id": [
            ,
            "ListBucketInventoryConfigurations"
        ],
        "continuation-token": [
            ,
            input.ContinuationToken
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_ListBucketMetricsConfigurationsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        metrics: [
            ,
            ""
        ],
        "x-id": [
            ,
            "ListBucketMetricsConfigurations"
        ],
        "continuation-token": [
            ,
            input.ContinuationToken
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_ListBucketsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = {
        "content-type": "application/xml"
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    let body;
    body = "";
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
    });
};
const se_ListMultipartUploadsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        uploads: [
            ,
            ""
        ],
        delimiter: [
            ,
            input.Delimiter
        ],
        "encoding-type": [
            ,
            input.EncodingType
        ],
        "key-marker": [
            ,
            input.KeyMarker
        ],
        "max-uploads": [
            ()=>input.MaxUploads !== void 0,
            ()=>input.MaxUploads.toString()
        ],
        prefix: [
            ,
            input.Prefix
        ],
        "upload-id-marker": [
            ,
            input.UploadIdMarker
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_ListObjectsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        delimiter: [
            ,
            input.Delimiter
        ],
        "encoding-type": [
            ,
            input.EncodingType
        ],
        marker: [
            ,
            input.Marker
        ],
        "max-keys": [
            ()=>input.MaxKeys !== void 0,
            ()=>input.MaxKeys.toString()
        ],
        prefix: [
            ,
            input.Prefix
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_ListObjectsV2Command = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        "list-type": [
            ,
            "2"
        ],
        delimiter: [
            ,
            input.Delimiter
        ],
        "encoding-type": [
            ,
            input.EncodingType
        ],
        "max-keys": [
            ()=>input.MaxKeys !== void 0,
            ()=>input.MaxKeys.toString()
        ],
        prefix: [
            ,
            input.Prefix
        ],
        "continuation-token": [
            ,
            input.ContinuationToken
        ],
        "fetch-owner": [
            ()=>input.FetchOwner !== void 0,
            ()=>input.FetchOwner.toString()
        ],
        "start-after": [
            ,
            input.StartAfter
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_ListObjectVersionsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        versions: [
            ,
            ""
        ],
        delimiter: [
            ,
            input.Delimiter
        ],
        "encoding-type": [
            ,
            input.EncodingType
        ],
        "key-marker": [
            ,
            input.KeyMarker
        ],
        "max-keys": [
            ()=>input.MaxKeys !== void 0,
            ()=>input.MaxKeys.toString()
        ],
        prefix: [
            ,
            input.Prefix
        ],
        "version-id-marker": [
            ,
            input.VersionIdMarker
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_ListPartsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "x-id": [
            ,
            "ListParts"
        ],
        "max-parts": [
            ()=>input.MaxParts !== void 0,
            ()=>input.MaxParts.toString()
        ],
        "part-number-marker": [
            ,
            input.PartNumberMarker
        ],
        uploadId: [
            ,
            (0, _smithyClient.expectNonNull)(input.UploadId, `UploadId`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketAccelerateConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        accelerate: [
            ,
            ""
        ]
    });
    let body;
    if (input.AccelerateConfiguration !== undefined) body = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
    let contents;
    if (input.AccelerateConfiguration !== undefined) {
        contents = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketAclCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        acl: [
            ,
            ""
        ]
    });
    let body;
    if (input.AccessControlPolicy !== undefined) body = se_AccessControlPolicy(input.AccessControlPolicy, context);
    let contents;
    if (input.AccessControlPolicy !== undefined) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketAnalyticsConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        analytics: [
            ,
            ""
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    if (input.AnalyticsConfiguration !== undefined) body = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
    let contents;
    if (input.AnalyticsConfiguration !== undefined) {
        contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketCorsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        cors: [
            ,
            ""
        ]
    });
    let body;
    if (input.CORSConfiguration !== undefined) body = se_CORSConfiguration(input.CORSConfiguration, context);
    let contents;
    if (input.CORSConfiguration !== undefined) {
        contents = se_CORSConfiguration(input.CORSConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketEncryptionCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        encryption: [
            ,
            ""
        ]
    });
    let body;
    if (input.ServerSideEncryptionConfiguration !== undefined) body = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
    let contents;
    if (input.ServerSideEncryptionConfiguration !== undefined) {
        contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketIntelligentTieringConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = {
        "content-type": "application/xml"
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        "intelligent-tiering": [
            ,
            ""
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    if (input.IntelligentTieringConfiguration !== undefined) body = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
    let contents;
    if (input.IntelligentTieringConfiguration !== undefined) {
        contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketInventoryConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        inventory: [
            ,
            ""
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    if (input.InventoryConfiguration !== undefined) body = se_InventoryConfiguration(input.InventoryConfiguration, context);
    let contents;
    if (input.InventoryConfiguration !== undefined) {
        contents = se_InventoryConfiguration(input.InventoryConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketLifecycleConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        lifecycle: [
            ,
            ""
        ]
    });
    let body;
    if (input.LifecycleConfiguration !== undefined) body = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
    let contents;
    if (input.LifecycleConfiguration !== undefined) {
        contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
        contents = contents.withName("LifecycleConfiguration");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketLoggingCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        logging: [
            ,
            ""
        ]
    });
    let body;
    if (input.BucketLoggingStatus !== undefined) body = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
    let contents;
    if (input.BucketLoggingStatus !== undefined) {
        contents = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketMetricsConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        metrics: [
            ,
            ""
        ],
        id: [
            ,
            (0, _smithyClient.expectNonNull)(input.Id, `Id`)
        ]
    });
    let body;
    if (input.MetricsConfiguration !== undefined) body = se_MetricsConfiguration(input.MetricsConfiguration, context);
    let contents;
    if (input.MetricsConfiguration !== undefined) {
        contents = se_MetricsConfiguration(input.MetricsConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketNotificationConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-skip-destination-validation": [
            ()=>isSerializableHeaderValue(input.SkipDestinationValidation),
            ()=>input.SkipDestinationValidation.toString()
        ]
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        notification: [
            ,
            ""
        ]
    });
    let body;
    if (input.NotificationConfiguration !== undefined) body = se_NotificationConfiguration(input.NotificationConfiguration, context);
    let contents;
    if (input.NotificationConfiguration !== undefined) {
        contents = se_NotificationConfiguration(input.NotificationConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketOwnershipControlsCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        ownershipControls: [
            ,
            ""
        ]
    });
    let body;
    if (input.OwnershipControls !== undefined) body = se_OwnershipControls(input.OwnershipControls, context);
    let contents;
    if (input.OwnershipControls !== undefined) {
        contents = se_OwnershipControls(input.OwnershipControls, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketPolicyCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "text/plain",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-confirm-remove-self-bucket-access": [
            ()=>isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess),
            ()=>input.ConfirmRemoveSelfBucketAccess.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        policy: [
            ,
            ""
        ]
    });
    let body;
    if (input.Policy !== undefined) body = input.Policy;
    let contents;
    if (input.Policy !== undefined) {
        contents = input.Policy;
        body = contents;
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketReplicationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-bucket-object-lock-token": input.Token,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        replication: [
            ,
            ""
        ]
    });
    let body;
    if (input.ReplicationConfiguration !== undefined) body = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
    let contents;
    if (input.ReplicationConfiguration !== undefined) {
        contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketRequestPaymentCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        requestPayment: [
            ,
            ""
        ]
    });
    let body;
    if (input.RequestPaymentConfiguration !== undefined) body = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
    let contents;
    if (input.RequestPaymentConfiguration !== undefined) {
        contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketTaggingCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        tagging: [
            ,
            ""
        ]
    });
    let body;
    if (input.Tagging !== undefined) body = se_Tagging(input.Tagging, context);
    let contents;
    if (input.Tagging !== undefined) {
        contents = se_Tagging(input.Tagging, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketVersioningCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-mfa": input.MFA,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        versioning: [
            ,
            ""
        ]
    });
    let body;
    if (input.VersioningConfiguration !== undefined) body = se_VersioningConfiguration(input.VersioningConfiguration, context);
    let contents;
    if (input.VersioningConfiguration !== undefined) {
        contents = se_VersioningConfiguration(input.VersioningConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutBucketWebsiteCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        website: [
            ,
            ""
        ]
    });
    let body;
    if (input.WebsiteConfiguration !== undefined) body = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
    let contents;
    if (input.WebsiteConfiguration !== undefined) {
        contents = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutObjectCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": input.ContentType || "application/octet-stream",
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-length": [
            ()=>isSerializableHeaderValue(input.ContentLength),
            ()=>input.ContentLength.toString()
        ],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        expires: [
            ()=>isSerializableHeaderValue(input.Expires),
            ()=>(0, _smithyClient.dateToUtcString)(input.Expires).toString()
        ],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
            ()=>isSerializableHeaderValue(input.BucketKeyEnabled),
            ()=>input.BucketKeyEnabled.toString()
        ],
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
            ()=>isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
            ()=>(input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix)=>{
            acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
            return acc;
        }, {})
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "x-id": [
            ,
            "PutObject"
        ]
    });
    let body;
    if (input.Body !== undefined) body = input.Body;
    let contents;
    if (input.Body !== undefined) {
        contents = input.Body;
        body = contents;
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutObjectAclCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        acl: [
            ,
            ""
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    if (input.AccessControlPolicy !== undefined) body = se_AccessControlPolicy(input.AccessControlPolicy, context);
    let contents;
    if (input.AccessControlPolicy !== undefined) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutObjectLegalHoldCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "legal-hold": [
            ,
            ""
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    if (input.LegalHold !== undefined) body = se_ObjectLockLegalHold(input.LegalHold, context);
    let contents;
    if (input.LegalHold !== undefined) {
        contents = se_ObjectLockLegalHold(input.LegalHold, context);
        contents = contents.withName("LegalHold");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutObjectLockConfigurationCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bucket-object-lock-token": input.Token,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        "object-lock": [
            ,
            ""
        ]
    });
    let body;
    if (input.ObjectLockConfiguration !== undefined) body = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
    let contents;
    if (input.ObjectLockConfiguration !== undefined) {
        contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutObjectRetentionCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
            ()=>isSerializableHeaderValue(input.BypassGovernanceRetention),
            ()=>input.BypassGovernanceRetention.toString()
        ],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        retention: [
            ,
            ""
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    if (input.Retention !== undefined) body = se_ObjectLockRetention(input.Retention, context);
    let contents;
    if (input.Retention !== undefined) {
        contents = se_ObjectLockRetention(input.Retention, context);
        contents = contents.withName("Retention");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutObjectTaggingCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        tagging: [
            ,
            ""
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    if (input.Tagging !== undefined) body = se_Tagging(input.Tagging, context);
    let contents;
    if (input.Tagging !== undefined) {
        contents = se_Tagging(input.Tagging, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_PutPublicAccessBlockCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    const query = (0, _smithyClient.map)({
        publicAccessBlock: [
            ,
            ""
        ]
    });
    let body;
    if (input.PublicAccessBlockConfiguration !== undefined) body = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
    let contents;
    if (input.PublicAccessBlockConfiguration !== undefined) {
        contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_RestoreObjectCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        restore: [
            ,
            ""
        ],
        "x-id": [
            ,
            "RestoreObject"
        ],
        versionId: [
            ,
            input.VersionId
        ]
    });
    let body;
    if (input.RestoreRequest !== undefined) body = se_RestoreRequest(input.RestoreRequest, context);
    let contents;
    if (input.RestoreRequest !== undefined) {
        contents = se_RestoreRequest(input.RestoreRequest, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_SelectObjectContentCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        select: [
            ,
            ""
        ],
        "select-type": [
            ,
            "2"
        ],
        "x-id": [
            ,
            "SelectObjectContent"
        ]
    });
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new (0, _xmlBuilder.XmlNode)("SelectObjectContentRequest");
    bodyNode.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
    if (input.Expression !== undefined) {
        const node = (0, _xmlBuilder.XmlNode).of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
    }
    if (input.ExpressionType !== undefined) {
        const node = (0, _xmlBuilder.XmlNode).of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
    }
    if (input.InputSerialization !== undefined) {
        const node = se_InputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
    }
    if (input.OutputSerialization !== undefined) {
        const node = se_OutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
    }
    if (input.RequestProgress !== undefined) {
        const node = se_RequestProgress(input.RequestProgress, context).withName("RequestProgress");
        bodyNode.addChildNode(node);
    }
    if (input.ScanRange !== undefined) {
        const node = se_ScanRange(input.ScanRange, context).withName("ScanRange");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_UploadPartCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        "content-length": [
            ()=>isSerializableHeaderValue(input.ContentLength),
            ()=>input.ContentLength.toString()
        ],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "x-id": [
            ,
            "UploadPart"
        ],
        partNumber: [
            (0, _smithyClient.expectNonNull)(input.PartNumber, `PartNumber`) != null,
            ()=>input.PartNumber.toString()
        ],
        uploadId: [
            ,
            (0, _smithyClient.expectNonNull)(input.UploadId, `UploadId`)
        ]
    });
    let body;
    if (input.Body !== undefined) body = input.Body;
    let contents;
    if (input.Body !== undefined) {
        contents = input.Body;
        body = contents;
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_UploadPartCopyCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-copy-source": input.CopySource,
        "x-amz-copy-source-if-match": input.CopySourceIfMatch,
        "x-amz-copy-source-if-modified-since": [
            ()=>isSerializableHeaderValue(input.CopySourceIfModifiedSince),
            ()=>(0, _smithyClient.dateToUtcString)(input.CopySourceIfModifiedSince).toString()
        ],
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
        "x-amz-copy-source-if-unmodified-since": [
            ()=>isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),
            ()=>(0, _smithyClient.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString()
        ],
        "x-amz-copy-source-range": input.CopySourceRange,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Bucket", ()=>input.Bucket, "{Bucket}", false);
    resolvedPath = (0, _smithyClient.resolvedPath)(resolvedPath, input, "Key", ()=>input.Key, "{Key+}", true);
    const query = (0, _smithyClient.map)({
        "x-id": [
            ,
            "UploadPartCopy"
        ],
        partNumber: [
            (0, _smithyClient.expectNonNull)(input.PartNumber, `PartNumber`) != null,
            ()=>input.PartNumber.toString()
        ],
        uploadId: [
            ,
            (0, _smithyClient.expectNonNull)(input.UploadId, `UploadId`)
        ]
    });
    let body;
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const se_WriteGetObjectResponseCommand = async (input, context)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const headers = (0, _smithyClient.map)({}, isSerializableHeaderValue, {
        "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
        "content-type": "application/octet-stream",
        "x-amz-request-route": input.RequestRoute,
        "x-amz-request-token": input.RequestToken,
        "x-amz-fwd-status": [
            ()=>isSerializableHeaderValue(input.StatusCode),
            ()=>input.StatusCode.toString()
        ],
        "x-amz-fwd-error-code": input.ErrorCode,
        "x-amz-fwd-error-message": input.ErrorMessage,
        "x-amz-fwd-header-accept-ranges": input.AcceptRanges,
        "x-amz-fwd-header-cache-control": input.CacheControl,
        "x-amz-fwd-header-content-disposition": input.ContentDisposition,
        "x-amz-fwd-header-content-encoding": input.ContentEncoding,
        "x-amz-fwd-header-content-language": input.ContentLanguage,
        "content-length": [
            ()=>isSerializableHeaderValue(input.ContentLength),
            ()=>input.ContentLength.toString()
        ],
        "x-amz-fwd-header-content-range": input.ContentRange,
        "x-amz-fwd-header-content-type": input.ContentType,
        "x-amz-fwd-header-x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-fwd-header-x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-fwd-header-x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-fwd-header-x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-fwd-header-x-amz-delete-marker": [
            ()=>isSerializableHeaderValue(input.DeleteMarker),
            ()=>input.DeleteMarker.toString()
        ],
        "x-amz-fwd-header-etag": input.ETag,
        "x-amz-fwd-header-expires": [
            ()=>isSerializableHeaderValue(input.Expires),
            ()=>(0, _smithyClient.dateToUtcString)(input.Expires).toString()
        ],
        "x-amz-fwd-header-x-amz-expiration": input.Expiration,
        "x-amz-fwd-header-last-modified": [
            ()=>isSerializableHeaderValue(input.LastModified),
            ()=>(0, _smithyClient.dateToUtcString)(input.LastModified).toString()
        ],
        "x-amz-fwd-header-x-amz-missing-meta": [
            ()=>isSerializableHeaderValue(input.MissingMeta),
            ()=>input.MissingMeta.toString()
        ],
        "x-amz-fwd-header-x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-fwd-header-x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-fwd-header-x-amz-object-lock-retain-until-date": [
            ()=>isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
            ()=>(input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-fwd-header-x-amz-mp-parts-count": [
            ()=>isSerializableHeaderValue(input.PartsCount),
            ()=>input.PartsCount.toString()
        ],
        "x-amz-fwd-header-x-amz-replication-status": input.ReplicationStatus,
        "x-amz-fwd-header-x-amz-request-charged": input.RequestCharged,
        "x-amz-fwd-header-x-amz-restore": input.Restore,
        "x-amz-fwd-header-x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-fwd-header-x-amz-storage-class": input.StorageClass,
        "x-amz-fwd-header-x-amz-tagging-count": [
            ()=>isSerializableHeaderValue(input.TagCount),
            ()=>input.TagCount.toString()
        ],
        "x-amz-fwd-header-x-amz-version-id": input.VersionId,
        "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled": [
            ()=>isSerializableHeaderValue(input.BucketKeyEnabled),
            ()=>input.BucketKeyEnabled.toString()
        ],
        ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix)=>{
            acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
            return acc;
        }, {})
    });
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/WriteGetObjectResponse";
    const query = (0, _smithyClient.map)({
        "x-id": [
            ,
            "WriteGetObjectResponse"
        ]
    });
    let body;
    if (input.Body !== undefined) body = input.Body;
    let contents;
    if (input.Body !== undefined) {
        contents = input.Body;
        body = contents;
    }
    let { hostname: resolvedHostname  } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "{RequestRoute}." + resolvedHostname;
        if (input.RequestRoute === undefined) throw new Error("Empty value provided for input host prefix: RequestRoute.");
        resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
        if (!(0, _protocolHttp.isValidHostname)(resolvedHostname)) throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
    return new (0, _protocolHttp.HttpRequest)({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
    });
};
const de_AbortMultipartUploadCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_AbortMultipartUploadCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_AbortMultipartUploadCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "NoSuchUpload":
        case "com.amazonaws.s3#NoSuchUpload":
            throw await de_NoSuchUploadRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CompleteMultipartUploadCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_CompleteMultipartUploadCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        Expiration: [
            ,
            output.headers["x-amz-expiration"]
        ],
        ServerSideEncryption: [
            ,
            output.headers["x-amz-server-side-encryption"]
        ],
        VersionId: [
            ,
            output.headers["x-amz-version-id"]
        ],
        SSEKMSKeyId: [
            ,
            output.headers["x-amz-server-side-encryption-aws-kms-key-id"]
        ],
        BucketKeyEnabled: [
            ()=>void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) contents.Bucket = (0, _smithyClient.expectString)(data["Bucket"]);
    if (data["ChecksumCRC32"] !== undefined) contents.ChecksumCRC32 = (0, _smithyClient.expectString)(data["ChecksumCRC32"]);
    if (data["ChecksumCRC32C"] !== undefined) contents.ChecksumCRC32C = (0, _smithyClient.expectString)(data["ChecksumCRC32C"]);
    if (data["ChecksumSHA1"] !== undefined) contents.ChecksumSHA1 = (0, _smithyClient.expectString)(data["ChecksumSHA1"]);
    if (data["ChecksumSHA256"] !== undefined) contents.ChecksumSHA256 = (0, _smithyClient.expectString)(data["ChecksumSHA256"]);
    if (data["ETag"] !== undefined) contents.ETag = (0, _smithyClient.expectString)(data["ETag"]);
    if (data["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(data["Key"]);
    if (data["Location"] !== undefined) contents.Location = (0, _smithyClient.expectString)(data["Location"]);
    return contents;
};
const de_CompleteMultipartUploadCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_CopyObjectCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_CopyObjectCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        Expiration: [
            ,
            output.headers["x-amz-expiration"]
        ],
        CopySourceVersionId: [
            ,
            output.headers["x-amz-copy-source-version-id"]
        ],
        VersionId: [
            ,
            output.headers["x-amz-version-id"]
        ],
        ServerSideEncryption: [
            ,
            output.headers["x-amz-server-side-encryption"]
        ],
        SSECustomerAlgorithm: [
            ,
            output.headers["x-amz-server-side-encryption-customer-algorithm"]
        ],
        SSECustomerKeyMD5: [
            ,
            output.headers["x-amz-server-side-encryption-customer-key-md5"]
        ],
        SSEKMSKeyId: [
            ,
            output.headers["x-amz-server-side-encryption-aws-kms-key-id"]
        ],
        SSEKMSEncryptionContext: [
            ,
            output.headers["x-amz-server-side-encryption-context"]
        ],
        BucketKeyEnabled: [
            ()=>void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.CopyObjectResult = de_CopyObjectResult(data, context);
    return contents;
};
const de_CopyObjectCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ObjectNotInActiveTierError":
        case "com.amazonaws.s3#ObjectNotInActiveTierError":
            throw await de_ObjectNotInActiveTierErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreateBucketCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_CreateBucketCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        Location: [
            ,
            output.headers["location"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CreateBucketCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "BucketAlreadyExists":
        case "com.amazonaws.s3#BucketAlreadyExists":
            throw await de_BucketAlreadyExistsRes(parsedOutput, context);
        case "BucketAlreadyOwnedByYou":
        case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
            throw await de_BucketAlreadyOwnedByYouRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_CreateMultipartUploadCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_CreateMultipartUploadCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        AbortDate: [
            ()=>void 0 !== output.headers["x-amz-abort-date"],
            ()=>(0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc7231DateTime)(output.headers["x-amz-abort-date"]))
        ],
        AbortRuleId: [
            ,
            output.headers["x-amz-abort-rule-id"]
        ],
        ServerSideEncryption: [
            ,
            output.headers["x-amz-server-side-encryption"]
        ],
        SSECustomerAlgorithm: [
            ,
            output.headers["x-amz-server-side-encryption-customer-algorithm"]
        ],
        SSECustomerKeyMD5: [
            ,
            output.headers["x-amz-server-side-encryption-customer-key-md5"]
        ],
        SSEKMSKeyId: [
            ,
            output.headers["x-amz-server-side-encryption-aws-kms-key-id"]
        ],
        SSEKMSEncryptionContext: [
            ,
            output.headers["x-amz-server-side-encryption-context"]
        ],
        BucketKeyEnabled: [
            ()=>void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ],
        ChecksumAlgorithm: [
            ,
            output.headers["x-amz-checksum-algorithm"]
        ]
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) contents.Bucket = (0, _smithyClient.expectString)(data["Bucket"]);
    if (data["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(data["Key"]);
    if (data["UploadId"] !== undefined) contents.UploadId = (0, _smithyClient.expectString)(data["UploadId"]);
    return contents;
};
const de_CreateMultipartUploadCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketAnalyticsConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketAnalyticsConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketAnalyticsConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketCorsCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketCorsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketCorsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketEncryptionCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketEncryptionCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketEncryptionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketIntelligentTieringConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketIntelligentTieringConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketIntelligentTieringConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketInventoryConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketInventoryConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketInventoryConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketLifecycleCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketLifecycleCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketLifecycleCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketMetricsConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketMetricsConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketMetricsConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketOwnershipControlsCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketOwnershipControlsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketOwnershipControlsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketPolicyCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketPolicyCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketPolicyCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketReplicationCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketReplicationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketReplicationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketTaggingCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketTaggingCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketTaggingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteBucketWebsiteCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteBucketWebsiteCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteBucketWebsiteCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteObjectCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteObjectCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
            ()=>void 0 !== output.headers["x-amz-delete-marker"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        VersionId: [
            ,
            output.headers["x-amz-version-id"]
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteObjectCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteObjectsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_DeleteObjectsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Deleted === "") contents.Deleted = [];
    else if (data["Deleted"] !== undefined) contents.Deleted = de_DeletedObjects((0, _smithyClient.getArrayIfSingleItem)(data["Deleted"]), context);
    if (data.Error === "") contents.Errors = [];
    else if (data["Error"] !== undefined) contents.Errors = de_Errors((0, _smithyClient.getArrayIfSingleItem)(data["Error"]), context);
    return contents;
};
const de_DeleteObjectsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeleteObjectTaggingCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeleteObjectTaggingCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        VersionId: [
            ,
            output.headers["x-amz-version-id"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeleteObjectTaggingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_DeletePublicAccessBlockCommand = async (output, context)=>{
    if (output.statusCode !== 204 && output.statusCode >= 300) return de_DeletePublicAccessBlockCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_DeletePublicAccessBlockCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketAccelerateConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketAccelerateConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(data["Status"]);
    return contents;
};
const de_GetBucketAccelerateConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketAclCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketAclCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AccessControlList === "") contents.Grants = [];
    else if (data["AccessControlList"] !== undefined && data["AccessControlList"]["Grant"] !== undefined) contents.Grants = de_Grants((0, _smithyClient.getArrayIfSingleItem)(data["AccessControlList"]["Grant"]), context);
    if (data["Owner"] !== undefined) contents.Owner = de_Owner(data["Owner"], context);
    return contents;
};
const de_GetBucketAclCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketAnalyticsConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketAnalyticsConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data, context);
    return contents;
};
const de_GetBucketAnalyticsConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketCorsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketCorsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CORSRule === "") contents.CORSRules = [];
    else if (data["CORSRule"] !== undefined) contents.CORSRules = de_CORSRules((0, _smithyClient.getArrayIfSingleItem)(data["CORSRule"]), context);
    return contents;
};
const de_GetBucketCorsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketEncryptionCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketEncryptionCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data, context);
    return contents;
};
const de_GetBucketEncryptionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketIntelligentTieringConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketIntelligentTieringConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data, context);
    return contents;
};
const de_GetBucketIntelligentTieringConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketInventoryConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketInventoryConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.InventoryConfiguration = de_InventoryConfiguration(data, context);
    return contents;
};
const de_GetBucketInventoryConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketLifecycleConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketLifecycleConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Rule === "") contents.Rules = [];
    else if (data["Rule"] !== undefined) contents.Rules = de_LifecycleRules((0, _smithyClient.getArrayIfSingleItem)(data["Rule"]), context);
    return contents;
};
const de_GetBucketLifecycleConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketLocationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketLocationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["LocationConstraint"] !== undefined) contents.LocationConstraint = (0, _smithyClient.expectString)(data["LocationConstraint"]);
    return contents;
};
const de_GetBucketLocationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketLoggingCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketLoggingCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["LoggingEnabled"] !== undefined) contents.LoggingEnabled = de_LoggingEnabled(data["LoggingEnabled"], context);
    return contents;
};
const de_GetBucketLoggingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketMetricsConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketMetricsConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.MetricsConfiguration = de_MetricsConfiguration(data, context);
    return contents;
};
const de_GetBucketMetricsConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketNotificationConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketNotificationConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["EventBridgeConfiguration"] !== undefined) contents.EventBridgeConfiguration = de_EventBridgeConfiguration(data["EventBridgeConfiguration"], context);
    if (data.CloudFunctionConfiguration === "") contents.LambdaFunctionConfigurations = [];
    else if (data["CloudFunctionConfiguration"] !== undefined) contents.LambdaFunctionConfigurations = de_LambdaFunctionConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["CloudFunctionConfiguration"]), context);
    if (data.QueueConfiguration === "") contents.QueueConfigurations = [];
    else if (data["QueueConfiguration"] !== undefined) contents.QueueConfigurations = de_QueueConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["QueueConfiguration"]), context);
    if (data.TopicConfiguration === "") contents.TopicConfigurations = [];
    else if (data["TopicConfiguration"] !== undefined) contents.TopicConfigurations = de_TopicConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["TopicConfiguration"]), context);
    return contents;
};
const de_GetBucketNotificationConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketOwnershipControlsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketOwnershipControlsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.OwnershipControls = de_OwnershipControls(data, context);
    return contents;
};
const de_GetBucketOwnershipControlsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketPolicyCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketPolicyCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = await collectBodyString(output.body, context);
    contents.Policy = (0, _smithyClient.expectString)(data);
    return contents;
};
const de_GetBucketPolicyCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketPolicyStatusCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketPolicyStatusCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.PolicyStatus = de_PolicyStatus(data, context);
    return contents;
};
const de_GetBucketPolicyStatusCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketReplicationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketReplicationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.ReplicationConfiguration = de_ReplicationConfiguration(data, context);
    return contents;
};
const de_GetBucketReplicationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketRequestPaymentCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketRequestPaymentCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Payer"] !== undefined) contents.Payer = (0, _smithyClient.expectString)(data["Payer"]);
    return contents;
};
const de_GetBucketRequestPaymentCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketTaggingCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketTaggingCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.TagSet === "") contents.TagSet = [];
    else if (data["TagSet"] !== undefined && data["TagSet"]["Tag"] !== undefined) contents.TagSet = de_TagSet((0, _smithyClient.getArrayIfSingleItem)(data["TagSet"]["Tag"]), context);
    return contents;
};
const de_GetBucketTaggingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketVersioningCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketVersioningCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["MfaDelete"] !== undefined) contents.MFADelete = (0, _smithyClient.expectString)(data["MfaDelete"]);
    if (data["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(data["Status"]);
    return contents;
};
const de_GetBucketVersioningCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetBucketWebsiteCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetBucketWebsiteCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ErrorDocument"] !== undefined) contents.ErrorDocument = de_ErrorDocument(data["ErrorDocument"], context);
    if (data["IndexDocument"] !== undefined) contents.IndexDocument = de_IndexDocument(data["IndexDocument"], context);
    if (data["RedirectAllRequestsTo"] !== undefined) contents.RedirectAllRequestsTo = de_RedirectAllRequestsTo(data["RedirectAllRequestsTo"], context);
    if (data.RoutingRules === "") contents.RoutingRules = [];
    else if (data["RoutingRules"] !== undefined && data["RoutingRules"]["RoutingRule"] !== undefined) contents.RoutingRules = de_RoutingRules((0, _smithyClient.getArrayIfSingleItem)(data["RoutingRules"]["RoutingRule"]), context);
    return contents;
};
const de_GetBucketWebsiteCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetObjectCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetObjectCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
            ()=>void 0 !== output.headers["x-amz-delete-marker"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        AcceptRanges: [
            ,
            output.headers["accept-ranges"]
        ],
        Expiration: [
            ,
            output.headers["x-amz-expiration"]
        ],
        Restore: [
            ,
            output.headers["x-amz-restore"]
        ],
        LastModified: [
            ()=>void 0 !== output.headers["last-modified"],
            ()=>(0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc7231DateTime)(output.headers["last-modified"]))
        ],
        ContentLength: [
            ()=>void 0 !== output.headers["content-length"],
            ()=>(0, _smithyClient.strictParseLong)(output.headers["content-length"])
        ],
        ETag: [
            ,
            output.headers["etag"]
        ],
        ChecksumCRC32: [
            ,
            output.headers["x-amz-checksum-crc32"]
        ],
        ChecksumCRC32C: [
            ,
            output.headers["x-amz-checksum-crc32c"]
        ],
        ChecksumSHA1: [
            ,
            output.headers["x-amz-checksum-sha1"]
        ],
        ChecksumSHA256: [
            ,
            output.headers["x-amz-checksum-sha256"]
        ],
        MissingMeta: [
            ()=>void 0 !== output.headers["x-amz-missing-meta"],
            ()=>(0, _smithyClient.strictParseInt32)(output.headers["x-amz-missing-meta"])
        ],
        VersionId: [
            ,
            output.headers["x-amz-version-id"]
        ],
        CacheControl: [
            ,
            output.headers["cache-control"]
        ],
        ContentDisposition: [
            ,
            output.headers["content-disposition"]
        ],
        ContentEncoding: [
            ,
            output.headers["content-encoding"]
        ],
        ContentLanguage: [
            ,
            output.headers["content-language"]
        ],
        ContentRange: [
            ,
            output.headers["content-range"]
        ],
        ContentType: [
            ,
            output.headers["content-type"]
        ],
        Expires: [
            ()=>void 0 !== output.headers["expires"],
            ()=>(0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc7231DateTime)(output.headers["expires"]))
        ],
        WebsiteRedirectLocation: [
            ,
            output.headers["x-amz-website-redirect-location"]
        ],
        ServerSideEncryption: [
            ,
            output.headers["x-amz-server-side-encryption"]
        ],
        SSECustomerAlgorithm: [
            ,
            output.headers["x-amz-server-side-encryption-customer-algorithm"]
        ],
        SSECustomerKeyMD5: [
            ,
            output.headers["x-amz-server-side-encryption-customer-key-md5"]
        ],
        SSEKMSKeyId: [
            ,
            output.headers["x-amz-server-side-encryption-aws-kms-key-id"]
        ],
        BucketKeyEnabled: [
            ()=>void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        StorageClass: [
            ,
            output.headers["x-amz-storage-class"]
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ],
        ReplicationStatus: [
            ,
            output.headers["x-amz-replication-status"]
        ],
        PartsCount: [
            ()=>void 0 !== output.headers["x-amz-mp-parts-count"],
            ()=>(0, _smithyClient.strictParseInt32)(output.headers["x-amz-mp-parts-count"])
        ],
        TagCount: [
            ()=>void 0 !== output.headers["x-amz-tagging-count"],
            ()=>(0, _smithyClient.strictParseInt32)(output.headers["x-amz-tagging-count"])
        ],
        ObjectLockMode: [
            ,
            output.headers["x-amz-object-lock-mode"]
        ],
        ObjectLockRetainUntilDate: [
            ()=>void 0 !== output.headers["x-amz-object-lock-retain-until-date"],
            ()=>(0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output.headers["x-amz-object-lock-retain-until-date"]))
        ],
        ObjectLockLegalHoldStatus: [
            ,
            output.headers["x-amz-object-lock-legal-hold"]
        ],
        Metadata: [
            ,
            Object.keys(output.headers).filter((header)=>header.startsWith("x-amz-meta-")).reduce((acc, header)=>{
                acc[header.substring(11)] = output.headers[header];
                return acc;
            }, {})
        ]
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
};
const de_GetObjectCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InvalidObjectState":
        case "com.amazonaws.s3#InvalidObjectState":
            throw await de_InvalidObjectStateRes(parsedOutput, context);
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
            throw await de_NoSuchKeyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetObjectAclCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetObjectAclCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AccessControlList === "") contents.Grants = [];
    else if (data["AccessControlList"] !== undefined && data["AccessControlList"]["Grant"] !== undefined) contents.Grants = de_Grants((0, _smithyClient.getArrayIfSingleItem)(data["AccessControlList"]["Grant"]), context);
    if (data["Owner"] !== undefined) contents.Owner = de_Owner(data["Owner"], context);
    return contents;
};
const de_GetObjectAclCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
            throw await de_NoSuchKeyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetObjectAttributesCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetObjectAttributesCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
            ()=>void 0 !== output.headers["x-amz-delete-marker"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        LastModified: [
            ()=>void 0 !== output.headers["last-modified"],
            ()=>(0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc7231DateTime)(output.headers["last-modified"]))
        ],
        VersionId: [
            ,
            output.headers["x-amz-version-id"]
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Checksum"] !== undefined) contents.Checksum = de_Checksum(data["Checksum"], context);
    if (data["ETag"] !== undefined) contents.ETag = (0, _smithyClient.expectString)(data["ETag"]);
    if (data["ObjectParts"] !== undefined) contents.ObjectParts = de_GetObjectAttributesParts(data["ObjectParts"], context);
    if (data["ObjectSize"] !== undefined) contents.ObjectSize = (0, _smithyClient.strictParseLong)(data["ObjectSize"]);
    if (data["StorageClass"] !== undefined) contents.StorageClass = (0, _smithyClient.expectString)(data["StorageClass"]);
    return contents;
};
const de_GetObjectAttributesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
            throw await de_NoSuchKeyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_GetObjectLegalHoldCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetObjectLegalHoldCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.LegalHold = de_ObjectLockLegalHold(data, context);
    return contents;
};
const de_GetObjectLegalHoldCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetObjectLockConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetObjectLockConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data, context);
    return contents;
};
const de_GetObjectLockConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetObjectRetentionCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetObjectRetentionCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.Retention = de_ObjectLockRetention(data, context);
    return contents;
};
const de_GetObjectRetentionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetObjectTaggingCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetObjectTaggingCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        VersionId: [
            ,
            output.headers["x-amz-version-id"]
        ]
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.TagSet === "") contents.TagSet = [];
    else if (data["TagSet"] !== undefined && data["TagSet"]["Tag"] !== undefined) contents.TagSet = de_TagSet((0, _smithyClient.getArrayIfSingleItem)(data["TagSet"]["Tag"]), context);
    return contents;
};
const de_GetObjectTaggingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetObjectTorrentCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetObjectTorrentCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
};
const de_GetObjectTorrentCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_GetPublicAccessBlockCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_GetPublicAccessBlockCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);
    return contents;
};
const de_GetPublicAccessBlockCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_HeadBucketCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_HeadBucketCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_HeadBucketCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
            throw await de_NotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_HeadObjectCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_HeadObjectCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
            ()=>void 0 !== output.headers["x-amz-delete-marker"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        AcceptRanges: [
            ,
            output.headers["accept-ranges"]
        ],
        Expiration: [
            ,
            output.headers["x-amz-expiration"]
        ],
        Restore: [
            ,
            output.headers["x-amz-restore"]
        ],
        ArchiveStatus: [
            ,
            output.headers["x-amz-archive-status"]
        ],
        LastModified: [
            ()=>void 0 !== output.headers["last-modified"],
            ()=>(0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc7231DateTime)(output.headers["last-modified"]))
        ],
        ContentLength: [
            ()=>void 0 !== output.headers["content-length"],
            ()=>(0, _smithyClient.strictParseLong)(output.headers["content-length"])
        ],
        ChecksumCRC32: [
            ,
            output.headers["x-amz-checksum-crc32"]
        ],
        ChecksumCRC32C: [
            ,
            output.headers["x-amz-checksum-crc32c"]
        ],
        ChecksumSHA1: [
            ,
            output.headers["x-amz-checksum-sha1"]
        ],
        ChecksumSHA256: [
            ,
            output.headers["x-amz-checksum-sha256"]
        ],
        ETag: [
            ,
            output.headers["etag"]
        ],
        MissingMeta: [
            ()=>void 0 !== output.headers["x-amz-missing-meta"],
            ()=>(0, _smithyClient.strictParseInt32)(output.headers["x-amz-missing-meta"])
        ],
        VersionId: [
            ,
            output.headers["x-amz-version-id"]
        ],
        CacheControl: [
            ,
            output.headers["cache-control"]
        ],
        ContentDisposition: [
            ,
            output.headers["content-disposition"]
        ],
        ContentEncoding: [
            ,
            output.headers["content-encoding"]
        ],
        ContentLanguage: [
            ,
            output.headers["content-language"]
        ],
        ContentType: [
            ,
            output.headers["content-type"]
        ],
        Expires: [
            ()=>void 0 !== output.headers["expires"],
            ()=>(0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc7231DateTime)(output.headers["expires"]))
        ],
        WebsiteRedirectLocation: [
            ,
            output.headers["x-amz-website-redirect-location"]
        ],
        ServerSideEncryption: [
            ,
            output.headers["x-amz-server-side-encryption"]
        ],
        SSECustomerAlgorithm: [
            ,
            output.headers["x-amz-server-side-encryption-customer-algorithm"]
        ],
        SSECustomerKeyMD5: [
            ,
            output.headers["x-amz-server-side-encryption-customer-key-md5"]
        ],
        SSEKMSKeyId: [
            ,
            output.headers["x-amz-server-side-encryption-aws-kms-key-id"]
        ],
        BucketKeyEnabled: [
            ()=>void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        StorageClass: [
            ,
            output.headers["x-amz-storage-class"]
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ],
        ReplicationStatus: [
            ,
            output.headers["x-amz-replication-status"]
        ],
        PartsCount: [
            ()=>void 0 !== output.headers["x-amz-mp-parts-count"],
            ()=>(0, _smithyClient.strictParseInt32)(output.headers["x-amz-mp-parts-count"])
        ],
        ObjectLockMode: [
            ,
            output.headers["x-amz-object-lock-mode"]
        ],
        ObjectLockRetainUntilDate: [
            ()=>void 0 !== output.headers["x-amz-object-lock-retain-until-date"],
            ()=>(0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output.headers["x-amz-object-lock-retain-until-date"]))
        ],
        ObjectLockLegalHoldStatus: [
            ,
            output.headers["x-amz-object-lock-legal-hold"]
        ],
        Metadata: [
            ,
            Object.keys(output.headers).filter((header)=>header.startsWith("x-amz-meta-")).reduce((acc, header)=>{
                acc[header.substring(11)] = output.headers[header];
                return acc;
            }, {})
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_HeadObjectCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
            throw await de_NotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListBucketAnalyticsConfigurationsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListBucketAnalyticsConfigurationsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AnalyticsConfiguration === "") contents.AnalyticsConfigurationList = [];
    else if (data["AnalyticsConfiguration"] !== undefined) contents.AnalyticsConfigurationList = de_AnalyticsConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["AnalyticsConfiguration"]), context);
    if (data["ContinuationToken"] !== undefined) contents.ContinuationToken = (0, _smithyClient.expectString)(data["ContinuationToken"]);
    if (data["IsTruncated"] !== undefined) contents.IsTruncated = (0, _smithyClient.parseBoolean)(data["IsTruncated"]);
    if (data["NextContinuationToken"] !== undefined) contents.NextContinuationToken = (0, _smithyClient.expectString)(data["NextContinuationToken"]);
    return contents;
};
const de_ListBucketAnalyticsConfigurationsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_ListBucketIntelligentTieringConfigurationsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListBucketIntelligentTieringConfigurationsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ContinuationToken"] !== undefined) contents.ContinuationToken = (0, _smithyClient.expectString)(data["ContinuationToken"]);
    if (data.IntelligentTieringConfiguration === "") contents.IntelligentTieringConfigurationList = [];
    else if (data["IntelligentTieringConfiguration"] !== undefined) contents.IntelligentTieringConfigurationList = de_IntelligentTieringConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["IntelligentTieringConfiguration"]), context);
    if (data["IsTruncated"] !== undefined) contents.IsTruncated = (0, _smithyClient.parseBoolean)(data["IsTruncated"]);
    if (data["NextContinuationToken"] !== undefined) contents.NextContinuationToken = (0, _smithyClient.expectString)(data["NextContinuationToken"]);
    return contents;
};
const de_ListBucketIntelligentTieringConfigurationsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_ListBucketInventoryConfigurationsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListBucketInventoryConfigurationsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ContinuationToken"] !== undefined) contents.ContinuationToken = (0, _smithyClient.expectString)(data["ContinuationToken"]);
    if (data.InventoryConfiguration === "") contents.InventoryConfigurationList = [];
    else if (data["InventoryConfiguration"] !== undefined) contents.InventoryConfigurationList = de_InventoryConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["InventoryConfiguration"]), context);
    if (data["IsTruncated"] !== undefined) contents.IsTruncated = (0, _smithyClient.parseBoolean)(data["IsTruncated"]);
    if (data["NextContinuationToken"] !== undefined) contents.NextContinuationToken = (0, _smithyClient.expectString)(data["NextContinuationToken"]);
    return contents;
};
const de_ListBucketInventoryConfigurationsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_ListBucketMetricsConfigurationsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListBucketMetricsConfigurationsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ContinuationToken"] !== undefined) contents.ContinuationToken = (0, _smithyClient.expectString)(data["ContinuationToken"]);
    if (data["IsTruncated"] !== undefined) contents.IsTruncated = (0, _smithyClient.parseBoolean)(data["IsTruncated"]);
    if (data.MetricsConfiguration === "") contents.MetricsConfigurationList = [];
    else if (data["MetricsConfiguration"] !== undefined) contents.MetricsConfigurationList = de_MetricsConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["MetricsConfiguration"]), context);
    if (data["NextContinuationToken"] !== undefined) contents.NextContinuationToken = (0, _smithyClient.expectString)(data["NextContinuationToken"]);
    return contents;
};
const de_ListBucketMetricsConfigurationsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_ListBucketsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListBucketsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Buckets === "") contents.Buckets = [];
    else if (data["Buckets"] !== undefined && data["Buckets"]["Bucket"] !== undefined) contents.Buckets = de_Buckets((0, _smithyClient.getArrayIfSingleItem)(data["Buckets"]["Bucket"]), context);
    if (data["Owner"] !== undefined) contents.Owner = de_Owner(data["Owner"], context);
    return contents;
};
const de_ListBucketsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_ListMultipartUploadsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListMultipartUploadsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) contents.Bucket = (0, _smithyClient.expectString)(data["Bucket"]);
    if (data.CommonPrefixes === "") contents.CommonPrefixes = [];
    else if (data["CommonPrefixes"] !== undefined) contents.CommonPrefixes = de_CommonPrefixList((0, _smithyClient.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
    if (data["Delimiter"] !== undefined) contents.Delimiter = (0, _smithyClient.expectString)(data["Delimiter"]);
    if (data["EncodingType"] !== undefined) contents.EncodingType = (0, _smithyClient.expectString)(data["EncodingType"]);
    if (data["IsTruncated"] !== undefined) contents.IsTruncated = (0, _smithyClient.parseBoolean)(data["IsTruncated"]);
    if (data["KeyMarker"] !== undefined) contents.KeyMarker = (0, _smithyClient.expectString)(data["KeyMarker"]);
    if (data["MaxUploads"] !== undefined) contents.MaxUploads = (0, _smithyClient.strictParseInt32)(data["MaxUploads"]);
    if (data["NextKeyMarker"] !== undefined) contents.NextKeyMarker = (0, _smithyClient.expectString)(data["NextKeyMarker"]);
    if (data["NextUploadIdMarker"] !== undefined) contents.NextUploadIdMarker = (0, _smithyClient.expectString)(data["NextUploadIdMarker"]);
    if (data["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(data["Prefix"]);
    if (data["UploadIdMarker"] !== undefined) contents.UploadIdMarker = (0, _smithyClient.expectString)(data["UploadIdMarker"]);
    if (data.Upload === "") contents.Uploads = [];
    else if (data["Upload"] !== undefined) contents.Uploads = de_MultipartUploadList((0, _smithyClient.getArrayIfSingleItem)(data["Upload"]), context);
    return contents;
};
const de_ListMultipartUploadsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_ListObjectsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListObjectsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") contents.CommonPrefixes = [];
    else if (data["CommonPrefixes"] !== undefined) contents.CommonPrefixes = de_CommonPrefixList((0, _smithyClient.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
    if (data.Contents === "") contents.Contents = [];
    else if (data["Contents"] !== undefined) contents.Contents = de_ObjectList((0, _smithyClient.getArrayIfSingleItem)(data["Contents"]), context);
    if (data["Delimiter"] !== undefined) contents.Delimiter = (0, _smithyClient.expectString)(data["Delimiter"]);
    if (data["EncodingType"] !== undefined) contents.EncodingType = (0, _smithyClient.expectString)(data["EncodingType"]);
    if (data["IsTruncated"] !== undefined) contents.IsTruncated = (0, _smithyClient.parseBoolean)(data["IsTruncated"]);
    if (data["Marker"] !== undefined) contents.Marker = (0, _smithyClient.expectString)(data["Marker"]);
    if (data["MaxKeys"] !== undefined) contents.MaxKeys = (0, _smithyClient.strictParseInt32)(data["MaxKeys"]);
    if (data["Name"] !== undefined) contents.Name = (0, _smithyClient.expectString)(data["Name"]);
    if (data["NextMarker"] !== undefined) contents.NextMarker = (0, _smithyClient.expectString)(data["NextMarker"]);
    if (data["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(data["Prefix"]);
    return contents;
};
const de_ListObjectsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
            throw await de_NoSuchBucketRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListObjectsV2Command = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListObjectsV2CommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") contents.CommonPrefixes = [];
    else if (data["CommonPrefixes"] !== undefined) contents.CommonPrefixes = de_CommonPrefixList((0, _smithyClient.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
    if (data.Contents === "") contents.Contents = [];
    else if (data["Contents"] !== undefined) contents.Contents = de_ObjectList((0, _smithyClient.getArrayIfSingleItem)(data["Contents"]), context);
    if (data["ContinuationToken"] !== undefined) contents.ContinuationToken = (0, _smithyClient.expectString)(data["ContinuationToken"]);
    if (data["Delimiter"] !== undefined) contents.Delimiter = (0, _smithyClient.expectString)(data["Delimiter"]);
    if (data["EncodingType"] !== undefined) contents.EncodingType = (0, _smithyClient.expectString)(data["EncodingType"]);
    if (data["IsTruncated"] !== undefined) contents.IsTruncated = (0, _smithyClient.parseBoolean)(data["IsTruncated"]);
    if (data["KeyCount"] !== undefined) contents.KeyCount = (0, _smithyClient.strictParseInt32)(data["KeyCount"]);
    if (data["MaxKeys"] !== undefined) contents.MaxKeys = (0, _smithyClient.strictParseInt32)(data["MaxKeys"]);
    if (data["Name"] !== undefined) contents.Name = (0, _smithyClient.expectString)(data["Name"]);
    if (data["NextContinuationToken"] !== undefined) contents.NextContinuationToken = (0, _smithyClient.expectString)(data["NextContinuationToken"]);
    if (data["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(data["Prefix"]);
    if (data["StartAfter"] !== undefined) contents.StartAfter = (0, _smithyClient.expectString)(data["StartAfter"]);
    return contents;
};
const de_ListObjectsV2CommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
            throw await de_NoSuchBucketRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_ListObjectVersionsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListObjectVersionsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") contents.CommonPrefixes = [];
    else if (data["CommonPrefixes"] !== undefined) contents.CommonPrefixes = de_CommonPrefixList((0, _smithyClient.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
    if (data.DeleteMarker === "") contents.DeleteMarkers = [];
    else if (data["DeleteMarker"] !== undefined) contents.DeleteMarkers = de_DeleteMarkers((0, _smithyClient.getArrayIfSingleItem)(data["DeleteMarker"]), context);
    if (data["Delimiter"] !== undefined) contents.Delimiter = (0, _smithyClient.expectString)(data["Delimiter"]);
    if (data["EncodingType"] !== undefined) contents.EncodingType = (0, _smithyClient.expectString)(data["EncodingType"]);
    if (data["IsTruncated"] !== undefined) contents.IsTruncated = (0, _smithyClient.parseBoolean)(data["IsTruncated"]);
    if (data["KeyMarker"] !== undefined) contents.KeyMarker = (0, _smithyClient.expectString)(data["KeyMarker"]);
    if (data["MaxKeys"] !== undefined) contents.MaxKeys = (0, _smithyClient.strictParseInt32)(data["MaxKeys"]);
    if (data["Name"] !== undefined) contents.Name = (0, _smithyClient.expectString)(data["Name"]);
    if (data["NextKeyMarker"] !== undefined) contents.NextKeyMarker = (0, _smithyClient.expectString)(data["NextKeyMarker"]);
    if (data["NextVersionIdMarker"] !== undefined) contents.NextVersionIdMarker = (0, _smithyClient.expectString)(data["NextVersionIdMarker"]);
    if (data["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(data["Prefix"]);
    if (data["VersionIdMarker"] !== undefined) contents.VersionIdMarker = (0, _smithyClient.expectString)(data["VersionIdMarker"]);
    if (data.Version === "") contents.Versions = [];
    else if (data["Version"] !== undefined) contents.Versions = de_ObjectVersionList((0, _smithyClient.getArrayIfSingleItem)(data["Version"]), context);
    return contents;
};
const de_ListObjectVersionsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_ListPartsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_ListPartsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        AbortDate: [
            ()=>void 0 !== output.headers["x-amz-abort-date"],
            ()=>(0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc7231DateTime)(output.headers["x-amz-abort-date"]))
        ],
        AbortRuleId: [
            ,
            output.headers["x-amz-abort-rule-id"]
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    const data = (0, _smithyClient.expectNonNull)((0, _smithyClient.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) contents.Bucket = (0, _smithyClient.expectString)(data["Bucket"]);
    if (data["ChecksumAlgorithm"] !== undefined) contents.ChecksumAlgorithm = (0, _smithyClient.expectString)(data["ChecksumAlgorithm"]);
    if (data["Initiator"] !== undefined) contents.Initiator = de_Initiator(data["Initiator"], context);
    if (data["IsTruncated"] !== undefined) contents.IsTruncated = (0, _smithyClient.parseBoolean)(data["IsTruncated"]);
    if (data["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(data["Key"]);
    if (data["MaxParts"] !== undefined) contents.MaxParts = (0, _smithyClient.strictParseInt32)(data["MaxParts"]);
    if (data["NextPartNumberMarker"] !== undefined) contents.NextPartNumberMarker = (0, _smithyClient.expectString)(data["NextPartNumberMarker"]);
    if (data["Owner"] !== undefined) contents.Owner = de_Owner(data["Owner"], context);
    if (data["PartNumberMarker"] !== undefined) contents.PartNumberMarker = (0, _smithyClient.expectString)(data["PartNumberMarker"]);
    if (data.Part === "") contents.Parts = [];
    else if (data["Part"] !== undefined) contents.Parts = de_Parts((0, _smithyClient.getArrayIfSingleItem)(data["Part"]), context);
    if (data["StorageClass"] !== undefined) contents.StorageClass = (0, _smithyClient.expectString)(data["StorageClass"]);
    if (data["UploadId"] !== undefined) contents.UploadId = (0, _smithyClient.expectString)(data["UploadId"]);
    return contents;
};
const de_ListPartsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketAccelerateConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketAccelerateConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketAccelerateConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketAclCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketAclCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketAclCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketAnalyticsConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketAnalyticsConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketAnalyticsConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketCorsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketCorsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketCorsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketEncryptionCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketEncryptionCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketEncryptionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketIntelligentTieringConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketIntelligentTieringConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketIntelligentTieringConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketInventoryConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketInventoryConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketInventoryConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketLifecycleConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketLifecycleConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketLifecycleConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketLoggingCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketLoggingCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketLoggingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketMetricsConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketMetricsConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketMetricsConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketNotificationConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketNotificationConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketNotificationConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketOwnershipControlsCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketOwnershipControlsCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketOwnershipControlsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketPolicyCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketPolicyCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketPolicyCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketReplicationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketReplicationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketReplicationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketRequestPaymentCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketRequestPaymentCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketRequestPaymentCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketTaggingCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketTaggingCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketTaggingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketVersioningCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketVersioningCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketVersioningCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutBucketWebsiteCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutBucketWebsiteCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutBucketWebsiteCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutObjectCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutObjectCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        Expiration: [
            ,
            output.headers["x-amz-expiration"]
        ],
        ETag: [
            ,
            output.headers["etag"]
        ],
        ChecksumCRC32: [
            ,
            output.headers["x-amz-checksum-crc32"]
        ],
        ChecksumCRC32C: [
            ,
            output.headers["x-amz-checksum-crc32c"]
        ],
        ChecksumSHA1: [
            ,
            output.headers["x-amz-checksum-sha1"]
        ],
        ChecksumSHA256: [
            ,
            output.headers["x-amz-checksum-sha256"]
        ],
        ServerSideEncryption: [
            ,
            output.headers["x-amz-server-side-encryption"]
        ],
        VersionId: [
            ,
            output.headers["x-amz-version-id"]
        ],
        SSECustomerAlgorithm: [
            ,
            output.headers["x-amz-server-side-encryption-customer-algorithm"]
        ],
        SSECustomerKeyMD5: [
            ,
            output.headers["x-amz-server-side-encryption-customer-key-md5"]
        ],
        SSEKMSKeyId: [
            ,
            output.headers["x-amz-server-side-encryption-aws-kms-key-id"]
        ],
        SSEKMSEncryptionContext: [
            ,
            output.headers["x-amz-server-side-encryption-context"]
        ],
        BucketKeyEnabled: [
            ()=>void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutObjectCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutObjectAclCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutObjectAclCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutObjectAclCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
            throw await de_NoSuchKeyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_PutObjectLegalHoldCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutObjectLegalHoldCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutObjectLegalHoldCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutObjectLockConfigurationCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutObjectLockConfigurationCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutObjectLockConfigurationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutObjectRetentionCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutObjectRetentionCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutObjectRetentionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutObjectTaggingCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutObjectTaggingCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        VersionId: [
            ,
            output.headers["x-amz-version-id"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutObjectTaggingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_PutPublicAccessBlockCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_PutPublicAccessBlockCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PutPublicAccessBlockCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_RestoreObjectCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_RestoreObjectCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ],
        RestoreOutputPath: [
            ,
            output.headers["x-amz-restore-output-path"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_RestoreObjectCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ObjectAlreadyInActiveTierError":
        case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
            throw await de_ObjectAlreadyInActiveTierErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode
            });
    }
};
const de_SelectObjectContentCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_SelectObjectContentCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    const data = output.body;
    contents.Payload = de_SelectObjectContentEventStream(data, context);
    return contents;
};
const de_SelectObjectContentCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_UploadPartCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_UploadPartCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        ServerSideEncryption: [
            ,
            output.headers["x-amz-server-side-encryption"]
        ],
        ETag: [
            ,
            output.headers["etag"]
        ],
        ChecksumCRC32: [
            ,
            output.headers["x-amz-checksum-crc32"]
        ],
        ChecksumCRC32C: [
            ,
            output.headers["x-amz-checksum-crc32c"]
        ],
        ChecksumSHA1: [
            ,
            output.headers["x-amz-checksum-sha1"]
        ],
        ChecksumSHA256: [
            ,
            output.headers["x-amz-checksum-sha256"]
        ],
        SSECustomerAlgorithm: [
            ,
            output.headers["x-amz-server-side-encryption-customer-algorithm"]
        ],
        SSECustomerKeyMD5: [
            ,
            output.headers["x-amz-server-side-encryption-customer-key-md5"]
        ],
        SSEKMSKeyId: [
            ,
            output.headers["x-amz-server-side-encryption-aws-kms-key-id"]
        ],
        BucketKeyEnabled: [
            ()=>void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    await collectBody(output.body, context);
    return contents;
};
const de_UploadPartCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_UploadPartCopyCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_UploadPartCopyCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output),
        CopySourceVersionId: [
            ,
            output.headers["x-amz-copy-source-version-id"]
        ],
        ServerSideEncryption: [
            ,
            output.headers["x-amz-server-side-encryption"]
        ],
        SSECustomerAlgorithm: [
            ,
            output.headers["x-amz-server-side-encryption-customer-algorithm"]
        ],
        SSECustomerKeyMD5: [
            ,
            output.headers["x-amz-server-side-encryption-customer-key-md5"]
        ],
        SSEKMSKeyId: [
            ,
            output.headers["x-amz-server-side-encryption-aws-kms-key-id"]
        ],
        BucketKeyEnabled: [
            ()=>void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
            ()=>(0, _smithyClient.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [
            ,
            output.headers["x-amz-request-charged"]
        ]
    });
    const data = (0, _smithyClient.expectObject)(await parseBody(output.body, context));
    contents.CopyPartResult = de_CopyPartResult(data, context);
    return contents;
};
const de_UploadPartCopyCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const de_WriteGetObjectResponseCommand = async (output, context)=>{
    if (output.statusCode !== 200 && output.statusCode >= 300) return de_WriteGetObjectResponseCommandError(output, context);
    const contents = (0, _smithyClient.map)({
        $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
};
const de_WriteGetObjectResponseCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode
    });
};
const throwDefaultError = (0, _smithyClient.withBaseException)((0, _s3ServiceException.S3ServiceException));
const de_BucketAlreadyExistsRes = async (parsedOutput, context)=>{
    const contents = (0, _smithyClient.map)({});
    const data = parsedOutput.body;
    const exception = new (0, _models0.BucketAlreadyExists)({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
const de_BucketAlreadyOwnedByYouRes = async (parsedOutput, context)=>{
    const contents = (0, _smithyClient.map)({});
    const data = parsedOutput.body;
    const exception = new (0, _models0.BucketAlreadyOwnedByYou)({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
const de_InvalidObjectStateRes = async (parsedOutput, context)=>{
    const contents = (0, _smithyClient.map)({});
    const data = parsedOutput.body;
    if (data["AccessTier"] !== undefined) contents.AccessTier = (0, _smithyClient.expectString)(data["AccessTier"]);
    if (data["StorageClass"] !== undefined) contents.StorageClass = (0, _smithyClient.expectString)(data["StorageClass"]);
    const exception = new (0, _models0.InvalidObjectState)({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
const de_NoSuchBucketRes = async (parsedOutput, context)=>{
    const contents = (0, _smithyClient.map)({});
    const data = parsedOutput.body;
    const exception = new (0, _models0.NoSuchBucket)({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
const de_NoSuchKeyRes = async (parsedOutput, context)=>{
    const contents = (0, _smithyClient.map)({});
    const data = parsedOutput.body;
    const exception = new (0, _models0.NoSuchKey)({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
const de_NoSuchUploadRes = async (parsedOutput, context)=>{
    const contents = (0, _smithyClient.map)({});
    const data = parsedOutput.body;
    const exception = new (0, _models0.NoSuchUpload)({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
const de_NotFoundRes = async (parsedOutput, context)=>{
    const contents = (0, _smithyClient.map)({});
    const data = parsedOutput.body;
    const exception = new (0, _models0.NotFound)({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
const de_ObjectAlreadyInActiveTierErrorRes = async (parsedOutput, context)=>{
    const contents = (0, _smithyClient.map)({});
    const data = parsedOutput.body;
    const exception = new (0, _models1.ObjectAlreadyInActiveTierError)({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
const de_ObjectNotInActiveTierErrorRes = async (parsedOutput, context)=>{
    const contents = (0, _smithyClient.map)({});
    const data = parsedOutput.body;
    const exception = new (0, _models0.ObjectNotInActiveTierError)({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
    });
    return (0, _smithyClient.decorateServiceException)(exception, parsedOutput.body);
};
const de_SelectObjectContentEventStream = (output, context)=>{
    return context.eventStreamMarshaller.deserialize(output, async (event)=>{
        if (event["Records"] != null) return {
            Records: await de_RecordsEvent_event(event["Records"], context)
        };
        if (event["Stats"] != null) return {
            Stats: await de_StatsEvent_event(event["Stats"], context)
        };
        if (event["Progress"] != null) return {
            Progress: await de_ProgressEvent_event(event["Progress"], context)
        };
        if (event["Cont"] != null) return {
            Cont: await de_ContinuationEvent_event(event["Cont"], context)
        };
        if (event["End"] != null) return {
            End: await de_EndEvent_event(event["End"], context)
        };
        return {
            $unknown: output
        };
    });
};
const de_ContinuationEvent_event = async (output, context)=>{
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, de_ContinuationEvent(data, context));
    return contents;
};
const de_EndEvent_event = async (output, context)=>{
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, de_EndEvent(data, context));
    return contents;
};
const de_ProgressEvent_event = async (output, context)=>{
    const contents = {};
    const data = await parseBody(output.body, context);
    contents.Details = de_Progress(data, context);
    return contents;
};
const de_RecordsEvent_event = async (output, context)=>{
    const contents = {};
    contents.Payload = output.body;
    return contents;
};
const de_StatsEvent_event = async (output, context)=>{
    const contents = {};
    const data = await parseBody(output.body, context);
    contents.Details = de_Stats(data, context);
    return contents;
};
const se_AbortIncompleteMultipartUpload = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("AbortIncompleteMultipartUpload");
    if (input.DaysAfterInitiation != null) {
        const node = (0, _xmlBuilder.XmlNode).of("DaysAfterInitiation", String(input.DaysAfterInitiation)).withName("DaysAfterInitiation");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_AccelerateConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("AccelerateConfiguration");
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("BucketAccelerateStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_AccessControlPolicy = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("AccessControlPolicy");
    if (input.Grants != null) {
        const nodes = se_Grants(input.Grants, context);
        const containerNode = new (0, _xmlBuilder.XmlNode)("AccessControlList");
        nodes.map((node)=>{
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.Owner != null) {
        const node = se_Owner(input.Owner, context).withName("Owner");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_AccessControlTranslation = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("AccessControlTranslation");
    if (input.Owner != null) {
        const node = (0, _xmlBuilder.XmlNode).of("OwnerOverride", input.Owner).withName("Owner");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_AllowedHeaders = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = (0, _xmlBuilder.XmlNode).of("AllowedHeader", entry);
        return node.withName("member");
    });
};
const se_AllowedMethods = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = (0, _xmlBuilder.XmlNode).of("AllowedMethod", entry);
        return node.withName("member");
    });
};
const se_AllowedOrigins = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = (0, _xmlBuilder.XmlNode).of("AllowedOrigin", entry);
        return node.withName("member");
    });
};
const se_AnalyticsAndOperator = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("AnalyticsAndOperator");
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node)=>{
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_AnalyticsConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("AnalyticsConfiguration");
    if (input.Id != null) {
        const node = (0, _xmlBuilder.XmlNode).of("AnalyticsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = se_AnalyticsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClassAnalysis != null) {
        const node = se_StorageClassAnalysis(input.StorageClassAnalysis, context).withName("StorageClassAnalysis");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_AnalyticsExportDestination = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("AnalyticsExportDestination");
    if (input.S3BucketDestination != null) {
        const node = se_AnalyticsS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_AnalyticsFilter = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("AnalyticsFilter");
    (0, _models0.AnalyticsFilter).visit(input, {
        Prefix: (value)=>{
            const node = (0, _xmlBuilder.XmlNode).of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: (value)=>{
            const node = se_Tag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        And: (value)=>{
            const node = se_AnalyticsAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: (name, value)=>{
            if (!(value instanceof (0, _xmlBuilder.XmlNode) || value instanceof (0, _xmlBuilder.XmlText))) throw new Error("Unable to serialize unknown union members in XML.");
            bodyNode.addChildNode(new (0, _xmlBuilder.XmlNode)(name).addChildNode(value));
        }
    });
    return bodyNode;
};
const se_AnalyticsS3BucketDestination = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("AnalyticsS3BucketDestination");
    if (input.Format != null) {
        const node = (0, _xmlBuilder.XmlNode).of("AnalyticsS3ExportFileFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
    }
    if (input.BucketAccountId != null) {
        const node = (0, _xmlBuilder.XmlNode).of("AccountId", input.BucketAccountId).withName("BucketAccountId");
        bodyNode.addChildNode(node);
    }
    if (input.Bucket != null) {
        const node = (0, _xmlBuilder.XmlNode).of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_BucketLifecycleConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("BucketLifecycleConfiguration");
    if (input.Rules != null) {
        const nodes = se_LifecycleRules(input.Rules, context);
        nodes.map((node)=>{
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_BucketLoggingStatus = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("BucketLoggingStatus");
    if (input.LoggingEnabled != null) {
        const node = se_LoggingEnabled(input.LoggingEnabled, context).withName("LoggingEnabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_CompletedMultipartUpload = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("CompletedMultipartUpload");
    if (input.Parts != null) {
        const nodes = se_CompletedPartList(input.Parts, context);
        nodes.map((node)=>{
            node = node.withName("Part");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_CompletedPart = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("CompletedPart");
    if (input.ETag != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ETag", input.ETag).withName("ETag");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumCRC32 != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ChecksumCRC32", input.ChecksumCRC32).withName("ChecksumCRC32");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumCRC32C != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ChecksumCRC32C", input.ChecksumCRC32C).withName("ChecksumCRC32C");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumSHA1 != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ChecksumSHA1", input.ChecksumSHA1).withName("ChecksumSHA1");
        bodyNode.addChildNode(node);
    }
    if (input.ChecksumSHA256 != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ChecksumSHA256", input.ChecksumSHA256).withName("ChecksumSHA256");
        bodyNode.addChildNode(node);
    }
    if (input.PartNumber != null) {
        const node = (0, _xmlBuilder.XmlNode).of("PartNumber", String(input.PartNumber)).withName("PartNumber");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_CompletedPartList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_CompletedPart(entry, context);
        return node.withName("member");
    });
};
const se_Condition = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Condition");
    if (input.HttpErrorCodeReturnedEquals != null) {
        const node = (0, _xmlBuilder.XmlNode).of("HttpErrorCodeReturnedEquals", input.HttpErrorCodeReturnedEquals).withName("HttpErrorCodeReturnedEquals");
        bodyNode.addChildNode(node);
    }
    if (input.KeyPrefixEquals != null) {
        const node = (0, _xmlBuilder.XmlNode).of("KeyPrefixEquals", input.KeyPrefixEquals).withName("KeyPrefixEquals");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_CORSConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("CORSConfiguration");
    if (input.CORSRules != null) {
        const nodes = se_CORSRules(input.CORSRules, context);
        nodes.map((node)=>{
            node = node.withName("CORSRule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_CORSRule = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("CORSRule");
    if (input.ID != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.AllowedHeaders != null) {
        const nodes = se_AllowedHeaders(input.AllowedHeaders, context);
        nodes.map((node)=>{
            node = node.withName("AllowedHeader");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AllowedMethods != null) {
        const nodes = se_AllowedMethods(input.AllowedMethods, context);
        nodes.map((node)=>{
            node = node.withName("AllowedMethod");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AllowedOrigins != null) {
        const nodes = se_AllowedOrigins(input.AllowedOrigins, context);
        nodes.map((node)=>{
            node = node.withName("AllowedOrigin");
            bodyNode.addChildNode(node);
        });
    }
    if (input.ExposeHeaders != null) {
        const nodes = se_ExposeHeaders(input.ExposeHeaders, context);
        nodes.map((node)=>{
            node = node.withName("ExposeHeader");
            bodyNode.addChildNode(node);
        });
    }
    if (input.MaxAgeSeconds != null) {
        const node = (0, _xmlBuilder.XmlNode).of("MaxAgeSeconds", String(input.MaxAgeSeconds)).withName("MaxAgeSeconds");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_CORSRules = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_CORSRule(entry, context);
        return node.withName("member");
    });
};
const se_CreateBucketConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("CreateBucketConfiguration");
    if (input.LocationConstraint != null) {
        const node = (0, _xmlBuilder.XmlNode).of("BucketLocationConstraint", input.LocationConstraint).withName("LocationConstraint");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_CSVInput = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("CSVInput");
    if (input.FileHeaderInfo != null) {
        const node = (0, _xmlBuilder.XmlNode).of("FileHeaderInfo", input.FileHeaderInfo).withName("FileHeaderInfo");
        bodyNode.addChildNode(node);
    }
    if (input.Comments != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Comments", input.Comments).withName("Comments");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter != null) {
        const node = (0, _xmlBuilder.XmlNode).of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter != null) {
        const node = (0, _xmlBuilder.XmlNode).of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter != null) {
        const node = (0, _xmlBuilder.XmlNode).of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter != null) {
        const node = (0, _xmlBuilder.XmlNode).of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.AllowQuotedRecordDelimiter != null) {
        const node = (0, _xmlBuilder.XmlNode).of("AllowQuotedRecordDelimiter", String(input.AllowQuotedRecordDelimiter)).withName("AllowQuotedRecordDelimiter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_CSVOutput = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("CSVOutput");
    if (input.QuoteFields != null) {
        const node = (0, _xmlBuilder.XmlNode).of("QuoteFields", input.QuoteFields).withName("QuoteFields");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter != null) {
        const node = (0, _xmlBuilder.XmlNode).of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter != null) {
        const node = (0, _xmlBuilder.XmlNode).of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter != null) {
        const node = (0, _xmlBuilder.XmlNode).of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter != null) {
        const node = (0, _xmlBuilder.XmlNode).of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_DefaultRetention = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("DefaultRetention");
    if (input.Mode != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.Years != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Years", String(input.Years)).withName("Years");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Delete = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Delete");
    if (input.Objects != null) {
        const nodes = se_ObjectIdentifierList(input.Objects, context);
        nodes.map((node)=>{
            node = node.withName("Object");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Quiet != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Quiet", String(input.Quiet)).withName("Quiet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_DeleteMarkerReplication = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("DeleteMarkerReplication");
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("DeleteMarkerReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Destination = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Destination");
    if (input.Bucket != null) {
        const node = (0, _xmlBuilder.XmlNode).of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Account != null) {
        const node = (0, _xmlBuilder.XmlNode).of("AccountId", input.Account).withName("Account");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
        const node = (0, _xmlBuilder.XmlNode).of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    if (input.AccessControlTranslation != null) {
        const node = se_AccessControlTranslation(input.AccessControlTranslation, context).withName("AccessControlTranslation");
        bodyNode.addChildNode(node);
    }
    if (input.EncryptionConfiguration != null) {
        const node = se_EncryptionConfiguration(input.EncryptionConfiguration, context).withName("EncryptionConfiguration");
        bodyNode.addChildNode(node);
    }
    if (input.ReplicationTime != null) {
        const node = se_ReplicationTime(input.ReplicationTime, context).withName("ReplicationTime");
        bodyNode.addChildNode(node);
    }
    if (input.Metrics != null) {
        const node = se_Metrics(input.Metrics, context).withName("Metrics");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Encryption = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Encryption");
    if (input.EncryptionType != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ServerSideEncryption", input.EncryptionType).withName("EncryptionType");
        bodyNode.addChildNode(node);
    }
    if (input.KMSKeyId != null) {
        const node = (0, _xmlBuilder.XmlNode).of("SSEKMSKeyId", input.KMSKeyId).withName("KMSKeyId");
        bodyNode.addChildNode(node);
    }
    if (input.KMSContext != null) {
        const node = (0, _xmlBuilder.XmlNode).of("KMSContext", input.KMSContext).withName("KMSContext");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_EncryptionConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("EncryptionConfiguration");
    if (input.ReplicaKmsKeyID != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ReplicaKmsKeyID", input.ReplicaKmsKeyID).withName("ReplicaKmsKeyID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ErrorDocument = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ErrorDocument");
    if (input.Key != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_EventBridgeConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("EventBridgeConfiguration");
    return bodyNode;
};
const se_EventList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = (0, _xmlBuilder.XmlNode).of("Event", entry);
        return node.withName("member");
    });
};
const se_ExistingObjectReplication = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ExistingObjectReplication");
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ExistingObjectReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ExposeHeaders = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = (0, _xmlBuilder.XmlNode).of("ExposeHeader", entry);
        return node.withName("member");
    });
};
const se_FilterRule = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("FilterRule");
    if (input.Name != null) {
        const node = (0, _xmlBuilder.XmlNode).of("FilterRuleName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        const node = (0, _xmlBuilder.XmlNode).of("FilterRuleValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_FilterRuleList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_FilterRule(entry, context);
        return node.withName("member");
    });
};
const se_GlacierJobParameters = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("GlacierJobParameters");
    if (input.Tier != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Grant = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Grant");
    if (input.Grantee != null) {
        const node = se_Grantee(input.Grantee, context).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
    }
    if (input.Permission != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Permission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Grantee = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Grantee");
    if (input.DisplayName != null) {
        const node = (0, _xmlBuilder.XmlNode).of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
    }
    if (input.EmailAddress != null) {
        const node = (0, _xmlBuilder.XmlNode).of("EmailAddress", input.EmailAddress).withName("EmailAddress");
        bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.URI != null) {
        const node = (0, _xmlBuilder.XmlNode).of("URI", input.URI).withName("URI");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) bodyNode.addAttribute("xsi:type", input.Type);
    return bodyNode;
};
const se_Grants = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_Grant(entry, context);
        return node.withName("Grant");
    });
};
const se_IndexDocument = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("IndexDocument");
    if (input.Suffix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Suffix", input.Suffix).withName("Suffix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_InputSerialization = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("InputSerialization");
    if (input.CSV != null) {
        const node = se_CSVInput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
    }
    if (input.CompressionType != null) {
        const node = (0, _xmlBuilder.XmlNode).of("CompressionType", input.CompressionType).withName("CompressionType");
        bodyNode.addChildNode(node);
    }
    if (input.JSON != null) {
        const node = se_JSONInput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
    }
    if (input.Parquet != null) {
        const node = se_ParquetInput(input.Parquet, context).withName("Parquet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_IntelligentTieringAndOperator = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("IntelligentTieringAndOperator");
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node)=>{
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_IntelligentTieringConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("IntelligentTieringConfiguration");
    if (input.Id != null) {
        const node = (0, _xmlBuilder.XmlNode).of("IntelligentTieringId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = se_IntelligentTieringFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("IntelligentTieringStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Tierings != null) {
        const nodes = se_TieringList(input.Tierings, context);
        nodes.map((node)=>{
            node = node.withName("Tiering");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_IntelligentTieringFilter = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("IntelligentTieringFilter");
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tag != null) {
        const node = se_Tag(input.Tag, context).withName("Tag");
        bodyNode.addChildNode(node);
    }
    if (input.And != null) {
        const node = se_IntelligentTieringAndOperator(input.And, context).withName("And");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_InventoryConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("InventoryConfiguration");
    if (input.Destination != null) {
        const node = se_InventoryDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
    }
    if (input.IsEnabled != null) {
        const node = (0, _xmlBuilder.XmlNode).of("IsEnabled", String(input.IsEnabled)).withName("IsEnabled");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = se_InventoryFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Id != null) {
        const node = (0, _xmlBuilder.XmlNode).of("InventoryId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.IncludedObjectVersions != null) {
        const node = (0, _xmlBuilder.XmlNode).of("InventoryIncludedObjectVersions", input.IncludedObjectVersions).withName("IncludedObjectVersions");
        bodyNode.addChildNode(node);
    }
    if (input.OptionalFields != null) {
        const nodes = se_InventoryOptionalFields(input.OptionalFields, context);
        const containerNode = new (0, _xmlBuilder.XmlNode)("OptionalFields");
        nodes.map((node)=>{
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.Schedule != null) {
        const node = se_InventorySchedule(input.Schedule, context).withName("Schedule");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_InventoryDestination = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("InventoryDestination");
    if (input.S3BucketDestination != null) {
        const node = se_InventoryS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_InventoryEncryption = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("InventoryEncryption");
    if (input.SSES3 != null) {
        const node = se_SSES3(input.SSES3, context).withName("SSE-S3");
        bodyNode.addChildNode(node);
    }
    if (input.SSEKMS != null) {
        const node = se_SSEKMS(input.SSEKMS, context).withName("SSE-KMS");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_InventoryFilter = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("InventoryFilter");
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_InventoryOptionalFields = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = (0, _xmlBuilder.XmlNode).of("InventoryOptionalField", entry);
        return node.withName("Field");
    });
};
const se_InventoryS3BucketDestination = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("InventoryS3BucketDestination");
    if (input.AccountId != null) {
        const node = (0, _xmlBuilder.XmlNode).of("AccountId", input.AccountId).withName("AccountId");
        bodyNode.addChildNode(node);
    }
    if (input.Bucket != null) {
        const node = (0, _xmlBuilder.XmlNode).of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Format != null) {
        const node = (0, _xmlBuilder.XmlNode).of("InventoryFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Encryption != null) {
        const node = se_InventoryEncryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_InventorySchedule = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("InventorySchedule");
    if (input.Frequency != null) {
        const node = (0, _xmlBuilder.XmlNode).of("InventoryFrequency", input.Frequency).withName("Frequency");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_JSONInput = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("JSONInput");
    if (input.Type != null) {
        const node = (0, _xmlBuilder.XmlNode).of("JSONType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_JSONOutput = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("JSONOutput");
    if (input.RecordDelimiter != null) {
        const node = (0, _xmlBuilder.XmlNode).of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_LambdaFunctionConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("LambdaFunctionConfiguration");
    if (input.Id != null) {
        const node = (0, _xmlBuilder.XmlNode).of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.LambdaFunctionArn != null) {
        const node = (0, _xmlBuilder.XmlNode).of("LambdaFunctionArn", input.LambdaFunctionArn).withName("CloudFunction");
        bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
        const nodes = se_EventList(input.Events, context);
        nodes.map((node)=>{
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter != null) {
        const node = se_NotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_LambdaFunctionConfigurationList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_LambdaFunctionConfiguration(entry, context);
        return node.withName("member");
    });
};
const se_LifecycleExpiration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("LifecycleExpiration");
    if (input.Date != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Date", (input.Date.toISOString().split(".")[0] + "Z").toString()).withName("Date");
        bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.ExpiredObjectDeleteMarker != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ExpiredObjectDeleteMarker", String(input.ExpiredObjectDeleteMarker)).withName("ExpiredObjectDeleteMarker");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_LifecycleRule = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("LifecycleRule");
    if (input.Expiration != null) {
        const node = se_LifecycleExpiration(input.Expiration, context).withName("Expiration");
        bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = se_LifecycleRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ExpirationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Transitions != null) {
        const nodes = se_TransitionList(input.Transitions, context);
        nodes.map((node)=>{
            node = node.withName("Transition");
            bodyNode.addChildNode(node);
        });
    }
    if (input.NoncurrentVersionTransitions != null) {
        const nodes = se_NoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);
        nodes.map((node)=>{
            node = node.withName("NoncurrentVersionTransition");
            bodyNode.addChildNode(node);
        });
    }
    if (input.NoncurrentVersionExpiration != null) {
        const node = se_NoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName("NoncurrentVersionExpiration");
        bodyNode.addChildNode(node);
    }
    if (input.AbortIncompleteMultipartUpload != null) {
        const node = se_AbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName("AbortIncompleteMultipartUpload");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_LifecycleRuleAndOperator = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("LifecycleRuleAndOperator");
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node)=>{
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    if (input.ObjectSizeGreaterThan != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectSizeGreaterThanBytes", String(input.ObjectSizeGreaterThan)).withName("ObjectSizeGreaterThan");
        bodyNode.addChildNode(node);
    }
    if (input.ObjectSizeLessThan != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectSizeLessThanBytes", String(input.ObjectSizeLessThan)).withName("ObjectSizeLessThan");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_LifecycleRuleFilter = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("LifecycleRuleFilter");
    (0, _models0.LifecycleRuleFilter).visit(input, {
        Prefix: (value)=>{
            const node = (0, _xmlBuilder.XmlNode).of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: (value)=>{
            const node = se_Tag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        ObjectSizeGreaterThan: (value)=>{
            const node = (0, _xmlBuilder.XmlNode).of("ObjectSizeGreaterThanBytes", String(value)).withName("ObjectSizeGreaterThan");
            bodyNode.addChildNode(node);
        },
        ObjectSizeLessThan: (value)=>{
            const node = (0, _xmlBuilder.XmlNode).of("ObjectSizeLessThanBytes", String(value)).withName("ObjectSizeLessThan");
            bodyNode.addChildNode(node);
        },
        And: (value)=>{
            const node = se_LifecycleRuleAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: (name, value)=>{
            if (!(value instanceof (0, _xmlBuilder.XmlNode) || value instanceof (0, _xmlBuilder.XmlText))) throw new Error("Unable to serialize unknown union members in XML.");
            bodyNode.addChildNode(new (0, _xmlBuilder.XmlNode)(name).addChildNode(value));
        }
    });
    return bodyNode;
};
const se_LifecycleRules = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_LifecycleRule(entry, context);
        return node.withName("member");
    });
};
const se_LoggingEnabled = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("LoggingEnabled");
    if (input.TargetBucket != null) {
        const node = (0, _xmlBuilder.XmlNode).of("TargetBucket", input.TargetBucket).withName("TargetBucket");
        bodyNode.addChildNode(node);
    }
    if (input.TargetGrants != null) {
        const nodes = se_TargetGrants(input.TargetGrants, context);
        const containerNode = new (0, _xmlBuilder.XmlNode)("TargetGrants");
        nodes.map((node)=>{
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.TargetPrefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("TargetPrefix", input.TargetPrefix).withName("TargetPrefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_MetadataEntry = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("MetadataEntry");
    if (input.Name != null) {
        const node = (0, _xmlBuilder.XmlNode).of("MetadataKey", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        const node = (0, _xmlBuilder.XmlNode).of("MetadataValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Metrics = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Metrics");
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("MetricsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.EventThreshold != null) {
        const node = se_ReplicationTimeValue(input.EventThreshold, context).withName("EventThreshold");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_MetricsAndOperator = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("MetricsAndOperator");
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node)=>{
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AccessPointArn != null) {
        const node = (0, _xmlBuilder.XmlNode).of("AccessPointArn", input.AccessPointArn).withName("AccessPointArn");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_MetricsConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("MetricsConfiguration");
    if (input.Id != null) {
        const node = (0, _xmlBuilder.XmlNode).of("MetricsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = se_MetricsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_MetricsFilter = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("MetricsFilter");
    (0, _models0.MetricsFilter).visit(input, {
        Prefix: (value)=>{
            const node = (0, _xmlBuilder.XmlNode).of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: (value)=>{
            const node = se_Tag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        AccessPointArn: (value)=>{
            const node = (0, _xmlBuilder.XmlNode).of("AccessPointArn", value).withName("AccessPointArn");
            bodyNode.addChildNode(node);
        },
        And: (value)=>{
            const node = se_MetricsAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: (name, value)=>{
            if (!(value instanceof (0, _xmlBuilder.XmlNode) || value instanceof (0, _xmlBuilder.XmlText))) throw new Error("Unable to serialize unknown union members in XML.");
            bodyNode.addChildNode(new (0, _xmlBuilder.XmlNode)(name).addChildNode(value));
        }
    });
    return bodyNode;
};
const se_NoncurrentVersionExpiration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("NoncurrentVersionExpiration");
    if (input.NoncurrentDays != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
    }
    if (input.NewerNoncurrentVersions != null) {
        const node = (0, _xmlBuilder.XmlNode).of("VersionCount", String(input.NewerNoncurrentVersions)).withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_NoncurrentVersionTransition = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("NoncurrentVersionTransition");
    if (input.NoncurrentDays != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
        const node = (0, _xmlBuilder.XmlNode).of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    if (input.NewerNoncurrentVersions != null) {
        const node = (0, _xmlBuilder.XmlNode).of("VersionCount", String(input.NewerNoncurrentVersions)).withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_NoncurrentVersionTransitionList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_NoncurrentVersionTransition(entry, context);
        return node.withName("member");
    });
};
const se_NotificationConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("NotificationConfiguration");
    if (input.TopicConfigurations != null) {
        const nodes = se_TopicConfigurationList(input.TopicConfigurations, context);
        nodes.map((node)=>{
            node = node.withName("TopicConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.QueueConfigurations != null) {
        const nodes = se_QueueConfigurationList(input.QueueConfigurations, context);
        nodes.map((node)=>{
            node = node.withName("QueueConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.LambdaFunctionConfigurations != null) {
        const nodes = se_LambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);
        nodes.map((node)=>{
            node = node.withName("CloudFunctionConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.EventBridgeConfiguration != null) {
        const node = se_EventBridgeConfiguration(input.EventBridgeConfiguration, context).withName("EventBridgeConfiguration");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_NotificationConfigurationFilter = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("NotificationConfigurationFilter");
    if (input.Key != null) {
        const node = se_S3KeyFilter(input.Key, context).withName("S3Key");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ObjectIdentifier = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ObjectIdentifier");
    if (input.Key != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.VersionId != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectVersionId", input.VersionId).withName("VersionId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ObjectIdentifierList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_ObjectIdentifier(entry, context);
        return node.withName("member");
    });
};
const se_ObjectLockConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ObjectLockConfiguration");
    if (input.ObjectLockEnabled != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectLockEnabled", input.ObjectLockEnabled).withName("ObjectLockEnabled");
        bodyNode.addChildNode(node);
    }
    if (input.Rule != null) {
        const node = se_ObjectLockRule(input.Rule, context).withName("Rule");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ObjectLockLegalHold = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ObjectLockLegalHold");
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectLockLegalHoldStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ObjectLockRetention = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ObjectLockRetention");
    if (input.Mode != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
    }
    if (input.RetainUntilDate != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Date", (input.RetainUntilDate.toISOString().split(".")[0] + "Z").toString()).withName("RetainUntilDate");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ObjectLockRule = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ObjectLockRule");
    if (input.DefaultRetention != null) {
        const node = se_DefaultRetention(input.DefaultRetention, context).withName("DefaultRetention");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_OutputLocation = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("OutputLocation");
    if (input.S3 != null) {
        const node = se_S3Location(input.S3, context).withName("S3");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_OutputSerialization = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("OutputSerialization");
    if (input.CSV != null) {
        const node = se_CSVOutput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
    }
    if (input.JSON != null) {
        const node = se_JSONOutput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Owner = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Owner");
    if (input.DisplayName != null) {
        const node = (0, _xmlBuilder.XmlNode).of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_OwnershipControls = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("OwnershipControls");
    if (input.Rules != null) {
        const nodes = se_OwnershipControlsRules(input.Rules, context);
        nodes.map((node)=>{
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_OwnershipControlsRule = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("OwnershipControlsRule");
    if (input.ObjectOwnership != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectOwnership", input.ObjectOwnership).withName("ObjectOwnership");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_OwnershipControlsRules = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_OwnershipControlsRule(entry, context);
        return node.withName("member");
    });
};
const se_ParquetInput = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ParquetInput");
    return bodyNode;
};
const se_PublicAccessBlockConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("PublicAccessBlockConfiguration");
    if (input.BlockPublicAcls != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Setting", String(input.BlockPublicAcls)).withName("BlockPublicAcls");
        bodyNode.addChildNode(node);
    }
    if (input.IgnorePublicAcls != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Setting", String(input.IgnorePublicAcls)).withName("IgnorePublicAcls");
        bodyNode.addChildNode(node);
    }
    if (input.BlockPublicPolicy != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Setting", String(input.BlockPublicPolicy)).withName("BlockPublicPolicy");
        bodyNode.addChildNode(node);
    }
    if (input.RestrictPublicBuckets != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Setting", String(input.RestrictPublicBuckets)).withName("RestrictPublicBuckets");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_QueueConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("QueueConfiguration");
    if (input.Id != null) {
        const node = (0, _xmlBuilder.XmlNode).of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.QueueArn != null) {
        const node = (0, _xmlBuilder.XmlNode).of("QueueArn", input.QueueArn).withName("Queue");
        bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
        const nodes = se_EventList(input.Events, context);
        nodes.map((node)=>{
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter != null) {
        const node = se_NotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_QueueConfigurationList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_QueueConfiguration(entry, context);
        return node.withName("member");
    });
};
const se_Redirect = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Redirect");
    if (input.HostName != null) {
        const node = (0, _xmlBuilder.XmlNode).of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
    }
    if (input.HttpRedirectCode != null) {
        const node = (0, _xmlBuilder.XmlNode).of("HttpRedirectCode", input.HttpRedirectCode).withName("HttpRedirectCode");
        bodyNode.addChildNode(node);
    }
    if (input.Protocol != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyPrefixWith != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ReplaceKeyPrefixWith", input.ReplaceKeyPrefixWith).withName("ReplaceKeyPrefixWith");
        bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyWith != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ReplaceKeyWith", input.ReplaceKeyWith).withName("ReplaceKeyWith");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_RedirectAllRequestsTo = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("RedirectAllRequestsTo");
    if (input.HostName != null) {
        const node = (0, _xmlBuilder.XmlNode).of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
    }
    if (input.Protocol != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ReplicaModifications = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicaModifications");
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ReplicaModificationsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ReplicationConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationConfiguration");
    if (input.Role != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Role", input.Role).withName("Role");
        bodyNode.addChildNode(node);
    }
    if (input.Rules != null) {
        const nodes = se_ReplicationRules(input.Rules, context);
        nodes.map((node)=>{
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_ReplicationRule = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationRule");
    if (input.ID != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.Priority != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Priority", String(input.Priority)).withName("Priority");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
        const node = se_ReplicationRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ReplicationRuleStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.SourceSelectionCriteria != null) {
        const node = se_SourceSelectionCriteria(input.SourceSelectionCriteria, context).withName("SourceSelectionCriteria");
        bodyNode.addChildNode(node);
    }
    if (input.ExistingObjectReplication != null) {
        const node = se_ExistingObjectReplication(input.ExistingObjectReplication, context).withName("ExistingObjectReplication");
        bodyNode.addChildNode(node);
    }
    if (input.Destination != null) {
        const node = se_Destination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
    }
    if (input.DeleteMarkerReplication != null) {
        const node = se_DeleteMarkerReplication(input.DeleteMarkerReplication, context).withName("DeleteMarkerReplication");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ReplicationRuleAndOperator = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationRuleAndOperator");
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node)=>{
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_ReplicationRuleFilter = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationRuleFilter");
    (0, _models0.ReplicationRuleFilter).visit(input, {
        Prefix: (value)=>{
            const node = (0, _xmlBuilder.XmlNode).of("Prefix", value).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: (value)=>{
            const node = se_Tag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        And: (value)=>{
            const node = se_ReplicationRuleAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: (name, value)=>{
            if (!(value instanceof (0, _xmlBuilder.XmlNode) || value instanceof (0, _xmlBuilder.XmlText))) throw new Error("Unable to serialize unknown union members in XML.");
            bodyNode.addChildNode(new (0, _xmlBuilder.XmlNode)(name).addChildNode(value));
        }
    });
    return bodyNode;
};
const se_ReplicationRules = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_ReplicationRule(entry, context);
        return node.withName("member");
    });
};
const se_ReplicationTime = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationTime");
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ReplicationTimeStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Time != null) {
        const node = se_ReplicationTimeValue(input.Time, context).withName("Time");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ReplicationTimeValue = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationTimeValue");
    if (input.Minutes != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Minutes", String(input.Minutes)).withName("Minutes");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_RequestPaymentConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("RequestPaymentConfiguration");
    if (input.Payer != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Payer", input.Payer).withName("Payer");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_RequestProgress = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("RequestProgress");
    if (input.Enabled != null) {
        const node = (0, _xmlBuilder.XmlNode).of("EnableRequestProgress", String(input.Enabled)).withName("Enabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_RestoreRequest = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("RestoreRequest");
    if (input.Days != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.GlacierJobParameters != null) {
        const node = se_GlacierJobParameters(input.GlacierJobParameters, context).withName("GlacierJobParameters");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        const node = (0, _xmlBuilder.XmlNode).of("RestoreRequestType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    if (input.Tier != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
    }
    if (input.Description != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Description", input.Description).withName("Description");
        bodyNode.addChildNode(node);
    }
    if (input.SelectParameters != null) {
        const node = se_SelectParameters(input.SelectParameters, context).withName("SelectParameters");
        bodyNode.addChildNode(node);
    }
    if (input.OutputLocation != null) {
        const node = se_OutputLocation(input.OutputLocation, context).withName("OutputLocation");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_RoutingRule = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("RoutingRule");
    if (input.Condition != null) {
        const node = se_Condition(input.Condition, context).withName("Condition");
        bodyNode.addChildNode(node);
    }
    if (input.Redirect != null) {
        const node = se_Redirect(input.Redirect, context).withName("Redirect");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_RoutingRules = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_RoutingRule(entry, context);
        return node.withName("RoutingRule");
    });
};
const se_S3KeyFilter = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("S3KeyFilter");
    if (input.FilterRules != null) {
        const nodes = se_FilterRuleList(input.FilterRules, context);
        nodes.map((node)=>{
            node = node.withName("FilterRule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_S3Location = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("S3Location");
    if (input.BucketName != null) {
        const node = (0, _xmlBuilder.XmlNode).of("BucketName", input.BucketName).withName("BucketName");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
        const node = (0, _xmlBuilder.XmlNode).of("LocationPrefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Encryption != null) {
        const node = se_Encryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
    }
    if (input.CannedACL != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectCannedACL", input.CannedACL).withName("CannedACL");
        bodyNode.addChildNode(node);
    }
    if (input.AccessControlList != null) {
        const nodes = se_Grants(input.AccessControlList, context);
        const containerNode = new (0, _xmlBuilder.XmlNode)("AccessControlList");
        nodes.map((node)=>{
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.Tagging != null) {
        const node = se_Tagging(input.Tagging, context).withName("Tagging");
        bodyNode.addChildNode(node);
    }
    if (input.UserMetadata != null) {
        const nodes = se_UserMetadata(input.UserMetadata, context);
        const containerNode = new (0, _xmlBuilder.XmlNode)("UserMetadata");
        nodes.map((node)=>{
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.StorageClass != null) {
        const node = (0, _xmlBuilder.XmlNode).of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ScanRange = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ScanRange");
    if (input.Start != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Start", String(input.Start)).withName("Start");
        bodyNode.addChildNode(node);
    }
    if (input.End != null) {
        const node = (0, _xmlBuilder.XmlNode).of("End", String(input.End)).withName("End");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_SelectParameters = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("SelectParameters");
    if (input.InputSerialization != null) {
        const node = se_InputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
    }
    if (input.ExpressionType != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
    }
    if (input.Expression != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
    }
    if (input.OutputSerialization != null) {
        const node = se_OutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ServerSideEncryptionByDefault = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ServerSideEncryptionByDefault");
    if (input.SSEAlgorithm != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ServerSideEncryption", input.SSEAlgorithm).withName("SSEAlgorithm");
        bodyNode.addChildNode(node);
    }
    if (input.KMSMasterKeyID != null) {
        const node = (0, _xmlBuilder.XmlNode).of("SSEKMSKeyId", input.KMSMasterKeyID).withName("KMSMasterKeyID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ServerSideEncryptionConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ServerSideEncryptionConfiguration");
    if (input.Rules != null) {
        const nodes = se_ServerSideEncryptionRules(input.Rules, context);
        nodes.map((node)=>{
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
const se_ServerSideEncryptionRule = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("ServerSideEncryptionRule");
    if (input.ApplyServerSideEncryptionByDefault != null) {
        const node = se_ServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName("ApplyServerSideEncryptionByDefault");
        bodyNode.addChildNode(node);
    }
    if (input.BucketKeyEnabled != null) {
        const node = (0, _xmlBuilder.XmlNode).of("BucketKeyEnabled", String(input.BucketKeyEnabled)).withName("BucketKeyEnabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ServerSideEncryptionRules = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_ServerSideEncryptionRule(entry, context);
        return node.withName("member");
    });
};
const se_SourceSelectionCriteria = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("SourceSelectionCriteria");
    if (input.SseKmsEncryptedObjects != null) {
        const node = se_SseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName("SseKmsEncryptedObjects");
        bodyNode.addChildNode(node);
    }
    if (input.ReplicaModifications != null) {
        const node = se_ReplicaModifications(input.ReplicaModifications, context).withName("ReplicaModifications");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_SSEKMS = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("SSE-KMS");
    if (input.KeyId != null) {
        const node = (0, _xmlBuilder.XmlNode).of("SSEKMSKeyId", input.KeyId).withName("KeyId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_SseKmsEncryptedObjects = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("SseKmsEncryptedObjects");
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("SseKmsEncryptedObjectsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_SSES3 = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("SSE-S3");
    return bodyNode;
};
const se_StorageClassAnalysis = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("StorageClassAnalysis");
    if (input.DataExport != null) {
        const node = se_StorageClassAnalysisDataExport(input.DataExport, context).withName("DataExport");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_StorageClassAnalysisDataExport = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("StorageClassAnalysisDataExport");
    if (input.OutputSchemaVersion != null) {
        const node = (0, _xmlBuilder.XmlNode).of("StorageClassAnalysisSchemaVersion", input.OutputSchemaVersion).withName("OutputSchemaVersion");
        bodyNode.addChildNode(node);
    }
    if (input.Destination != null) {
        const node = se_AnalyticsExportDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Tag = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Tag");
    if (input.Key != null) {
        const node = (0, _xmlBuilder.XmlNode).of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Value", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Tagging = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Tagging");
    if (input.TagSet != null) {
        const nodes = se_TagSet(input.TagSet, context);
        const containerNode = new (0, _xmlBuilder.XmlNode)("TagSet");
        nodes.map((node)=>{
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
};
const se_TagSet = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_Tag(entry, context);
        return node.withName("Tag");
    });
};
const se_TargetGrant = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("TargetGrant");
    if (input.Grantee != null) {
        const node = se_Grantee(input.Grantee, context).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
    }
    if (input.Permission != null) {
        const node = (0, _xmlBuilder.XmlNode).of("BucketLogsPermission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_TargetGrants = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_TargetGrant(entry, context);
        return node.withName("Grant");
    });
};
const se_Tiering = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Tiering");
    if (input.Days != null) {
        const node = (0, _xmlBuilder.XmlNode).of("IntelligentTieringDays", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.AccessTier != null) {
        const node = (0, _xmlBuilder.XmlNode).of("IntelligentTieringAccessTier", input.AccessTier).withName("AccessTier");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_TieringList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_Tiering(entry, context);
        return node.withName("member");
    });
};
const se_TopicConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("TopicConfiguration");
    if (input.Id != null) {
        const node = (0, _xmlBuilder.XmlNode).of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.TopicArn != null) {
        const node = (0, _xmlBuilder.XmlNode).of("TopicArn", input.TopicArn).withName("Topic");
        bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
        const nodes = se_EventList(input.Events, context);
        nodes.map((node)=>{
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter != null) {
        const node = se_NotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_TopicConfigurationList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_TopicConfiguration(entry, context);
        return node.withName("member");
    });
};
const se_Transition = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("Transition");
    if (input.Date != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Date", (input.Date.toISOString().split(".")[0] + "Z").toString()).withName("Date");
        bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
        const node = (0, _xmlBuilder.XmlNode).of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
        const node = (0, _xmlBuilder.XmlNode).of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_TransitionList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_Transition(entry, context);
        return node.withName("member");
    });
};
const se_UserMetadata = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        const node = se_MetadataEntry(entry, context);
        return node.withName("MetadataEntry");
    });
};
const se_VersioningConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("VersioningConfiguration");
    if (input.MFADelete != null) {
        const node = (0, _xmlBuilder.XmlNode).of("MFADelete", input.MFADelete).withName("MfaDelete");
        bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
        const node = (0, _xmlBuilder.XmlNode).of("BucketVersioningStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_WebsiteConfiguration = (input, context)=>{
    const bodyNode = new (0, _xmlBuilder.XmlNode)("WebsiteConfiguration");
    if (input.ErrorDocument != null) {
        const node = se_ErrorDocument(input.ErrorDocument, context).withName("ErrorDocument");
        bodyNode.addChildNode(node);
    }
    if (input.IndexDocument != null) {
        const node = se_IndexDocument(input.IndexDocument, context).withName("IndexDocument");
        bodyNode.addChildNode(node);
    }
    if (input.RedirectAllRequestsTo != null) {
        const node = se_RedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName("RedirectAllRequestsTo");
        bodyNode.addChildNode(node);
    }
    if (input.RoutingRules != null) {
        const nodes = se_RoutingRules(input.RoutingRules, context);
        const containerNode = new (0, _xmlBuilder.XmlNode)("RoutingRules");
        nodes.map((node)=>{
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
};
const de_AbortIncompleteMultipartUpload = (output, context)=>{
    const contents = {};
    if (output["DaysAfterInitiation"] !== undefined) contents.DaysAfterInitiation = (0, _smithyClient.strictParseInt32)(output["DaysAfterInitiation"]);
    return contents;
};
const de_AccessControlTranslation = (output, context)=>{
    const contents = {};
    if (output["Owner"] !== undefined) contents.Owner = (0, _smithyClient.expectString)(output["Owner"]);
    return contents;
};
const de_AllowedHeaders = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithyClient.expectString)(entry);
    });
};
const de_AllowedMethods = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithyClient.expectString)(entry);
    });
};
const de_AllowedOrigins = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithyClient.expectString)(entry);
    });
};
const de_AnalyticsAndOperator = (output, context)=>{
    const contents = {};
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    if (output.Tag === "") contents.Tags = [];
    else if (output["Tag"] !== undefined) contents.Tags = de_TagSet((0, _smithyClient.getArrayIfSingleItem)(output["Tag"]), context);
    return contents;
};
const de_AnalyticsConfiguration = (output, context)=>{
    const contents = {};
    if (output["Id"] !== undefined) contents.Id = (0, _smithyClient.expectString)(output["Id"]);
    if (output.Filter === "") ;
    else if (output["Filter"] !== undefined) contents.Filter = de_AnalyticsFilter((0, _smithyClient.expectUnion)(output["Filter"]), context);
    if (output["StorageClassAnalysis"] !== undefined) contents.StorageClassAnalysis = de_StorageClassAnalysis(output["StorageClassAnalysis"], context);
    return contents;
};
const de_AnalyticsConfigurationList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_AnalyticsConfiguration(entry, context);
    });
};
const de_AnalyticsExportDestination = (output, context)=>{
    const contents = {};
    if (output["S3BucketDestination"] !== undefined) contents.S3BucketDestination = de_AnalyticsS3BucketDestination(output["S3BucketDestination"], context);
    return contents;
};
const de_AnalyticsFilter = (output, context)=>{
    if (output["Prefix"] !== undefined) return {
        Prefix: (0, _smithyClient.expectString)(output["Prefix"])
    };
    if (output["Tag"] !== undefined) return {
        Tag: de_Tag(output["Tag"], context)
    };
    if (output["And"] !== undefined) return {
        And: de_AnalyticsAndOperator(output["And"], context)
    };
    return {
        $unknown: Object.entries(output)[0]
    };
};
const de_AnalyticsS3BucketDestination = (output, context)=>{
    const contents = {};
    if (output["Format"] !== undefined) contents.Format = (0, _smithyClient.expectString)(output["Format"]);
    if (output["BucketAccountId"] !== undefined) contents.BucketAccountId = (0, _smithyClient.expectString)(output["BucketAccountId"]);
    if (output["Bucket"] !== undefined) contents.Bucket = (0, _smithyClient.expectString)(output["Bucket"]);
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    return contents;
};
const de_Bucket = (output, context)=>{
    const contents = {};
    if (output["Name"] !== undefined) contents.Name = (0, _smithyClient.expectString)(output["Name"]);
    if (output["CreationDate"] !== undefined) contents.CreationDate = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["CreationDate"]));
    return contents;
};
const de_Buckets = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Bucket(entry, context);
    });
};
const de_Checksum = (output, context)=>{
    const contents = {};
    if (output["ChecksumCRC32"] !== undefined) contents.ChecksumCRC32 = (0, _smithyClient.expectString)(output["ChecksumCRC32"]);
    if (output["ChecksumCRC32C"] !== undefined) contents.ChecksumCRC32C = (0, _smithyClient.expectString)(output["ChecksumCRC32C"]);
    if (output["ChecksumSHA1"] !== undefined) contents.ChecksumSHA1 = (0, _smithyClient.expectString)(output["ChecksumSHA1"]);
    if (output["ChecksumSHA256"] !== undefined) contents.ChecksumSHA256 = (0, _smithyClient.expectString)(output["ChecksumSHA256"]);
    return contents;
};
const de_ChecksumAlgorithmList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithyClient.expectString)(entry);
    });
};
const de_CommonPrefix = (output, context)=>{
    const contents = {};
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    return contents;
};
const de_CommonPrefixList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_CommonPrefix(entry, context);
    });
};
const de_Condition = (output, context)=>{
    const contents = {};
    if (output["HttpErrorCodeReturnedEquals"] !== undefined) contents.HttpErrorCodeReturnedEquals = (0, _smithyClient.expectString)(output["HttpErrorCodeReturnedEquals"]);
    if (output["KeyPrefixEquals"] !== undefined) contents.KeyPrefixEquals = (0, _smithyClient.expectString)(output["KeyPrefixEquals"]);
    return contents;
};
const de_ContinuationEvent = (output, context)=>{
    const contents = {};
    return contents;
};
const de_CopyObjectResult = (output, context)=>{
    const contents = {};
    if (output["ETag"] !== undefined) contents.ETag = (0, _smithyClient.expectString)(output["ETag"]);
    if (output["LastModified"] !== undefined) contents.LastModified = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
    if (output["ChecksumCRC32"] !== undefined) contents.ChecksumCRC32 = (0, _smithyClient.expectString)(output["ChecksumCRC32"]);
    if (output["ChecksumCRC32C"] !== undefined) contents.ChecksumCRC32C = (0, _smithyClient.expectString)(output["ChecksumCRC32C"]);
    if (output["ChecksumSHA1"] !== undefined) contents.ChecksumSHA1 = (0, _smithyClient.expectString)(output["ChecksumSHA1"]);
    if (output["ChecksumSHA256"] !== undefined) contents.ChecksumSHA256 = (0, _smithyClient.expectString)(output["ChecksumSHA256"]);
    return contents;
};
const de_CopyPartResult = (output, context)=>{
    const contents = {};
    if (output["ETag"] !== undefined) contents.ETag = (0, _smithyClient.expectString)(output["ETag"]);
    if (output["LastModified"] !== undefined) contents.LastModified = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
    if (output["ChecksumCRC32"] !== undefined) contents.ChecksumCRC32 = (0, _smithyClient.expectString)(output["ChecksumCRC32"]);
    if (output["ChecksumCRC32C"] !== undefined) contents.ChecksumCRC32C = (0, _smithyClient.expectString)(output["ChecksumCRC32C"]);
    if (output["ChecksumSHA1"] !== undefined) contents.ChecksumSHA1 = (0, _smithyClient.expectString)(output["ChecksumSHA1"]);
    if (output["ChecksumSHA256"] !== undefined) contents.ChecksumSHA256 = (0, _smithyClient.expectString)(output["ChecksumSHA256"]);
    return contents;
};
const de_CORSRule = (output, context)=>{
    const contents = {};
    if (output["ID"] !== undefined) contents.ID = (0, _smithyClient.expectString)(output["ID"]);
    if (output.AllowedHeader === "") contents.AllowedHeaders = [];
    else if (output["AllowedHeader"] !== undefined) contents.AllowedHeaders = de_AllowedHeaders((0, _smithyClient.getArrayIfSingleItem)(output["AllowedHeader"]), context);
    if (output.AllowedMethod === "") contents.AllowedMethods = [];
    else if (output["AllowedMethod"] !== undefined) contents.AllowedMethods = de_AllowedMethods((0, _smithyClient.getArrayIfSingleItem)(output["AllowedMethod"]), context);
    if (output.AllowedOrigin === "") contents.AllowedOrigins = [];
    else if (output["AllowedOrigin"] !== undefined) contents.AllowedOrigins = de_AllowedOrigins((0, _smithyClient.getArrayIfSingleItem)(output["AllowedOrigin"]), context);
    if (output.ExposeHeader === "") contents.ExposeHeaders = [];
    else if (output["ExposeHeader"] !== undefined) contents.ExposeHeaders = de_ExposeHeaders((0, _smithyClient.getArrayIfSingleItem)(output["ExposeHeader"]), context);
    if (output["MaxAgeSeconds"] !== undefined) contents.MaxAgeSeconds = (0, _smithyClient.strictParseInt32)(output["MaxAgeSeconds"]);
    return contents;
};
const de_CORSRules = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_CORSRule(entry, context);
    });
};
const de_DefaultRetention = (output, context)=>{
    const contents = {};
    if (output["Mode"] !== undefined) contents.Mode = (0, _smithyClient.expectString)(output["Mode"]);
    if (output["Days"] !== undefined) contents.Days = (0, _smithyClient.strictParseInt32)(output["Days"]);
    if (output["Years"] !== undefined) contents.Years = (0, _smithyClient.strictParseInt32)(output["Years"]);
    return contents;
};
const de_DeletedObject = (output, context)=>{
    const contents = {};
    if (output["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(output["Key"]);
    if (output["VersionId"] !== undefined) contents.VersionId = (0, _smithyClient.expectString)(output["VersionId"]);
    if (output["DeleteMarker"] !== undefined) contents.DeleteMarker = (0, _smithyClient.parseBoolean)(output["DeleteMarker"]);
    if (output["DeleteMarkerVersionId"] !== undefined) contents.DeleteMarkerVersionId = (0, _smithyClient.expectString)(output["DeleteMarkerVersionId"]);
    return contents;
};
const de_DeletedObjects = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_DeletedObject(entry, context);
    });
};
const de_DeleteMarkerEntry = (output, context)=>{
    const contents = {};
    if (output["Owner"] !== undefined) contents.Owner = de_Owner(output["Owner"], context);
    if (output["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(output["Key"]);
    if (output["VersionId"] !== undefined) contents.VersionId = (0, _smithyClient.expectString)(output["VersionId"]);
    if (output["IsLatest"] !== undefined) contents.IsLatest = (0, _smithyClient.parseBoolean)(output["IsLatest"]);
    if (output["LastModified"] !== undefined) contents.LastModified = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
    return contents;
};
const de_DeleteMarkerReplication = (output, context)=>{
    const contents = {};
    if (output["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(output["Status"]);
    return contents;
};
const de_DeleteMarkers = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_DeleteMarkerEntry(entry, context);
    });
};
const de_Destination = (output, context)=>{
    const contents = {};
    if (output["Bucket"] !== undefined) contents.Bucket = (0, _smithyClient.expectString)(output["Bucket"]);
    if (output["Account"] !== undefined) contents.Account = (0, _smithyClient.expectString)(output["Account"]);
    if (output["StorageClass"] !== undefined) contents.StorageClass = (0, _smithyClient.expectString)(output["StorageClass"]);
    if (output["AccessControlTranslation"] !== undefined) contents.AccessControlTranslation = de_AccessControlTranslation(output["AccessControlTranslation"], context);
    if (output["EncryptionConfiguration"] !== undefined) contents.EncryptionConfiguration = de_EncryptionConfiguration(output["EncryptionConfiguration"], context);
    if (output["ReplicationTime"] !== undefined) contents.ReplicationTime = de_ReplicationTime(output["ReplicationTime"], context);
    if (output["Metrics"] !== undefined) contents.Metrics = de_Metrics(output["Metrics"], context);
    return contents;
};
const de_EncryptionConfiguration = (output, context)=>{
    const contents = {};
    if (output["ReplicaKmsKeyID"] !== undefined) contents.ReplicaKmsKeyID = (0, _smithyClient.expectString)(output["ReplicaKmsKeyID"]);
    return contents;
};
const de_EndEvent = (output, context)=>{
    const contents = {};
    return contents;
};
const de__Error = (output, context)=>{
    const contents = {};
    if (output["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(output["Key"]);
    if (output["VersionId"] !== undefined) contents.VersionId = (0, _smithyClient.expectString)(output["VersionId"]);
    if (output["Code"] !== undefined) contents.Code = (0, _smithyClient.expectString)(output["Code"]);
    if (output["Message"] !== undefined) contents.Message = (0, _smithyClient.expectString)(output["Message"]);
    return contents;
};
const de_ErrorDocument = (output, context)=>{
    const contents = {};
    if (output["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(output["Key"]);
    return contents;
};
const de_Errors = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de__Error(entry, context);
    });
};
const de_EventBridgeConfiguration = (output, context)=>{
    const contents = {};
    return contents;
};
const de_EventList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithyClient.expectString)(entry);
    });
};
const de_ExistingObjectReplication = (output, context)=>{
    const contents = {};
    if (output["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(output["Status"]);
    return contents;
};
const de_ExposeHeaders = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithyClient.expectString)(entry);
    });
};
const de_FilterRule = (output, context)=>{
    const contents = {};
    if (output["Name"] !== undefined) contents.Name = (0, _smithyClient.expectString)(output["Name"]);
    if (output["Value"] !== undefined) contents.Value = (0, _smithyClient.expectString)(output["Value"]);
    return contents;
};
const de_FilterRuleList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_FilterRule(entry, context);
    });
};
const de_GetObjectAttributesParts = (output, context)=>{
    const contents = {};
    if (output["PartsCount"] !== undefined) contents.TotalPartsCount = (0, _smithyClient.strictParseInt32)(output["PartsCount"]);
    if (output["PartNumberMarker"] !== undefined) contents.PartNumberMarker = (0, _smithyClient.expectString)(output["PartNumberMarker"]);
    if (output["NextPartNumberMarker"] !== undefined) contents.NextPartNumberMarker = (0, _smithyClient.expectString)(output["NextPartNumberMarker"]);
    if (output["MaxParts"] !== undefined) contents.MaxParts = (0, _smithyClient.strictParseInt32)(output["MaxParts"]);
    if (output["IsTruncated"] !== undefined) contents.IsTruncated = (0, _smithyClient.parseBoolean)(output["IsTruncated"]);
    if (output.Part === "") contents.Parts = [];
    else if (output["Part"] !== undefined) contents.Parts = de_PartsList((0, _smithyClient.getArrayIfSingleItem)(output["Part"]), context);
    return contents;
};
const de_Grant = (output, context)=>{
    const contents = {};
    if (output["Grantee"] !== undefined) contents.Grantee = de_Grantee(output["Grantee"], context);
    if (output["Permission"] !== undefined) contents.Permission = (0, _smithyClient.expectString)(output["Permission"]);
    return contents;
};
const de_Grantee = (output, context)=>{
    const contents = {};
    if (output["DisplayName"] !== undefined) contents.DisplayName = (0, _smithyClient.expectString)(output["DisplayName"]);
    if (output["EmailAddress"] !== undefined) contents.EmailAddress = (0, _smithyClient.expectString)(output["EmailAddress"]);
    if (output["ID"] !== undefined) contents.ID = (0, _smithyClient.expectString)(output["ID"]);
    if (output["URI"] !== undefined) contents.URI = (0, _smithyClient.expectString)(output["URI"]);
    if (output["xsi:type"] !== undefined) contents.Type = (0, _smithyClient.expectString)(output["xsi:type"]);
    return contents;
};
const de_Grants = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Grant(entry, context);
    });
};
const de_IndexDocument = (output, context)=>{
    const contents = {};
    if (output["Suffix"] !== undefined) contents.Suffix = (0, _smithyClient.expectString)(output["Suffix"]);
    return contents;
};
const de_Initiator = (output, context)=>{
    const contents = {};
    if (output["ID"] !== undefined) contents.ID = (0, _smithyClient.expectString)(output["ID"]);
    if (output["DisplayName"] !== undefined) contents.DisplayName = (0, _smithyClient.expectString)(output["DisplayName"]);
    return contents;
};
const de_IntelligentTieringAndOperator = (output, context)=>{
    const contents = {};
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    if (output.Tag === "") contents.Tags = [];
    else if (output["Tag"] !== undefined) contents.Tags = de_TagSet((0, _smithyClient.getArrayIfSingleItem)(output["Tag"]), context);
    return contents;
};
const de_IntelligentTieringConfiguration = (output, context)=>{
    const contents = {};
    if (output["Id"] !== undefined) contents.Id = (0, _smithyClient.expectString)(output["Id"]);
    if (output["Filter"] !== undefined) contents.Filter = de_IntelligentTieringFilter(output["Filter"], context);
    if (output["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(output["Status"]);
    if (output.Tiering === "") contents.Tierings = [];
    else if (output["Tiering"] !== undefined) contents.Tierings = de_TieringList((0, _smithyClient.getArrayIfSingleItem)(output["Tiering"]), context);
    return contents;
};
const de_IntelligentTieringConfigurationList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_IntelligentTieringConfiguration(entry, context);
    });
};
const de_IntelligentTieringFilter = (output, context)=>{
    const contents = {};
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    if (output["Tag"] !== undefined) contents.Tag = de_Tag(output["Tag"], context);
    if (output["And"] !== undefined) contents.And = de_IntelligentTieringAndOperator(output["And"], context);
    return contents;
};
const de_InventoryConfiguration = (output, context)=>{
    const contents = {};
    if (output["Destination"] !== undefined) contents.Destination = de_InventoryDestination(output["Destination"], context);
    if (output["IsEnabled"] !== undefined) contents.IsEnabled = (0, _smithyClient.parseBoolean)(output["IsEnabled"]);
    if (output["Filter"] !== undefined) contents.Filter = de_InventoryFilter(output["Filter"], context);
    if (output["Id"] !== undefined) contents.Id = (0, _smithyClient.expectString)(output["Id"]);
    if (output["IncludedObjectVersions"] !== undefined) contents.IncludedObjectVersions = (0, _smithyClient.expectString)(output["IncludedObjectVersions"]);
    if (output.OptionalFields === "") contents.OptionalFields = [];
    else if (output["OptionalFields"] !== undefined && output["OptionalFields"]["Field"] !== undefined) contents.OptionalFields = de_InventoryOptionalFields((0, _smithyClient.getArrayIfSingleItem)(output["OptionalFields"]["Field"]), context);
    if (output["Schedule"] !== undefined) contents.Schedule = de_InventorySchedule(output["Schedule"], context);
    return contents;
};
const de_InventoryConfigurationList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_InventoryConfiguration(entry, context);
    });
};
const de_InventoryDestination = (output, context)=>{
    const contents = {};
    if (output["S3BucketDestination"] !== undefined) contents.S3BucketDestination = de_InventoryS3BucketDestination(output["S3BucketDestination"], context);
    return contents;
};
const de_InventoryEncryption = (output, context)=>{
    const contents = {};
    if (output["SSE-S3"] !== undefined) contents.SSES3 = de_SSES3(output["SSE-S3"], context);
    if (output["SSE-KMS"] !== undefined) contents.SSEKMS = de_SSEKMS(output["SSE-KMS"], context);
    return contents;
};
const de_InventoryFilter = (output, context)=>{
    const contents = {};
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    return contents;
};
const de_InventoryOptionalFields = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return (0, _smithyClient.expectString)(entry);
    });
};
const de_InventoryS3BucketDestination = (output, context)=>{
    const contents = {};
    if (output["AccountId"] !== undefined) contents.AccountId = (0, _smithyClient.expectString)(output["AccountId"]);
    if (output["Bucket"] !== undefined) contents.Bucket = (0, _smithyClient.expectString)(output["Bucket"]);
    if (output["Format"] !== undefined) contents.Format = (0, _smithyClient.expectString)(output["Format"]);
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    if (output["Encryption"] !== undefined) contents.Encryption = de_InventoryEncryption(output["Encryption"], context);
    return contents;
};
const de_InventorySchedule = (output, context)=>{
    const contents = {};
    if (output["Frequency"] !== undefined) contents.Frequency = (0, _smithyClient.expectString)(output["Frequency"]);
    return contents;
};
const de_LambdaFunctionConfiguration = (output, context)=>{
    const contents = {};
    if (output["Id"] !== undefined) contents.Id = (0, _smithyClient.expectString)(output["Id"]);
    if (output["CloudFunction"] !== undefined) contents.LambdaFunctionArn = (0, _smithyClient.expectString)(output["CloudFunction"]);
    if (output.Event === "") contents.Events = [];
    else if (output["Event"] !== undefined) contents.Events = de_EventList((0, _smithyClient.getArrayIfSingleItem)(output["Event"]), context);
    if (output["Filter"] !== undefined) contents.Filter = de_NotificationConfigurationFilter(output["Filter"], context);
    return contents;
};
const de_LambdaFunctionConfigurationList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_LambdaFunctionConfiguration(entry, context);
    });
};
const de_LifecycleExpiration = (output, context)=>{
    const contents = {};
    if (output["Date"] !== undefined) contents.Date = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["Date"]));
    if (output["Days"] !== undefined) contents.Days = (0, _smithyClient.strictParseInt32)(output["Days"]);
    if (output["ExpiredObjectDeleteMarker"] !== undefined) contents.ExpiredObjectDeleteMarker = (0, _smithyClient.parseBoolean)(output["ExpiredObjectDeleteMarker"]);
    return contents;
};
const de_LifecycleRule = (output, context)=>{
    const contents = {};
    if (output["Expiration"] !== undefined) contents.Expiration = de_LifecycleExpiration(output["Expiration"], context);
    if (output["ID"] !== undefined) contents.ID = (0, _smithyClient.expectString)(output["ID"]);
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    if (output.Filter === "") ;
    else if (output["Filter"] !== undefined) contents.Filter = de_LifecycleRuleFilter((0, _smithyClient.expectUnion)(output["Filter"]), context);
    if (output["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(output["Status"]);
    if (output.Transition === "") contents.Transitions = [];
    else if (output["Transition"] !== undefined) contents.Transitions = de_TransitionList((0, _smithyClient.getArrayIfSingleItem)(output["Transition"]), context);
    if (output.NoncurrentVersionTransition === "") contents.NoncurrentVersionTransitions = [];
    else if (output["NoncurrentVersionTransition"] !== undefined) contents.NoncurrentVersionTransitions = de_NoncurrentVersionTransitionList((0, _smithyClient.getArrayIfSingleItem)(output["NoncurrentVersionTransition"]), context);
    if (output["NoncurrentVersionExpiration"] !== undefined) contents.NoncurrentVersionExpiration = de_NoncurrentVersionExpiration(output["NoncurrentVersionExpiration"], context);
    if (output["AbortIncompleteMultipartUpload"] !== undefined) contents.AbortIncompleteMultipartUpload = de_AbortIncompleteMultipartUpload(output["AbortIncompleteMultipartUpload"], context);
    return contents;
};
const de_LifecycleRuleAndOperator = (output, context)=>{
    const contents = {};
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    if (output.Tag === "") contents.Tags = [];
    else if (output["Tag"] !== undefined) contents.Tags = de_TagSet((0, _smithyClient.getArrayIfSingleItem)(output["Tag"]), context);
    if (output["ObjectSizeGreaterThan"] !== undefined) contents.ObjectSizeGreaterThan = (0, _smithyClient.strictParseLong)(output["ObjectSizeGreaterThan"]);
    if (output["ObjectSizeLessThan"] !== undefined) contents.ObjectSizeLessThan = (0, _smithyClient.strictParseLong)(output["ObjectSizeLessThan"]);
    return contents;
};
const de_LifecycleRuleFilter = (output, context)=>{
    if (output["Prefix"] !== undefined) return {
        Prefix: (0, _smithyClient.expectString)(output["Prefix"])
    };
    if (output["Tag"] !== undefined) return {
        Tag: de_Tag(output["Tag"], context)
    };
    if (output["ObjectSizeGreaterThan"] !== undefined) return {
        ObjectSizeGreaterThan: (0, _smithyClient.strictParseLong)(output["ObjectSizeGreaterThan"])
    };
    if (output["ObjectSizeLessThan"] !== undefined) return {
        ObjectSizeLessThan: (0, _smithyClient.strictParseLong)(output["ObjectSizeLessThan"])
    };
    if (output["And"] !== undefined) return {
        And: de_LifecycleRuleAndOperator(output["And"], context)
    };
    return {
        $unknown: Object.entries(output)[0]
    };
};
const de_LifecycleRules = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_LifecycleRule(entry, context);
    });
};
const de_LoggingEnabled = (output, context)=>{
    const contents = {};
    if (output["TargetBucket"] !== undefined) contents.TargetBucket = (0, _smithyClient.expectString)(output["TargetBucket"]);
    if (output.TargetGrants === "") contents.TargetGrants = [];
    else if (output["TargetGrants"] !== undefined && output["TargetGrants"]["Grant"] !== undefined) contents.TargetGrants = de_TargetGrants((0, _smithyClient.getArrayIfSingleItem)(output["TargetGrants"]["Grant"]), context);
    if (output["TargetPrefix"] !== undefined) contents.TargetPrefix = (0, _smithyClient.expectString)(output["TargetPrefix"]);
    return contents;
};
const de_Metrics = (output, context)=>{
    const contents = {};
    if (output["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(output["Status"]);
    if (output["EventThreshold"] !== undefined) contents.EventThreshold = de_ReplicationTimeValue(output["EventThreshold"], context);
    return contents;
};
const de_MetricsAndOperator = (output, context)=>{
    const contents = {};
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    if (output.Tag === "") contents.Tags = [];
    else if (output["Tag"] !== undefined) contents.Tags = de_TagSet((0, _smithyClient.getArrayIfSingleItem)(output["Tag"]), context);
    if (output["AccessPointArn"] !== undefined) contents.AccessPointArn = (0, _smithyClient.expectString)(output["AccessPointArn"]);
    return contents;
};
const de_MetricsConfiguration = (output, context)=>{
    const contents = {};
    if (output["Id"] !== undefined) contents.Id = (0, _smithyClient.expectString)(output["Id"]);
    if (output.Filter === "") ;
    else if (output["Filter"] !== undefined) contents.Filter = de_MetricsFilter((0, _smithyClient.expectUnion)(output["Filter"]), context);
    return contents;
};
const de_MetricsConfigurationList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MetricsConfiguration(entry, context);
    });
};
const de_MetricsFilter = (output, context)=>{
    if (output["Prefix"] !== undefined) return {
        Prefix: (0, _smithyClient.expectString)(output["Prefix"])
    };
    if (output["Tag"] !== undefined) return {
        Tag: de_Tag(output["Tag"], context)
    };
    if (output["AccessPointArn"] !== undefined) return {
        AccessPointArn: (0, _smithyClient.expectString)(output["AccessPointArn"])
    };
    if (output["And"] !== undefined) return {
        And: de_MetricsAndOperator(output["And"], context)
    };
    return {
        $unknown: Object.entries(output)[0]
    };
};
const de_MultipartUpload = (output, context)=>{
    const contents = {};
    if (output["UploadId"] !== undefined) contents.UploadId = (0, _smithyClient.expectString)(output["UploadId"]);
    if (output["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(output["Key"]);
    if (output["Initiated"] !== undefined) contents.Initiated = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["Initiated"]));
    if (output["StorageClass"] !== undefined) contents.StorageClass = (0, _smithyClient.expectString)(output["StorageClass"]);
    if (output["Owner"] !== undefined) contents.Owner = de_Owner(output["Owner"], context);
    if (output["Initiator"] !== undefined) contents.Initiator = de_Initiator(output["Initiator"], context);
    if (output["ChecksumAlgorithm"] !== undefined) contents.ChecksumAlgorithm = (0, _smithyClient.expectString)(output["ChecksumAlgorithm"]);
    return contents;
};
const de_MultipartUploadList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_MultipartUpload(entry, context);
    });
};
const de_NoncurrentVersionExpiration = (output, context)=>{
    const contents = {};
    if (output["NoncurrentDays"] !== undefined) contents.NoncurrentDays = (0, _smithyClient.strictParseInt32)(output["NoncurrentDays"]);
    if (output["NewerNoncurrentVersions"] !== undefined) contents.NewerNoncurrentVersions = (0, _smithyClient.strictParseInt32)(output["NewerNoncurrentVersions"]);
    return contents;
};
const de_NoncurrentVersionTransition = (output, context)=>{
    const contents = {};
    if (output["NoncurrentDays"] !== undefined) contents.NoncurrentDays = (0, _smithyClient.strictParseInt32)(output["NoncurrentDays"]);
    if (output["StorageClass"] !== undefined) contents.StorageClass = (0, _smithyClient.expectString)(output["StorageClass"]);
    if (output["NewerNoncurrentVersions"] !== undefined) contents.NewerNoncurrentVersions = (0, _smithyClient.strictParseInt32)(output["NewerNoncurrentVersions"]);
    return contents;
};
const de_NoncurrentVersionTransitionList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_NoncurrentVersionTransition(entry, context);
    });
};
const de_NotificationConfigurationFilter = (output, context)=>{
    const contents = {};
    if (output["S3Key"] !== undefined) contents.Key = de_S3KeyFilter(output["S3Key"], context);
    return contents;
};
const de__Object = (output, context)=>{
    const contents = {};
    if (output["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(output["Key"]);
    if (output["LastModified"] !== undefined) contents.LastModified = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
    if (output["ETag"] !== undefined) contents.ETag = (0, _smithyClient.expectString)(output["ETag"]);
    if (output.ChecksumAlgorithm === "") contents.ChecksumAlgorithm = [];
    else if (output["ChecksumAlgorithm"] !== undefined) contents.ChecksumAlgorithm = de_ChecksumAlgorithmList((0, _smithyClient.getArrayIfSingleItem)(output["ChecksumAlgorithm"]), context);
    if (output["Size"] !== undefined) contents.Size = (0, _smithyClient.strictParseLong)(output["Size"]);
    if (output["StorageClass"] !== undefined) contents.StorageClass = (0, _smithyClient.expectString)(output["StorageClass"]);
    if (output["Owner"] !== undefined) contents.Owner = de_Owner(output["Owner"], context);
    return contents;
};
const de_ObjectList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de__Object(entry, context);
    });
};
const de_ObjectLockConfiguration = (output, context)=>{
    const contents = {};
    if (output["ObjectLockEnabled"] !== undefined) contents.ObjectLockEnabled = (0, _smithyClient.expectString)(output["ObjectLockEnabled"]);
    if (output["Rule"] !== undefined) contents.Rule = de_ObjectLockRule(output["Rule"], context);
    return contents;
};
const de_ObjectLockLegalHold = (output, context)=>{
    const contents = {};
    if (output["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(output["Status"]);
    return contents;
};
const de_ObjectLockRetention = (output, context)=>{
    const contents = {};
    if (output["Mode"] !== undefined) contents.Mode = (0, _smithyClient.expectString)(output["Mode"]);
    if (output["RetainUntilDate"] !== undefined) contents.RetainUntilDate = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["RetainUntilDate"]));
    return contents;
};
const de_ObjectLockRule = (output, context)=>{
    const contents = {};
    if (output["DefaultRetention"] !== undefined) contents.DefaultRetention = de_DefaultRetention(output["DefaultRetention"], context);
    return contents;
};
const de_ObjectPart = (output, context)=>{
    const contents = {};
    if (output["PartNumber"] !== undefined) contents.PartNumber = (0, _smithyClient.strictParseInt32)(output["PartNumber"]);
    if (output["Size"] !== undefined) contents.Size = (0, _smithyClient.strictParseLong)(output["Size"]);
    if (output["ChecksumCRC32"] !== undefined) contents.ChecksumCRC32 = (0, _smithyClient.expectString)(output["ChecksumCRC32"]);
    if (output["ChecksumCRC32C"] !== undefined) contents.ChecksumCRC32C = (0, _smithyClient.expectString)(output["ChecksumCRC32C"]);
    if (output["ChecksumSHA1"] !== undefined) contents.ChecksumSHA1 = (0, _smithyClient.expectString)(output["ChecksumSHA1"]);
    if (output["ChecksumSHA256"] !== undefined) contents.ChecksumSHA256 = (0, _smithyClient.expectString)(output["ChecksumSHA256"]);
    return contents;
};
const de_ObjectVersion = (output, context)=>{
    const contents = {};
    if (output["ETag"] !== undefined) contents.ETag = (0, _smithyClient.expectString)(output["ETag"]);
    if (output.ChecksumAlgorithm === "") contents.ChecksumAlgorithm = [];
    else if (output["ChecksumAlgorithm"] !== undefined) contents.ChecksumAlgorithm = de_ChecksumAlgorithmList((0, _smithyClient.getArrayIfSingleItem)(output["ChecksumAlgorithm"]), context);
    if (output["Size"] !== undefined) contents.Size = (0, _smithyClient.strictParseLong)(output["Size"]);
    if (output["StorageClass"] !== undefined) contents.StorageClass = (0, _smithyClient.expectString)(output["StorageClass"]);
    if (output["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(output["Key"]);
    if (output["VersionId"] !== undefined) contents.VersionId = (0, _smithyClient.expectString)(output["VersionId"]);
    if (output["IsLatest"] !== undefined) contents.IsLatest = (0, _smithyClient.parseBoolean)(output["IsLatest"]);
    if (output["LastModified"] !== undefined) contents.LastModified = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
    if (output["Owner"] !== undefined) contents.Owner = de_Owner(output["Owner"], context);
    return contents;
};
const de_ObjectVersionList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ObjectVersion(entry, context);
    });
};
const de_Owner = (output, context)=>{
    const contents = {};
    if (output["DisplayName"] !== undefined) contents.DisplayName = (0, _smithyClient.expectString)(output["DisplayName"]);
    if (output["ID"] !== undefined) contents.ID = (0, _smithyClient.expectString)(output["ID"]);
    return contents;
};
const de_OwnershipControls = (output, context)=>{
    const contents = {};
    if (output.Rule === "") contents.Rules = [];
    else if (output["Rule"] !== undefined) contents.Rules = de_OwnershipControlsRules((0, _smithyClient.getArrayIfSingleItem)(output["Rule"]), context);
    return contents;
};
const de_OwnershipControlsRule = (output, context)=>{
    const contents = {};
    if (output["ObjectOwnership"] !== undefined) contents.ObjectOwnership = (0, _smithyClient.expectString)(output["ObjectOwnership"]);
    return contents;
};
const de_OwnershipControlsRules = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_OwnershipControlsRule(entry, context);
    });
};
const de_Part = (output, context)=>{
    const contents = {};
    if (output["PartNumber"] !== undefined) contents.PartNumber = (0, _smithyClient.strictParseInt32)(output["PartNumber"]);
    if (output["LastModified"] !== undefined) contents.LastModified = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["LastModified"]));
    if (output["ETag"] !== undefined) contents.ETag = (0, _smithyClient.expectString)(output["ETag"]);
    if (output["Size"] !== undefined) contents.Size = (0, _smithyClient.strictParseLong)(output["Size"]);
    if (output["ChecksumCRC32"] !== undefined) contents.ChecksumCRC32 = (0, _smithyClient.expectString)(output["ChecksumCRC32"]);
    if (output["ChecksumCRC32C"] !== undefined) contents.ChecksumCRC32C = (0, _smithyClient.expectString)(output["ChecksumCRC32C"]);
    if (output["ChecksumSHA1"] !== undefined) contents.ChecksumSHA1 = (0, _smithyClient.expectString)(output["ChecksumSHA1"]);
    if (output["ChecksumSHA256"] !== undefined) contents.ChecksumSHA256 = (0, _smithyClient.expectString)(output["ChecksumSHA256"]);
    return contents;
};
const de_Parts = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Part(entry, context);
    });
};
const de_PartsList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ObjectPart(entry, context);
    });
};
const de_PolicyStatus = (output, context)=>{
    const contents = {};
    if (output["IsPublic"] !== undefined) contents.IsPublic = (0, _smithyClient.parseBoolean)(output["IsPublic"]);
    return contents;
};
const de_Progress = (output, context)=>{
    const contents = {};
    if (output["BytesScanned"] !== undefined) contents.BytesScanned = (0, _smithyClient.strictParseLong)(output["BytesScanned"]);
    if (output["BytesProcessed"] !== undefined) contents.BytesProcessed = (0, _smithyClient.strictParseLong)(output["BytesProcessed"]);
    if (output["BytesReturned"] !== undefined) contents.BytesReturned = (0, _smithyClient.strictParseLong)(output["BytesReturned"]);
    return contents;
};
const de_PublicAccessBlockConfiguration = (output, context)=>{
    const contents = {};
    if (output["BlockPublicAcls"] !== undefined) contents.BlockPublicAcls = (0, _smithyClient.parseBoolean)(output["BlockPublicAcls"]);
    if (output["IgnorePublicAcls"] !== undefined) contents.IgnorePublicAcls = (0, _smithyClient.parseBoolean)(output["IgnorePublicAcls"]);
    if (output["BlockPublicPolicy"] !== undefined) contents.BlockPublicPolicy = (0, _smithyClient.parseBoolean)(output["BlockPublicPolicy"]);
    if (output["RestrictPublicBuckets"] !== undefined) contents.RestrictPublicBuckets = (0, _smithyClient.parseBoolean)(output["RestrictPublicBuckets"]);
    return contents;
};
const de_QueueConfiguration = (output, context)=>{
    const contents = {};
    if (output["Id"] !== undefined) contents.Id = (0, _smithyClient.expectString)(output["Id"]);
    if (output["Queue"] !== undefined) contents.QueueArn = (0, _smithyClient.expectString)(output["Queue"]);
    if (output.Event === "") contents.Events = [];
    else if (output["Event"] !== undefined) contents.Events = de_EventList((0, _smithyClient.getArrayIfSingleItem)(output["Event"]), context);
    if (output["Filter"] !== undefined) contents.Filter = de_NotificationConfigurationFilter(output["Filter"], context);
    return contents;
};
const de_QueueConfigurationList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_QueueConfiguration(entry, context);
    });
};
const de_Redirect = (output, context)=>{
    const contents = {};
    if (output["HostName"] !== undefined) contents.HostName = (0, _smithyClient.expectString)(output["HostName"]);
    if (output["HttpRedirectCode"] !== undefined) contents.HttpRedirectCode = (0, _smithyClient.expectString)(output["HttpRedirectCode"]);
    if (output["Protocol"] !== undefined) contents.Protocol = (0, _smithyClient.expectString)(output["Protocol"]);
    if (output["ReplaceKeyPrefixWith"] !== undefined) contents.ReplaceKeyPrefixWith = (0, _smithyClient.expectString)(output["ReplaceKeyPrefixWith"]);
    if (output["ReplaceKeyWith"] !== undefined) contents.ReplaceKeyWith = (0, _smithyClient.expectString)(output["ReplaceKeyWith"]);
    return contents;
};
const de_RedirectAllRequestsTo = (output, context)=>{
    const contents = {};
    if (output["HostName"] !== undefined) contents.HostName = (0, _smithyClient.expectString)(output["HostName"]);
    if (output["Protocol"] !== undefined) contents.Protocol = (0, _smithyClient.expectString)(output["Protocol"]);
    return contents;
};
const de_ReplicaModifications = (output, context)=>{
    const contents = {};
    if (output["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(output["Status"]);
    return contents;
};
const de_ReplicationConfiguration = (output, context)=>{
    const contents = {};
    if (output["Role"] !== undefined) contents.Role = (0, _smithyClient.expectString)(output["Role"]);
    if (output.Rule === "") contents.Rules = [];
    else if (output["Rule"] !== undefined) contents.Rules = de_ReplicationRules((0, _smithyClient.getArrayIfSingleItem)(output["Rule"]), context);
    return contents;
};
const de_ReplicationRule = (output, context)=>{
    const contents = {};
    if (output["ID"] !== undefined) contents.ID = (0, _smithyClient.expectString)(output["ID"]);
    if (output["Priority"] !== undefined) contents.Priority = (0, _smithyClient.strictParseInt32)(output["Priority"]);
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    if (output.Filter === "") ;
    else if (output["Filter"] !== undefined) contents.Filter = de_ReplicationRuleFilter((0, _smithyClient.expectUnion)(output["Filter"]), context);
    if (output["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(output["Status"]);
    if (output["SourceSelectionCriteria"] !== undefined) contents.SourceSelectionCriteria = de_SourceSelectionCriteria(output["SourceSelectionCriteria"], context);
    if (output["ExistingObjectReplication"] !== undefined) contents.ExistingObjectReplication = de_ExistingObjectReplication(output["ExistingObjectReplication"], context);
    if (output["Destination"] !== undefined) contents.Destination = de_Destination(output["Destination"], context);
    if (output["DeleteMarkerReplication"] !== undefined) contents.DeleteMarkerReplication = de_DeleteMarkerReplication(output["DeleteMarkerReplication"], context);
    return contents;
};
const de_ReplicationRuleAndOperator = (output, context)=>{
    const contents = {};
    if (output["Prefix"] !== undefined) contents.Prefix = (0, _smithyClient.expectString)(output["Prefix"]);
    if (output.Tag === "") contents.Tags = [];
    else if (output["Tag"] !== undefined) contents.Tags = de_TagSet((0, _smithyClient.getArrayIfSingleItem)(output["Tag"]), context);
    return contents;
};
const de_ReplicationRuleFilter = (output, context)=>{
    if (output["Prefix"] !== undefined) return {
        Prefix: (0, _smithyClient.expectString)(output["Prefix"])
    };
    if (output["Tag"] !== undefined) return {
        Tag: de_Tag(output["Tag"], context)
    };
    if (output["And"] !== undefined) return {
        And: de_ReplicationRuleAndOperator(output["And"], context)
    };
    return {
        $unknown: Object.entries(output)[0]
    };
};
const de_ReplicationRules = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ReplicationRule(entry, context);
    });
};
const de_ReplicationTime = (output, context)=>{
    const contents = {};
    if (output["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(output["Status"]);
    if (output["Time"] !== undefined) contents.Time = de_ReplicationTimeValue(output["Time"], context);
    return contents;
};
const de_ReplicationTimeValue = (output, context)=>{
    const contents = {};
    if (output["Minutes"] !== undefined) contents.Minutes = (0, _smithyClient.strictParseInt32)(output["Minutes"]);
    return contents;
};
const de_RoutingRule = (output, context)=>{
    const contents = {};
    if (output["Condition"] !== undefined) contents.Condition = de_Condition(output["Condition"], context);
    if (output["Redirect"] !== undefined) contents.Redirect = de_Redirect(output["Redirect"], context);
    return contents;
};
const de_RoutingRules = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_RoutingRule(entry, context);
    });
};
const de_S3KeyFilter = (output, context)=>{
    const contents = {};
    if (output.FilterRule === "") contents.FilterRules = [];
    else if (output["FilterRule"] !== undefined) contents.FilterRules = de_FilterRuleList((0, _smithyClient.getArrayIfSingleItem)(output["FilterRule"]), context);
    return contents;
};
const de_ServerSideEncryptionByDefault = (output, context)=>{
    const contents = {};
    if (output["SSEAlgorithm"] !== undefined) contents.SSEAlgorithm = (0, _smithyClient.expectString)(output["SSEAlgorithm"]);
    if (output["KMSMasterKeyID"] !== undefined) contents.KMSMasterKeyID = (0, _smithyClient.expectString)(output["KMSMasterKeyID"]);
    return contents;
};
const de_ServerSideEncryptionConfiguration = (output, context)=>{
    const contents = {};
    if (output.Rule === "") contents.Rules = [];
    else if (output["Rule"] !== undefined) contents.Rules = de_ServerSideEncryptionRules((0, _smithyClient.getArrayIfSingleItem)(output["Rule"]), context);
    return contents;
};
const de_ServerSideEncryptionRule = (output, context)=>{
    const contents = {};
    if (output["ApplyServerSideEncryptionByDefault"] !== undefined) contents.ApplyServerSideEncryptionByDefault = de_ServerSideEncryptionByDefault(output["ApplyServerSideEncryptionByDefault"], context);
    if (output["BucketKeyEnabled"] !== undefined) contents.BucketKeyEnabled = (0, _smithyClient.parseBoolean)(output["BucketKeyEnabled"]);
    return contents;
};
const de_ServerSideEncryptionRules = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_ServerSideEncryptionRule(entry, context);
    });
};
const de_SourceSelectionCriteria = (output, context)=>{
    const contents = {};
    if (output["SseKmsEncryptedObjects"] !== undefined) contents.SseKmsEncryptedObjects = de_SseKmsEncryptedObjects(output["SseKmsEncryptedObjects"], context);
    if (output["ReplicaModifications"] !== undefined) contents.ReplicaModifications = de_ReplicaModifications(output["ReplicaModifications"], context);
    return contents;
};
const de_SSEKMS = (output, context)=>{
    const contents = {};
    if (output["KeyId"] !== undefined) contents.KeyId = (0, _smithyClient.expectString)(output["KeyId"]);
    return contents;
};
const de_SseKmsEncryptedObjects = (output, context)=>{
    const contents = {};
    if (output["Status"] !== undefined) contents.Status = (0, _smithyClient.expectString)(output["Status"]);
    return contents;
};
const de_SSES3 = (output, context)=>{
    const contents = {};
    return contents;
};
const de_Stats = (output, context)=>{
    const contents = {};
    if (output["BytesScanned"] !== undefined) contents.BytesScanned = (0, _smithyClient.strictParseLong)(output["BytesScanned"]);
    if (output["BytesProcessed"] !== undefined) contents.BytesProcessed = (0, _smithyClient.strictParseLong)(output["BytesProcessed"]);
    if (output["BytesReturned"] !== undefined) contents.BytesReturned = (0, _smithyClient.strictParseLong)(output["BytesReturned"]);
    return contents;
};
const de_StorageClassAnalysis = (output, context)=>{
    const contents = {};
    if (output["DataExport"] !== undefined) contents.DataExport = de_StorageClassAnalysisDataExport(output["DataExport"], context);
    return contents;
};
const de_StorageClassAnalysisDataExport = (output, context)=>{
    const contents = {};
    if (output["OutputSchemaVersion"] !== undefined) contents.OutputSchemaVersion = (0, _smithyClient.expectString)(output["OutputSchemaVersion"]);
    if (output["Destination"] !== undefined) contents.Destination = de_AnalyticsExportDestination(output["Destination"], context);
    return contents;
};
const de_Tag = (output, context)=>{
    const contents = {};
    if (output["Key"] !== undefined) contents.Key = (0, _smithyClient.expectString)(output["Key"]);
    if (output["Value"] !== undefined) contents.Value = (0, _smithyClient.expectString)(output["Value"]);
    return contents;
};
const de_TagSet = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Tag(entry, context);
    });
};
const de_TargetGrant = (output, context)=>{
    const contents = {};
    if (output["Grantee"] !== undefined) contents.Grantee = de_Grantee(output["Grantee"], context);
    if (output["Permission"] !== undefined) contents.Permission = (0, _smithyClient.expectString)(output["Permission"]);
    return contents;
};
const de_TargetGrants = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_TargetGrant(entry, context);
    });
};
const de_Tiering = (output, context)=>{
    const contents = {};
    if (output["Days"] !== undefined) contents.Days = (0, _smithyClient.strictParseInt32)(output["Days"]);
    if (output["AccessTier"] !== undefined) contents.AccessTier = (0, _smithyClient.expectString)(output["AccessTier"]);
    return contents;
};
const de_TieringList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Tiering(entry, context);
    });
};
const de_TopicConfiguration = (output, context)=>{
    const contents = {};
    if (output["Id"] !== undefined) contents.Id = (0, _smithyClient.expectString)(output["Id"]);
    if (output["Topic"] !== undefined) contents.TopicArn = (0, _smithyClient.expectString)(output["Topic"]);
    if (output.Event === "") contents.Events = [];
    else if (output["Event"] !== undefined) contents.Events = de_EventList((0, _smithyClient.getArrayIfSingleItem)(output["Event"]), context);
    if (output["Filter"] !== undefined) contents.Filter = de_NotificationConfigurationFilter(output["Filter"], context);
    return contents;
};
const de_TopicConfigurationList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_TopicConfiguration(entry, context);
    });
};
const de_Transition = (output, context)=>{
    const contents = {};
    if (output["Date"] !== undefined) contents.Date = (0, _smithyClient.expectNonNull)((0, _smithyClient.parseRfc3339DateTimeWithOffset)(output["Date"]));
    if (output["Days"] !== undefined) contents.Days = (0, _smithyClient.strictParseInt32)(output["Days"]);
    if (output["StorageClass"] !== undefined) contents.StorageClass = (0, _smithyClient.expectString)(output["StorageClass"]);
    return contents;
};
const de_TransitionList = (output, context)=>{
    return (output || []).filter((e)=>e != null).map((entry)=>{
        return de_Transition(entry, context);
    });
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
const collectBody = (streamBody = new Uint8Array(), context)=>{
    if (streamBody instanceof Uint8Array) return Promise.resolve(streamBody);
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context)=>collectBody(streamBody, context).then((body)=>context.utf8Encoder(body));
const isSerializableHeaderValue = (value)=>value !== undefined && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) {
            const parser = new (0, _fastXmlParser.XMLParser)({
                attributeNamePrefix: "",
                htmlEntities: true,
                ignoreAttributes: false,
                ignoreDeclaration: true,
                parseTagValue: false,
                trimValues: false,
                tagValueProcessor: (_, val)=>val.trim() === "" && val.includes("\n") ? "" : undefined
            });
            parser.addEntity("#xD", "\r");
            parser.addEntity("#10", "\n");
            const parsedObj = parser.parse(encoded);
            const textNodeName = "#text";
            const key = Object.keys(parsedObj)[0];
            const parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
                parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
                delete parsedObjToReturn[textNodeName];
            }
            return (0, _smithyClient.getValueFromTextNode)(parsedObjToReturn);
        }
        return {};
    });
const parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    if (value.Error) value.Error.message = value.Error.message ?? value.Error.Message;
    return value;
};
const loadRestXmlErrorCode = (output, data)=>{
    if (data?.Code !== undefined) return data.Code;
    if (output.statusCode == 404) return "NotFound";
};

},{"@aws-sdk/smithy-client":"ats0l","@aws-sdk/xml-builder":"j0tdd","@smithy/protocol-http":"Yq6nA","fast-xml-parser":"6Sr2X","../models/models_0":"c3vBh","../models/models_1":"iOWbb","../models/S3ServiceException":"g5NPd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j0tdd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _xmlNode = require("./XmlNode");
parcelHelpers.exportAll(_xmlNode, exports);
var _xmlText = require("./XmlText");
parcelHelpers.exportAll(_xmlText, exports);

},{"./XmlNode":"jE080","./XmlText":"a4Q0M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jE080":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "XmlNode", ()=>XmlNode);
var _escapeAttribute = require("./escape-attribute");
var _xmlText = require("./XmlText");
class XmlNode {
    static of(name, childText, withName) {
        const node = new XmlNode(name);
        if (childText !== undefined) node.addChildNode(new (0, _xmlText.XmlText)(childText));
        if (withName !== undefined) node.withName(withName);
        return node;
    }
    constructor(name, children = []){
        this.name = name;
        this.children = children;
        this.attributes = {};
    }
    withName(name) {
        this.name = name;
        return this;
    }
    addAttribute(name, value) {
        this.attributes[name] = value;
        return this;
    }
    addChildNode(child) {
        this.children.push(child);
        return this;
    }
    removeAttribute(name) {
        delete this.attributes[name];
        return this;
    }
    toString() {
        const hasChildren = Boolean(this.children.length);
        let xmlText = `<${this.name}`;
        const attributes = this.attributes;
        for (const attributeName of Object.keys(attributes)){
            const attribute = attributes[attributeName];
            if (typeof attribute !== "undefined" && attribute !== null) xmlText += ` ${attributeName}="${(0, _escapeAttribute.escapeAttribute)("" + attribute)}"`;
        }
        return xmlText += !hasChildren ? "/>" : `>${this.children.map((c)=>c.toString()).join("")}</${this.name}>`;
    }
}

},{"./escape-attribute":"hyGLV","./XmlText":"a4Q0M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hyGLV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeAttribute", ()=>escapeAttribute);
function escapeAttribute(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a4Q0M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "XmlText", ()=>XmlText);
var _escapeElement = require("./escape-element");
class XmlText {
    constructor(value){
        this.value = value;
    }
    toString() {
        return (0, _escapeElement.escapeElement)("" + this.value);
    }
}

},{"./escape-element":"2sOcy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2sOcy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeElement", ()=>escapeElement);
function escapeElement(value) {
    return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Yq6nA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _field = require("./Field");
parcelHelpers.exportAll(_field, exports);
var _fields = require("./Fields");
parcelHelpers.exportAll(_fields, exports);
var _httpHandler = require("./httpHandler");
parcelHelpers.exportAll(_httpHandler, exports);
var _httpRequest = require("./httpRequest");
parcelHelpers.exportAll(_httpRequest, exports);
var _httpResponse = require("./httpResponse");
parcelHelpers.exportAll(_httpResponse, exports);
var _isValidHostname = require("./isValidHostname");
parcelHelpers.exportAll(_isValidHostname, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);

},{"./Field":"4KyBC","./Fields":"lXY8Q","./httpHandler":"iGshm","./httpRequest":"kytxS","./httpResponse":"7vxXy","./isValidHostname":"1L5z9","./types":"gVFJB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4KyBC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Field", ()=>Field);
var _types = require("./types");
class Field {
    constructor({ name , kind =(0, _types.FieldPosition).HEADER , values =[]  }){
        this.name = name;
        this.kind = kind;
        this.values = values;
    }
    add(value) {
        this.values.push(value);
    }
    set(values) {
        this.values = values;
    }
    remove(value) {
        this.values = this.values.filter((v)=>v !== value);
    }
    toString() {
        return this.values.map((v)=>v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
    }
    get() {
        return this.values;
    }
}

},{"./types":"gVFJB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gVFJB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FieldPosition", ()=>FieldPosition);
var FieldPosition;
(function(FieldPosition) {
    FieldPosition[FieldPosition["HEADER"] = 0] = "HEADER";
    FieldPosition[FieldPosition["TRAILER"] = 1] = "TRAILER";
})(FieldPosition || (FieldPosition = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lXY8Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Fields", ()=>Fields);
class Fields {
    constructor({ fields =[] , encoding ="utf-8"  }){
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
    }
    setField(field) {
        this.entries[field.name.toLowerCase()] = field;
    }
    getField(name) {
        return this.entries[name.toLowerCase()];
    }
    removeField(name) {
        delete this.entries[name.toLowerCase()];
    }
    getByType(kind) {
        return Object.values(this.entries).filter((field)=>field.kind === kind);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iGshm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kytxS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpRequest", ()=>HttpRequest);
class HttpRequest {
    constructor(options){
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
    }
    static isInstance(request) {
        if (!request) return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    }
    clone() {
        const cloned = new HttpRequest({
            ...this,
            headers: {
                ...this.headers
            }
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
    }
}
function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName)=>{
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [
                ...param
            ] : param
        };
    }, {});
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7vxXy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpResponse", ()=>HttpResponse);
class HttpResponse {
    constructor(options){
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
    }
    static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1L5z9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidHostname", ()=>isValidHostname);
function isValidHostname(hostname) {
    const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Sr2X":[function(require,module,exports) {
"use strict";
const validator = require("cdee4bdab4d553ae");
const XMLParser = require("4303caa56c840f2b");
const XMLBuilder = require("717d6f2bde55eafc");
module.exports = {
    XMLParser: XMLParser,
    XMLValidator: validator,
    XMLBuilder: XMLBuilder
};

},{"cdee4bdab4d553ae":"6JPH6","4303caa56c840f2b":"2smZf","717d6f2bde55eafc":"QZbLF"}],"6JPH6":[function(require,module,exports) {
"use strict";
const util = require("bc9a00c6fe14b9d5");
const defaultOptions = {
    allowBooleanAttributes: false,
    unpairedTags: []
};
//const tagsPattern = new RegExp("<\\/?([\\w:\\-_\.]+)\\s*\/?>","g");
exports.validate = function(xmlData, options) {
    options = Object.assign({}, defaultOptions, options);
    //xmlData = xmlData.replace(/(\r\n|\n|\r)/gm,"");//make it single line
    //xmlData = xmlData.replace(/(^\s*<\?xml.*?\?>)/g,"");//Remove XML starting tag
    //xmlData = xmlData.replace(/(<!DOCTYPE[\s\w\"\.\/\-\:]+(\[.*\])*\s*>)/g,"");//Remove DOCTYPE
    const tags = [];
    let tagFound = false;
    //indicates that the root tag has been closed (aka. depth 0 has been reached)
    let reachedRoot = false;
    if (xmlData[0] === "\uFEFF") // check for byte order mark (BOM)
    xmlData = xmlData.substr(1);
    for(let i = 0; i < xmlData.length; i++){
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
            i += 2;
            i = readPI(xmlData, i);
            if (i.err) return i;
        } else if (xmlData[i] === "<") {
            //starting of tag
            //read until you reach to '>' avoiding any '>' in attribute value
            let tagStartPos = i;
            i++;
            if (xmlData[i] === "!") {
                i = readCommentAndCDATA(xmlData, i);
                continue;
            } else {
                let closingTag = false;
                if (xmlData[i] === "/") {
                    //closing tag
                    closingTag = true;
                    i++;
                }
                //read tagname
                let tagName = "";
                for(; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++)tagName += xmlData[i];
                tagName = tagName.trim();
                //console.log(tagName);
                if (tagName[tagName.length - 1] === "/") {
                    //self closing tag without attributes
                    tagName = tagName.substring(0, tagName.length - 1);
                    //continue;
                    i--;
                }
                if (!validateTagName(tagName)) {
                    let msg;
                    if (tagName.trim().length === 0) msg = "Invalid space after '<'.";
                    else msg = "Tag '" + tagName + "' is an invalid name.";
                    return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
                }
                const result = readAttributeStr(xmlData, i);
                if (result === false) return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
                let attrStr = result.value;
                i = result.index;
                if (attrStr[attrStr.length - 1] === "/") {
                    //self closing tag
                    const attrStrStart = i - attrStr.length;
                    attrStr = attrStr.substring(0, attrStr.length - 1);
                    const isValid = validateAttributeString(attrStr, options);
                    if (isValid === true) tagFound = true;
                    else //the result from the nested function returns the position of the error within the attribute
                    //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
                    //this gives us the absolute index in the entire xml, which we can use to find the line at last
                    return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
                } else if (closingTag) {
                    if (!result.tagClosed) return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
                    else if (attrStr.trim().length > 0) return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
                    else {
                        const otg = tags.pop();
                        if (tagName !== otg.tagName) {
                            let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                            return getErrorObject("InvalidTag", "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.", getLineNumberForPosition(xmlData, tagStartPos));
                        }
                        //when there are no more tags, we reached the root level.
                        if (tags.length == 0) reachedRoot = true;
                    }
                } else {
                    const isValid = validateAttributeString(attrStr, options);
                    if (isValid !== true) //the result from the nested function returns the position of the error within the attribute
                    //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
                    //this gives us the absolute index in the entire xml, which we can use to find the line at last
                    return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
                    //if the root level has been reached before ...
                    if (reachedRoot === true) return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
                    else if (options.unpairedTags.indexOf(tagName) !== -1) ;
                    else tags.push({
                        tagName,
                        tagStartPos
                    });
                    tagFound = true;
                }
                //skip tag text value
                //It may include comments and CDATA value
                for(i++; i < xmlData.length; i++){
                    if (xmlData[i] === "<") {
                        if (xmlData[i + 1] === "!") {
                            //comment or CADATA
                            i++;
                            i = readCommentAndCDATA(xmlData, i);
                            continue;
                        } else if (xmlData[i + 1] === "?") {
                            i = readPI(xmlData, ++i);
                            if (i.err) return i;
                        } else break;
                    } else if (xmlData[i] === "&") {
                        const afterAmp = validateAmpersand(xmlData, i);
                        if (afterAmp == -1) return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                        i = afterAmp;
                    } else {
                        if (reachedRoot === true && !isWhiteSpace(xmlData[i])) return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                    }
                } //end of reading tag text value
                if (xmlData[i] === "<") i--;
            }
        } else {
            if (isWhiteSpace(xmlData[i])) continue;
            return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
    }
    if (!tagFound) return getErrorObject("InvalidXml", "Start tag expected.", 1);
    else if (tags.length == 1) return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
    else if (tags.length > 0) return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t)=>t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", {
        line: 1,
        col: 1
    });
    return true;
};
function isWhiteSpace(char) {
    return char === " " || char === "	" || char === "\n" || char === "\r";
}
/**
 * Read Processing insstructions and skip
 * @param {*} xmlData
 * @param {*} i
 */ function readPI(xmlData, i) {
    const start = i;
    for(; i < xmlData.length; i++)if (xmlData[i] == "?" || xmlData[i] == " ") {
        //tagname
        const tagname = xmlData.substr(start, i - start);
        if (i > 5 && tagname === "xml") return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
        else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            //check if valid attribut string
            i++;
            break;
        } else continue;
    }
    return i;
}
function readCommentAndCDATA(xmlData, i) {
    if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        //comment
        for(i += 3; i < xmlData.length; i++)if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
        }
    } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for(i += 8; i < xmlData.length; i++){
            if (xmlData[i] === "<") angleBracketsCount++;
            else if (xmlData[i] === ">") {
                angleBracketsCount--;
                if (angleBracketsCount === 0) break;
            }
        }
    } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for(i += 8; i < xmlData.length; i++)if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
        }
    }
    return i;
}
const doubleQuote = '"';
const singleQuote = "'";
/**
 * Keep reading xmlData until '<' is found outside the attribute value.
 * @param {string} xmlData
 * @param {number} i
 */ function readAttributeStr(xmlData, i) {
    let attrStr = "";
    let startChar = "";
    let tagClosed = false;
    for(; i < xmlData.length; i++){
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
            if (startChar === "") startChar = xmlData[i];
            else if (startChar !== xmlData[i]) ;
            else startChar = "";
        } else if (xmlData[i] === ">") {
            if (startChar === "") {
                tagClosed = true;
                break;
            }
        }
        attrStr += xmlData[i];
    }
    if (startChar !== "") return false;
    return {
        value: attrStr,
        index: i,
        tagClosed: tagClosed
    };
}
/**
 * Select all the attributes whether valid or invalid.
 */ const validAttrStrRegxp = new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?", "g");
//attr, ="sd", a="amit's", a="sd"b="saf", ab  cd=""
function validateAttributeString(attrStr, options) {
    //console.log("start:"+attrStr+":end");
    //if(attrStr.trim().length === 0) return true; //empty string
    const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
    const attrNames = {};
    for(let i = 0; i < matches.length; i++){
        if (matches[i][1].length === 0) //nospace before attribute name: a="sd"b="saf"
        return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        else if (matches[i][3] !== undefined && matches[i][4] === undefined) return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        else if (matches[i][3] === undefined && !options.allowBooleanAttributes) //independent attribute: ab
        return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        /* else if(matches[i][6] === undefined){//attribute without value: ab=
                    return { err: { code:"InvalidAttr",msg:"attribute " + matches[i][2] + " has no value assigned."}};
                } */ const attrName = matches[i][2];
        if (!validateAttrName(attrName)) return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        if (!attrNames.hasOwnProperty(attrName)) //check for duplicate attribute.
        attrNames[attrName] = 1;
        else return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
    }
    return true;
}
function validateNumberAmpersand(xmlData, i) {
    let re = /\d/;
    if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
    }
    for(; i < xmlData.length; i++){
        if (xmlData[i] === ";") return i;
        if (!xmlData[i].match(re)) break;
    }
    return -1;
}
function validateAmpersand(xmlData, i) {
    // https://www.w3.org/TR/xml/#dt-charref
    i++;
    if (xmlData[i] === ";") return -1;
    if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
    }
    let count = 0;
    for(; i < xmlData.length; i++, count++){
        if (xmlData[i].match(/\w/) && count < 20) continue;
        if (xmlData[i] === ";") break;
        return -1;
    }
    return i;
}
function getErrorObject(code, message, lineNumber) {
    return {
        err: {
            code: code,
            msg: message,
            line: lineNumber.line || lineNumber,
            col: lineNumber.col
        }
    };
}
function validateAttrName(attrName) {
    return util.isName(attrName);
}
// const startsWithXML = /^xml/i;
function validateTagName(tagname) {
    return util.isName(tagname) /* && !tagname.match(startsWithXML) */ ;
}
//this function returns the line number for the character at the given index
function getLineNumberForPosition(xmlData, index) {
    const lines = xmlData.substring(0, index).split(/\r?\n/);
    return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
    };
}
//this function returns the position of the first character of match within attrStr
function getPositionFromMatch(match) {
    return match.startIndex + match[1].length;
}

},{"bc9a00c6fe14b9d5":"7dJgG"}],"7dJgG":[function(require,module,exports) {
"use strict";
const nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
const nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
const nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
const regexName = new RegExp("^" + nameRegexp + "$");
const getAllMatches = function(string, regex) {
    const matches = [];
    let match = regex.exec(string);
    while(match){
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for(let index = 0; index < len; index++)allmatches.push(match[index]);
        matches.push(allmatches);
        match = regex.exec(string);
    }
    return matches;
};
const isName = function(string) {
    const match = regexName.exec(string);
    return !(match === null || typeof match === "undefined");
};
exports.isExist = function(v) {
    return typeof v !== "undefined";
};
exports.isEmptyObject = function(obj) {
    return Object.keys(obj).length === 0;
};
/**
 * Copy all the properties of a into b.
 * @param {*} target
 * @param {*} a
 */ exports.merge = function(target, a, arrayMode) {
    if (a) {
        const keys = Object.keys(a); // will return an array of own properties
        const len = keys.length; //don't make it inline
        for(let i = 0; i < len; i++)if (arrayMode === "strict") target[keys[i]] = [
            a[keys[i]]
        ];
        else target[keys[i]] = a[keys[i]];
    }
};
/* exports.merge =function (b,a){
  return Object.assign(b,a);
} */ exports.getValue = function(v) {
    if (exports.isExist(v)) return v;
    else return "";
};
// const fakeCall = function(a) {return a;};
// const fakeCallNoReturn = function() {};
exports.isName = isName;
exports.getAllMatches = getAllMatches;
exports.nameRegexp = nameRegexp;

},{}],"2smZf":[function(require,module,exports) {
const { buildOptions  } = require("8169c0d4acf9594b");
const OrderedObjParser = require("76c99a21ff450114");
const { prettify  } = require("724b593a555ac3f0");
const validator = require("aff4f845c8897af9");
class XMLParser {
    constructor(options){
        this.externalEntities = {};
        this.options = buildOptions(options);
    }
    /**
     * Parse XML dats to JS object 
     * @param {string|Buffer} xmlData 
     * @param {boolean|Object} validationOption 
     */ parse(xmlData, validationOption) {
        if (typeof xmlData === "string") ;
        else if (xmlData.toString) xmlData = xmlData.toString();
        else throw new Error("XML data is accepted in String or Bytes[] form.");
        if (validationOption) {
            if (validationOption === true) validationOption = {}; //validate with default options
            const result = validator.validate(xmlData, validationOption);
            if (result !== true) throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === undefined) return orderedResult;
        else return prettify(orderedResult, this.options);
    }
    /**
     * Add Entity which is not by default supported by this library
     * @param {string} key 
     * @param {string} value 
     */ addEntity(key, value) {
        if (value.indexOf("&") !== -1) throw new Error("Entity value can't have '&'");
        else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        else if (value === "&") throw new Error("An entity with value '&' is not permitted");
        else this.externalEntities[key] = value;
    }
}
module.exports = XMLParser;

},{"8169c0d4acf9594b":"hgf1r","76c99a21ff450114":"doCMw","724b593a555ac3f0":"6rXXG","aff4f845c8897af9":"6JPH6"}],"hgf1r":[function(require,module,exports) {
const defaultOptions = {
    preserveOrder: false,
    attributeNamePrefix: "@_",
    attributesGroupName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    removeNSPrefix: false,
    allowBooleanAttributes: false,
    //ignoreRootElement : false,
    parseTagValue: true,
    parseAttributeValue: false,
    trimValues: true,
    cdataPropName: false,
    numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
    },
    tagValueProcessor: function(tagName, val) {
        return val;
    },
    attributeValueProcessor: function(attrName, val) {
        return val;
    },
    stopNodes: [],
    alwaysCreateTextNode: false,
    isArray: ()=>false,
    commentPropName: false,
    unpairedTags: [],
    processEntities: true,
    htmlEntities: false,
    ignoreDeclaration: false,
    ignorePiTags: false,
    transformTagName: false,
    transformAttributeName: false,
    updateTag: function(tagName, jPath, attrs) {
        return tagName;
    }
};
const buildOptions = function(options) {
    return Object.assign({}, defaultOptions, options);
};
exports.buildOptions = buildOptions;
exports.defaultOptions = defaultOptions;

},{}],"doCMw":[function(require,module,exports) {
"use strict";
///@ts-check
const util = require("2a9a1b4599863efc");
const xmlNode = require("de2f57a123bb2727");
const readDocType = require("333935c633ad8dd9");
const toNumber = require("b1a3a3307a8227eb");
const regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
//const tagsRegx = new RegExp("<(\\/?[\\w:\\-\._]+)([^>]*)>(\\s*"+cdataRegx+")*([^<]+)?","g");
//const tagsRegx = new RegExp("<(\\/?)((\\w*:)?([\\w:\\-\._]+))([^>]*)>([^<]*)("+cdataRegx+"([^<]*))*([^<]+)?","g");
class OrderedObjParser {
    constructor(options){
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
            "apos": {
                regex: /&(apos|#39|#x27);/g,
                val: "'"
            },
            "gt": {
                regex: /&(gt|#62|#x3E);/g,
                val: ">"
            },
            "lt": {
                regex: /&(lt|#60|#x3C);/g,
                val: "<"
            },
            "quot": {
                regex: /&(quot|#34|#x22);/g,
                val: '"'
            }
        };
        this.ampEntity = {
            regex: /&(amp|#38|#x26);/g,
            val: "&"
        };
        this.htmlEntities = {
            "space": {
                regex: /&(nbsp|#160);/g,
                val: " "
            },
            // "lt" : { regex: /&(lt|#60);/g, val: "<" },
            // "gt" : { regex: /&(gt|#62);/g, val: ">" },
            // "amp" : { regex: /&(amp|#38);/g, val: "&" },
            // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
            // "apos" : { regex: /&(apos|#39);/g, val: "'" },
            "cent": {
                regex: /&(cent|#162);/g,
                val: "\xa2"
            },
            "pound": {
                regex: /&(pound|#163);/g,
                val: "\xa3"
            },
            "yen": {
                regex: /&(yen|#165);/g,
                val: "\xa5"
            },
            "euro": {
                regex: /&(euro|#8364);/g,
                val: "€"
            },
            "copyright": {
                regex: /&(copy|#169);/g,
                val: "\xa9"
            },
            "reg": {
                regex: /&(reg|#174);/g,
                val: "\xae"
            },
            "inr": {
                regex: /&(inr|#8377);/g,
                val: "₹"
            }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
    }
}
function addExternalEntities(externalEntities) {
    const entKeys = Object.keys(externalEntities);
    for(let i = 0; i < entKeys.length; i++){
        const ent = entKeys[i];
        this.lastEntities[ent] = {
            regex: new RegExp("&" + ent + ";", "g"),
            val: externalEntities[ent]
        };
    }
}
/**
 * @param {string} val
 * @param {string} tagName
 * @param {string} jPath
 * @param {boolean} dontTrim
 * @param {boolean} hasAttributes
 * @param {boolean} isLeafNode
 * @param {boolean} escapeEntities
 */ function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
    if (val !== undefined) {
        if (this.options.trimValues && !dontTrim) val = val.trim();
        if (val.length > 0) {
            if (!escapeEntities) val = this.replaceEntitiesValue(val);
            const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
            if (newval === null || newval === undefined) //don't parse
            return val;
            else if (typeof newval !== typeof val || newval !== val) //overwrite
            return newval;
            else if (this.options.trimValues) return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
            else {
                const trimmedVal = val.trim();
                if (trimmedVal === val) return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
                else return val;
            }
        }
    }
}
function resolveNameSpace(tagname) {
    if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") return "";
        if (tags.length === 2) tagname = prefix + tags[1];
    }
    return tagname;
}
//TODO: change regex to capture NS
//const attrsRegx = new RegExp("([\\w\\-\\.\\:]+)\\s*=\\s*(['\"])((.|\n)*?)\\2","gm");
const attrsRegx = new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?", "gm");
function buildAttributesMap(attrStr, jPath, tagName) {
    if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        // attrStr = attrStr.replace(/\r?\n/g, ' ');
        //attrStr = attrStr || attrStr.trim();
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length; //don't make it inline
        const attrs = {};
        for(let i = 0; i < len; i++){
            const attrName = this.resolveNameSpace(matches[i][1]);
            let oldVal = matches[i][4];
            let aName = this.options.attributeNamePrefix + attrName;
            if (attrName.length) {
                if (this.options.transformAttributeName) aName = this.options.transformAttributeName(aName);
                if (aName === "__proto__") aName = "#__proto__";
                if (oldVal !== undefined) {
                    if (this.options.trimValues) oldVal = oldVal.trim();
                    oldVal = this.replaceEntitiesValue(oldVal);
                    const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
                    if (newVal === null || newVal === undefined) //don't parse
                    attrs[aName] = oldVal;
                    else if (typeof newVal !== typeof oldVal || newVal !== oldVal) //overwrite
                    attrs[aName] = newVal;
                    else //parse
                    attrs[aName] = parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);
                } else if (this.options.allowBooleanAttributes) attrs[aName] = true;
            }
        }
        if (!Object.keys(attrs).length) return;
        if (this.options.attributesGroupName) {
            const attrCollection = {};
            attrCollection[this.options.attributesGroupName] = attrs;
            return attrCollection;
        }
        return attrs;
    }
}
const parseXml = function(xmlData) {
    xmlData = xmlData.replace(/\r\n?/g, "\n"); //TODO: remove this line
    const xmlObj = new xmlNode("!xml");
    let currentNode = xmlObj;
    let textData = "";
    let jPath = "";
    for(let i = 0; i < xmlData.length; i++){
        const ch = xmlData[i];
        if (ch === "<") {
            // const nextIndex = i+1;
            // const _2ndChar = xmlData[nextIndex];
            if (xmlData[i + 1] === "/") {
                const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
                let tagName = xmlData.substring(i + 2, closeIndex).trim();
                if (this.options.removeNSPrefix) {
                    const colonIndex = tagName.indexOf(":");
                    if (colonIndex !== -1) tagName = tagName.substr(colonIndex + 1);
                }
                if (this.options.transformTagName) tagName = this.options.transformTagName(tagName);
                if (currentNode) textData = this.saveTextToParentTag(textData, currentNode, jPath);
                //check if last tag of nested tag was unpaired tag
                const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
                if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
                let propIndex = 0;
                if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
                    propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
                    this.tagsNodeStack.pop();
                } else propIndex = jPath.lastIndexOf(".");
                jPath = jPath.substring(0, propIndex);
                currentNode = this.tagsNodeStack.pop(); //avoid recursion, set the parent tag scope
                textData = "";
                i = closeIndex;
            } else if (xmlData[i + 1] === "?") {
                let tagData = readTagExp(xmlData, i, false, "?>");
                if (!tagData) throw new Error("Pi Tag is not closed.");
                textData = this.saveTextToParentTag(textData, currentNode, jPath);
                if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) ;
                else {
                    const childNode = new xmlNode(tagData.tagName);
                    childNode.add(this.options.textNodeName, "");
                    if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
                    this.addChild(currentNode, childNode, jPath);
                }
                i = tagData.closeIndex + 1;
            } else if (xmlData.substr(i + 1, 3) === "!--") {
                const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
                if (this.options.commentPropName) {
                    const comment = xmlData.substring(i + 4, endIndex - 2);
                    textData = this.saveTextToParentTag(textData, currentNode, jPath);
                    currentNode.add(this.options.commentPropName, [
                        {
                            [this.options.textNodeName]: comment
                        }
                    ]);
                }
                i = endIndex;
            } else if (xmlData.substr(i + 1, 2) === "!D") {
                const result = readDocType(xmlData, i);
                this.docTypeEntities = result.entities;
                i = result.i;
            } else if (xmlData.substr(i + 1, 2) === "![") {
                const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
                const tagExp = xmlData.substring(i + 9, closeIndex);
                textData = this.saveTextToParentTag(textData, currentNode, jPath);
                //cdata should be set even if it is 0 length string
                if (this.options.cdataPropName) // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + "." + this.options.cdataPropName, true, false, true);
                // if(!val) val = "";
                currentNode.add(this.options.cdataPropName, [
                    {
                        [this.options.textNodeName]: tagExp
                    }
                ]);
                else {
                    let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
                    if (val == undefined) val = "";
                    currentNode.add(this.options.textNodeName, val);
                }
                i = closeIndex + 2;
            } else {
                let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
                let tagName = result.tagName;
                let tagExp = result.tagExp;
                let attrExpPresent = result.attrExpPresent;
                let closeIndex = result.closeIndex;
                if (this.options.transformTagName) tagName = this.options.transformTagName(tagName);
                //save text as child node
                if (currentNode && textData) {
                    if (currentNode.tagname !== "!xml") //when nested tag is found
                    textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
                }
                //check if last tag was unpaired tag
                const lastTag = currentNode;
                if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
                    currentNode = this.tagsNodeStack.pop();
                    jPath = jPath.substring(0, jPath.lastIndexOf("."));
                }
                if (tagName !== xmlObj.tagname) jPath += jPath ? "." + tagName : tagName;
                if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
                    let tagContent = "";
                    //self-closing tag
                    if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) i = result.closeIndex;
                    else if (this.options.unpairedTags.indexOf(tagName) !== -1) i = result.closeIndex;
                    else {
                        //read until closing tag is found
                        const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                        if (!result) throw new Error(`Unexpected end of ${tagName}`);
                        i = result.i;
                        tagContent = result.tagContent;
                    }
                    const childNode = new xmlNode(tagName);
                    if (tagName !== tagExp && attrExpPresent) childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                    if (tagContent) tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
                    jPath = jPath.substr(0, jPath.lastIndexOf("."));
                    childNode.add(this.options.textNodeName, tagContent);
                    this.addChild(currentNode, childNode, jPath);
                } else {
                    //selfClosing tag
                    if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                        if (tagName[tagName.length - 1] === "/") {
                            tagName = tagName.substr(0, tagName.length - 1);
                            tagExp = tagName;
                        } else tagExp = tagExp.substr(0, tagExp.length - 1);
                        if (this.options.transformTagName) tagName = this.options.transformTagName(tagName);
                        const childNode = new xmlNode(tagName);
                        if (tagName !== tagExp && attrExpPresent) childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                        this.addChild(currentNode, childNode, jPath);
                        jPath = jPath.substr(0, jPath.lastIndexOf("."));
                    } else {
                        const childNode = new xmlNode(tagName);
                        this.tagsNodeStack.push(currentNode);
                        if (tagName !== tagExp && attrExpPresent) childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                        this.addChild(currentNode, childNode, jPath);
                        currentNode = childNode;
                    }
                    textData = "";
                    i = closeIndex;
                }
            }
        } else textData += xmlData[i];
    }
    return xmlObj.child;
};
function addChild(currentNode, childNode, jPath) {
    const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
    if (result === false) ;
    else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
    } else currentNode.addChild(childNode);
}
const replaceEntitiesValue = function(val) {
    if (this.options.processEntities) {
        for(let entityName in this.docTypeEntities){
            const entity = this.docTypeEntities[entityName];
            val = val.replace(entity.regx, entity.val);
        }
        for(let entityName in this.lastEntities){
            const entity = this.lastEntities[entityName];
            val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) for(let entityName in this.htmlEntities){
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
    }
    return val;
};
function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
    if (textData) {
        if (isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(textData, currentNode.tagname, jPath, false, currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false, isLeafNode);
        if (textData !== undefined && textData !== "") currentNode.add(this.options.textNodeName, textData);
        textData = "";
    }
    return textData;
}
//TODO: use jPath to simplify the logic
/**
 * 
 * @param {string[]} stopNodes 
 * @param {string} jPath
 * @param {string} currentTagName 
 */ function isItStopNode(stopNodes, jPath, currentTagName) {
    const allNodesExp = "*." + currentTagName;
    for(const stopNodePath in stopNodes){
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;
    }
    return false;
}
/**
 * Returns the tag Expression and where it is ending handling single-double quotes situation
 * @param {string} xmlData 
 * @param {number} i starting index
 * @returns 
 */ function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
    let attrBoundary;
    let tagExp = "";
    for(let index = i; index < xmlData.length; index++){
        let ch = xmlData[index];
        if (attrBoundary) {
            if (ch === attrBoundary) attrBoundary = ""; //reset
        } else if (ch === '"' || ch === "'") attrBoundary = ch;
        else if (ch === closingChar[0]) {
            if (closingChar[1]) {
                if (xmlData[index + 1] === closingChar[1]) return {
                    data: tagExp,
                    index: index
                };
            } else return {
                data: tagExp,
                index: index
            };
        } else if (ch === "	") ch = " ";
        tagExp += ch;
    }
}
function findClosingIndex(xmlData, str, i, errMsg) {
    const closingIndex = xmlData.indexOf(str, i);
    if (closingIndex === -1) throw new Error(errMsg);
    else return closingIndex + str.length - 1;
}
function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
    const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
    if (!result) return;
    let tagExp = result.data;
    const closeIndex = result.index;
    const separatorIndex = tagExp.search(/\s/);
    let tagName = tagExp;
    let attrExpPresent = true;
    if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
    }
    if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
            tagName = tagName.substr(colonIndex + 1);
            attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
    }
    return {
        tagName: tagName,
        tagExp: tagExp,
        closeIndex: closeIndex,
        attrExpPresent: attrExpPresent
    };
}
/**
 * find paired tag for a stop node
 * @param {string} xmlData 
 * @param {string} tagName 
 * @param {number} i 
 */ function readStopNodeData(xmlData, tagName, i) {
    const startIndex = i;
    // Starting at 1 since we already have an open tag
    let openTagCount = 1;
    for(; i < xmlData.length; i++)if (xmlData[i] === "<") {
        if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
                openTagCount--;
                if (openTagCount === 0) return {
                    tagContent: xmlData.substring(startIndex, i),
                    i: closeIndex
                };
            }
            i = closeIndex;
        } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
        } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
        } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
        } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
                const openTagName = tagData && tagData.tagName;
                if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") openTagCount++;
                i = tagData.closeIndex;
            }
        }
    }
     //end for loop
}
function parseValue(val, shouldParse, options) {
    if (shouldParse && typeof val === "string") {
        //console.log(options)
        const newval = val.trim();
        if (newval === "true") return true;
        else if (newval === "false") return false;
        else return toNumber(val, options);
    } else {
        if (util.isExist(val)) return val;
        else return "";
    }
}
module.exports = OrderedObjParser;

},{"2a9a1b4599863efc":"7dJgG","de2f57a123bb2727":"ioTgV","333935c633ad8dd9":"jYMrZ","b1a3a3307a8227eb":"2f4AT"}],"ioTgV":[function(require,module,exports) {
"use strict";
class XmlNode {
    constructor(tagname){
        this.tagname = tagname;
        this.child = []; //nested tags, text, cdata, comments in order
        this[":@"] = {}; //attributes map
    }
    add(key, val) {
        // this.child.push( {name : key, val: val, isCdata: isCdata });
        if (key === "__proto__") key = "#__proto__";
        this.child.push({
            [key]: val
        });
    }
    addChild(node) {
        if (node.tagname === "__proto__") node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) this.child.push({
            [node.tagname]: node.child,
            [":@"]: node[":@"]
        });
        else this.child.push({
            [node.tagname]: node.child
        });
    }
}
module.exports = XmlNode;

},{}],"jYMrZ":[function(require,module,exports) {
//TODO: handle comments
function readDocType(xmlData, i) {
    const entities = {};
    if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for(; i < xmlData.length; i++){
            if (xmlData[i] === "<" && !comment) {
                if (hasBody && isEntity(xmlData, i)) {
                    i += 7;
                    [entityName, val, i] = readEntityExp(xmlData, i + 1);
                    if (val.indexOf("&") === -1) entities[validateEntityName(entityName)] = {
                        regx: RegExp(`&${entityName};`, "g"),
                        val: val
                    };
                } else if (hasBody && isElement(xmlData, i)) i += 8; //Not supported
                else if (hasBody && isAttlist(xmlData, i)) i += 8; //Not supported
                else if (hasBody && isNotation(xmlData, i)) i += 9; //Not supported
                else if (isComment) comment = true;
                else throw new Error("Invalid DOCTYPE");
                angleBracketsCount++;
                exp = "";
            } else if (xmlData[i] === ">") {
                if (comment) {
                    if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                        comment = false;
                        angleBracketsCount--;
                    }
                } else angleBracketsCount--;
                if (angleBracketsCount === 0) break;
            } else if (xmlData[i] === "[") hasBody = true;
            else exp += xmlData[i];
        }
        if (angleBracketsCount !== 0) throw new Error(`Unclosed DOCTYPE`);
    } else throw new Error(`Invalid Tag instead of DOCTYPE`);
    return {
        entities,
        i
    };
}
function readEntityExp(xmlData, i) {
    //External entities are not supported
    //    <!ENTITY ext SYSTEM "http://normal-website.com" >
    //Parameter entities are not supported
    //    <!ENTITY entityname "&anotherElement;">
    //Internal entities are supported
    //    <!ENTITY entityname "replacement text">
    //read EntityName
    let entityName1 = "";
    for(; i < xmlData.length && xmlData[i] !== "'" && xmlData[i] !== '"'; i++)// if(xmlData[i] === " ") continue;
    // else 
    entityName1 += xmlData[i];
    entityName1 = entityName1.trim();
    if (entityName1.indexOf(" ") !== -1) throw new Error("External entites are not supported");
    //read Entity Value
    const startChar = xmlData[i++];
    let val1 = "";
    for(; i < xmlData.length && xmlData[i] !== startChar; i++)val1 += xmlData[i];
    return [
        entityName1,
        val1,
        i
    ];
}
function isComment(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-") return true;
    return false;
}
function isEntity(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y") return true;
    return false;
}
function isElement(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T") return true;
    return false;
}
function isAttlist(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T") return true;
    return false;
}
function isNotation(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N") return true;
    return false;
}
//an entity name should not contains special characters that may be used in regex
//Eg !?\\\/[]$%{}^&*()<>
const specialChar = "!?\\/[]$%{}^&*()<>|+";
function validateEntityName(name) {
    for(let i = 0; i < specialChar.length; i++){
        const ch = specialChar[i];
        if (name.indexOf(ch) !== -1) throw new Error(`Invalid character ${ch} in entity name`);
    }
    return name;
}
module.exports = readDocType;

},{}],"2f4AT":[function(require,module,exports) {
const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
const numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
// const octRegex = /0x[a-z0-9]+/;
// const binRegex = /0x[a-z0-9]+/;
//polyfill
if (!Number.parseInt && window.parseInt) Number.parseInt = window.parseInt;
if (!Number.parseFloat && window.parseFloat) Number.parseFloat = window.parseFloat;
const consider = {
    hex: true,
    leadingZeros: true,
    decimalPoint: ".",
    eNotation: true
};
function toNumber(str, options = {}) {
    // const options = Object.assign({}, consider);
    // if(opt.leadingZeros === false){
    //     options.leadingZeros = false;
    // }else if(opt.hex === false){
    //     options.hex = false;
    // }
    options = Object.assign({}, consider, options);
    if (!str || typeof str !== "string") return str;
    let trimmedStr = str.trim();
    // if(trimmedStr === "0.0") return 0;
    // else if(trimmedStr === "+0.0") return 0;
    // else if(trimmedStr === "-0.0") return -0;
    if (options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;
    else if (options.hex && hexRegex.test(trimmedStr)) return Number.parseInt(trimmedStr, 16);
    else {
        //separate negative sign, leading zeros, and rest number
        const match = numRegex.exec(trimmedStr);
        if (match) {
            const sign = match[1];
            const leadingZeros = match[2];
            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros
            //trim ending zeros for floating number
            const eNotation = match[4] || match[6];
            if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".") return str; //-0123
            else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".") return str; //0123
            else {
                const num = Number(trimmedStr);
                const numStr = "" + num;
                if (numStr.search(/[eE]/) !== -1) {
                    if (options.eNotation) return num;
                    else return str;
                } else if (eNotation) {
                    if (options.eNotation) return num;
                    else return str;
                } else if (trimmedStr.indexOf(".") !== -1) {
                    // const decimalPart = match[5].substr(1);
                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf("."));
                    // const p = numStr.indexOf(".");
                    // const givenIntPart = numStr.substr(0,p);
                    // const givenDecPart = numStr.substr(p+1);
                    if (numStr === "0" && numTrimmedByZeros === "") return num; //0.0
                    else if (numStr === numTrimmedByZeros) return num; //0.456. 0.79000
                    else if (sign && numStr === "-" + numTrimmedByZeros) return num;
                    else return str;
                }
                if (leadingZeros) {
                    // if(numTrimmedByZeros === numStr){
                    //     if(options.leadingZeros) return num;
                    //     else return str;
                    // }else return str;
                    if (numTrimmedByZeros === numStr) return num;
                    else if (sign + numTrimmedByZeros === numStr) return num;
                    else return str;
                }
                if (trimmedStr === numStr) return num;
                else if (trimmedStr === sign + numStr) return num;
                // else{
                //     //number with +/- sign
                //     trimmedStr.test(/[-+][0-9]);
                // }
                return str;
            }
        // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;
        } else return str;
    }
}
/**
 * 
 * @param {string} numStr without leading zeros
 * @returns 
 */ function trimZeros(numStr) {
    if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, ""); //remove ending zeros
        if (numStr === ".") numStr = "0";
        else if (numStr[0] === ".") numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".") numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
    }
    return numStr;
}
module.exports = toNumber;

},{}],"6rXXG":[function(require,module,exports) {
"use strict";
/**
 * 
 * @param {array} node 
 * @param {any} options 
 * @returns 
 */ function prettify(node, options) {
    return compress(node, options);
}
/**
 * 
 * @param {array} arr 
 * @param {object} options 
 * @param {string} jPath 
 * @returns object
 */ function compress(arr, options, jPath) {
    let text;
    const compressedObj = {};
    for(let i = 0; i < arr.length; i++){
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === undefined) newJpath = property;
        else newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
            if (text === undefined) text = tagObj[property];
            else text += "" + tagObj[property];
        } else if (property === undefined) continue;
        else if (tagObj[property]) {
            let val = compress(tagObj[property], options, newJpath);
            const isLeaf = isLeafTag(val, options);
            if (tagObj[":@"]) assignAttributes(val, tagObj[":@"], newJpath, options);
            else if (Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode) val = val[options.textNodeName];
            else if (Object.keys(val).length === 0) {
                if (options.alwaysCreateTextNode) val[options.textNodeName] = "";
                else val = "";
            }
            if (compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {
                if (!Array.isArray(compressedObj[property])) compressedObj[property] = [
                    compressedObj[property]
                ];
                compressedObj[property].push(val);
            } else //TODO: if a node is not an array, then check if it should be an array
            //also determine if it is a leaf node
            if (options.isArray(property, newJpath, isLeaf)) compressedObj[property] = [
                val
            ];
            else compressedObj[property] = val;
        }
    }
    // if(text && text.length > 0) compressedObj[options.textNodeName] = text;
    if (typeof text === "string") {
        if (text.length > 0) compressedObj[options.textNodeName] = text;
    } else if (text !== undefined) compressedObj[options.textNodeName] = text;
    return compressedObj;
}
function propName(obj) {
    const keys = Object.keys(obj);
    for(let i = 0; i < keys.length; i++){
        const key = keys[i];
        if (key !== ":@") return key;
    }
}
function assignAttributes(obj, attrMap, jpath, options) {
    if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length; //don't make it inline
        for(let i = 0; i < len; i++){
            const atrrName = keys[i];
            if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) obj[atrrName] = [
                attrMap[atrrName]
            ];
            else obj[atrrName] = attrMap[atrrName];
        }
    }
}
function isLeafTag(obj, options) {
    const { textNodeName  } = options;
    const propCount = Object.keys(obj).length;
    if (propCount === 0) return true;
    if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) return true;
    return false;
}
exports.prettify = prettify;

},{}],"QZbLF":[function(require,module,exports) {
"use strict";
//parse Empty Node as self closing node
const buildFromOrderedJs = require("3632c1de2a08066");
const defaultOptions = {
    attributeNamePrefix: "@_",
    attributesGroupName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    cdataPropName: false,
    format: false,
    indentBy: "  ",
    suppressEmptyNode: false,
    suppressUnpairedNode: true,
    suppressBooleanAttributes: true,
    tagValueProcessor: function(key, a) {
        return a;
    },
    attributeValueProcessor: function(attrName, a) {
        return a;
    },
    preserveOrder: false,
    commentPropName: false,
    unpairedTags: [],
    entities: [
        {
            regex: new RegExp("&", "g"),
            val: "&amp;"
        },
        {
            regex: new RegExp(">", "g"),
            val: "&gt;"
        },
        {
            regex: new RegExp("<", "g"),
            val: "&lt;"
        },
        {
            regex: new RegExp("'", "g"),
            val: "&apos;"
        },
        {
            regex: new RegExp('"', "g"),
            val: "&quot;"
        }
    ],
    processEntities: true,
    stopNodes: [],
    // transformTagName: false,
    // transformAttributeName: false,
    oneListGroup: false
};
function Builder(options) {
    this.options = Object.assign({}, defaultOptions, options);
    if (this.options.ignoreAttributes || this.options.attributesGroupName) this.isAttribute = function() {
        return false;
    };
    else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
    }
    this.processTextOrObjNode = processTextOrObjNode;
    if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
    } else {
        this.indentate = function() {
            return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
    }
}
Builder.prototype.build = function(jObj) {
    if (this.options.preserveOrder) return buildFromOrderedJs(jObj, this.options);
    else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) jObj = {
            [this.options.arrayNodeName]: jObj
        };
        return this.j2x(jObj, 0).val;
    }
};
Builder.prototype.j2x = function(jObj, level) {
    let attrStr = "";
    let val = "";
    for(let key in jObj){
        if (typeof jObj[key] === "undefined") ;
        else if (jObj[key] === null) {
            if (key[0] === "?") val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
            else val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) val += this.buildTextValNode(jObj[key], key, "", level);
        else if (typeof jObj[key] !== "object") {
            //premitive type
            const attr = this.isAttribute(key);
            if (attr) attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
            else //tag value
            if (key === this.options.textNodeName) {
                let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
                val += this.replaceEntitiesValue(newval);
            } else val += this.buildTextValNode(jObj[key], key, "", level);
        } else if (Array.isArray(jObj[key])) {
            //repeated nodes
            const arrLen = jObj[key].length;
            let listTagVal = "";
            for(let j = 0; j < arrLen; j++){
                const item = jObj[key][j];
                if (typeof item === "undefined") ;
                else if (item === null) {
                    if (key[0] === "?") val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
                    else val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
                } else if (typeof item === "object") {
                    if (this.options.oneListGroup) listTagVal += this.j2x(item, level + 1).val;
                    else listTagVal += this.processTextOrObjNode(item, key, level);
                } else listTagVal += this.buildTextValNode(item, key, "", level);
            }
            if (this.options.oneListGroup) listTagVal = this.buildObjectNode(listTagVal, key, "", level);
            val += listTagVal;
        } else //nested node
        if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for(let j = 0; j < L; j++)attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
        } else val += this.processTextOrObjNode(jObj[key], key, level);
    }
    return {
        attrStr: attrStr,
        val: val
    };
};
Builder.prototype.buildAttrPairStr = function(attrName, val) {
    val = this.options.attributeValueProcessor(attrName, "" + val);
    val = this.replaceEntitiesValue(val);
    if (this.options.suppressBooleanAttributes && val === "true") return " " + attrName;
    else return " " + attrName + '="' + val + '"';
};
function processTextOrObjNode(object, key, level) {
    const result = this.j2x(object, level + 1);
    if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
    else return this.buildObjectNode(result.val, key, result.attrStr, level);
}
Builder.prototype.buildObjectNode = function(val, key, attrStr, level) {
    if (val === "") {
        if (key[0] === "?") return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
    } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
            piClosingChar = "?";
            tagEndExp = "";
        }
        if (attrStr && val.indexOf("<") === -1) return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val + tagEndExp;
        else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) return this.indentate(level) + `<!--${val}-->` + this.newLine;
        else return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;
    }
};
Builder.prototype.closeTag = function(key) {
    let closeTag = "";
    if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode) closeTag = "/";
    } else if (this.options.suppressEmptyNode) closeTag = "/";
    else closeTag = `></${key}`;
    return closeTag;
};
function buildEmptyObjNode(val, key, attrStr, level) {
    if (val !== "") return this.buildObjectNode(val, key, attrStr, level);
    else {
        if (key[0] === "?") return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
    }
}
Builder.prototype.buildTextValNode = function(val, key, attrStr, level) {
    if (this.options.cdataPropName !== false && key === this.options.cdataPropName) return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
    else if (this.options.commentPropName !== false && key === this.options.commentPropName) return this.indentate(level) + `<!--${val}-->` + this.newLine;
    else if (key[0] === "?") return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
    else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        else return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
    }
};
Builder.prototype.replaceEntitiesValue = function(textValue) {
    if (textValue && textValue.length > 0 && this.options.processEntities) for(let i = 0; i < this.options.entities.length; i++){
        const entity = this.options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
    }
    return textValue;
};
function indentate(level) {
    return this.options.indentBy.repeat(level);
}
function isAttribute(name /*, options*/ ) {
    if (name.startsWith(this.options.attributeNamePrefix)) return name.substr(this.attrPrefixLen);
    else return false;
}
module.exports = Builder;

},{"3632c1de2a08066":"X8GCt"}],"X8GCt":[function(require,module,exports) {
const EOL = "\n";
/**
 * 
 * @param {array} jArray 
 * @param {any} options 
 * @returns 
 */ function toXml(jArray, options) {
    let indentation = "";
    if (options.format && options.indentBy.length > 0) indentation = EOL;
    return arrToStr(jArray, options, "", indentation);
}
function arrToStr(arr, options, jPath, indentation) {
    let xmlStr = "";
    let isPreviousElementTag = false;
    for(let i = 0; i < arr.length; i++){
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0) newJPath = tagName;
        else newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
            let tagText = tagObj[tagName];
            if (!isStopNode(newJPath, options)) {
                tagText = options.tagValueProcessor(tagName, tagText);
                tagText = replaceEntitiesValue(tagText, options);
            }
            if (isPreviousElementTag) xmlStr += indentation;
            xmlStr += tagText;
            isPreviousElementTag = false;
            continue;
        } else if (tagName === options.cdataPropName) {
            if (isPreviousElementTag) xmlStr += indentation;
            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
            isPreviousElementTag = false;
            continue;
        } else if (tagName === options.commentPropName) {
            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
            isPreviousElementTag = true;
            continue;
        } else if (tagName[0] === "?") {
            const attStr = attr_to_str(tagObj[":@"], options);
            const tempInd = tagName === "?xml" ? "" : indentation;
            let piTextNodeName = tagObj[tagName][0][options.textNodeName];
            piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : ""; //remove extra spacing
            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;
            isPreviousElementTag = true;
            continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") newIdentation += options.indentBy;
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
            if (options.suppressUnpairedNode) xmlStr += tagStart + ">";
            else xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) xmlStr += tagStart + "/>";
        else if (tagValue && tagValue.endsWith(">")) xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        else {
            xmlStr += tagStart + ">";
            if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) xmlStr += indentation + options.indentBy + tagValue + indentation;
            else xmlStr += tagValue;
            xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
    }
    return xmlStr;
}
function propName(obj) {
    const keys = Object.keys(obj);
    for(let i = 0; i < keys.length; i++){
        const key = keys[i];
        if (key !== ":@") return key;
    }
}
function attr_to_str(attrMap, options) {
    let attrStr = "";
    if (attrMap && !options.ignoreAttributes) for(let attr in attrMap){
        let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
        attrVal = replaceEntitiesValue(attrVal, options);
        if (attrVal === true && options.suppressBooleanAttributes) attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
        else attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
    }
    return attrStr;
}
function isStopNode(jPath, options) {
    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
    let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
    for(let index in options.stopNodes){
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName) return true;
    }
    return false;
}
function replaceEntitiesValue(textValue, options) {
    if (textValue && textValue.length > 0 && options.processEntities) for(let i = 0; i < options.entities.length; i++){
        const entity = options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
    }
    return textValue;
}
module.exports = toXml;

},{}],"c3vBh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RequestCharged", ()=>RequestCharged);
parcelHelpers.export(exports, "RequestPayer", ()=>RequestPayer);
parcelHelpers.export(exports, "NoSuchUpload", ()=>NoSuchUpload);
parcelHelpers.export(exports, "BucketAccelerateStatus", ()=>BucketAccelerateStatus);
parcelHelpers.export(exports, "Type", ()=>Type);
parcelHelpers.export(exports, "Permission", ()=>Permission);
parcelHelpers.export(exports, "OwnerOverride", ()=>OwnerOverride);
parcelHelpers.export(exports, "ServerSideEncryption", ()=>ServerSideEncryption);
parcelHelpers.export(exports, "ObjectCannedACL", ()=>ObjectCannedACL);
parcelHelpers.export(exports, "ChecksumAlgorithm", ()=>ChecksumAlgorithm);
parcelHelpers.export(exports, "MetadataDirective", ()=>MetadataDirective);
parcelHelpers.export(exports, "ObjectLockLegalHoldStatus", ()=>ObjectLockLegalHoldStatus);
parcelHelpers.export(exports, "ObjectLockMode", ()=>ObjectLockMode);
parcelHelpers.export(exports, "StorageClass", ()=>StorageClass);
parcelHelpers.export(exports, "TaggingDirective", ()=>TaggingDirective);
parcelHelpers.export(exports, "ObjectNotInActiveTierError", ()=>ObjectNotInActiveTierError);
parcelHelpers.export(exports, "BucketAlreadyExists", ()=>BucketAlreadyExists);
parcelHelpers.export(exports, "BucketAlreadyOwnedByYou", ()=>BucketAlreadyOwnedByYou);
parcelHelpers.export(exports, "BucketCannedACL", ()=>BucketCannedACL);
parcelHelpers.export(exports, "BucketLocationConstraint", ()=>BucketLocationConstraint);
parcelHelpers.export(exports, "ObjectOwnership", ()=>ObjectOwnership);
parcelHelpers.export(exports, "AnalyticsFilter", ()=>AnalyticsFilter);
parcelHelpers.export(exports, "AnalyticsS3ExportFileFormat", ()=>AnalyticsS3ExportFileFormat);
parcelHelpers.export(exports, "StorageClassAnalysisSchemaVersion", ()=>StorageClassAnalysisSchemaVersion);
parcelHelpers.export(exports, "IntelligentTieringStatus", ()=>IntelligentTieringStatus);
parcelHelpers.export(exports, "IntelligentTieringAccessTier", ()=>IntelligentTieringAccessTier);
parcelHelpers.export(exports, "InventoryFormat", ()=>InventoryFormat);
parcelHelpers.export(exports, "InventoryIncludedObjectVersions", ()=>InventoryIncludedObjectVersions);
parcelHelpers.export(exports, "InventoryOptionalField", ()=>InventoryOptionalField);
parcelHelpers.export(exports, "InventoryFrequency", ()=>InventoryFrequency);
parcelHelpers.export(exports, "LifecycleRuleFilter", ()=>LifecycleRuleFilter);
parcelHelpers.export(exports, "TransitionStorageClass", ()=>TransitionStorageClass);
parcelHelpers.export(exports, "ExpirationStatus", ()=>ExpirationStatus);
parcelHelpers.export(exports, "BucketLogsPermission", ()=>BucketLogsPermission);
parcelHelpers.export(exports, "MetricsFilter", ()=>MetricsFilter);
parcelHelpers.export(exports, "Event", ()=>Event);
parcelHelpers.export(exports, "FilterRuleName", ()=>FilterRuleName);
parcelHelpers.export(exports, "DeleteMarkerReplicationStatus", ()=>DeleteMarkerReplicationStatus);
parcelHelpers.export(exports, "MetricsStatus", ()=>MetricsStatus);
parcelHelpers.export(exports, "ReplicationTimeStatus", ()=>ReplicationTimeStatus);
parcelHelpers.export(exports, "ExistingObjectReplicationStatus", ()=>ExistingObjectReplicationStatus);
parcelHelpers.export(exports, "ReplicationRuleFilter", ()=>ReplicationRuleFilter);
parcelHelpers.export(exports, "ReplicaModificationsStatus", ()=>ReplicaModificationsStatus);
parcelHelpers.export(exports, "SseKmsEncryptedObjectsStatus", ()=>SseKmsEncryptedObjectsStatus);
parcelHelpers.export(exports, "ReplicationRuleStatus", ()=>ReplicationRuleStatus);
parcelHelpers.export(exports, "Payer", ()=>Payer);
parcelHelpers.export(exports, "MFADeleteStatus", ()=>MFADeleteStatus);
parcelHelpers.export(exports, "BucketVersioningStatus", ()=>BucketVersioningStatus);
parcelHelpers.export(exports, "Protocol", ()=>Protocol);
parcelHelpers.export(exports, "ReplicationStatus", ()=>ReplicationStatus);
parcelHelpers.export(exports, "ChecksumMode", ()=>ChecksumMode);
parcelHelpers.export(exports, "InvalidObjectState", ()=>InvalidObjectState);
parcelHelpers.export(exports, "NoSuchKey", ()=>NoSuchKey);
parcelHelpers.export(exports, "ObjectAttributes", ()=>ObjectAttributes);
parcelHelpers.export(exports, "ObjectLockEnabled", ()=>ObjectLockEnabled);
parcelHelpers.export(exports, "ObjectLockRetentionMode", ()=>ObjectLockRetentionMode);
parcelHelpers.export(exports, "NotFound", ()=>NotFound);
parcelHelpers.export(exports, "ArchiveStatus", ()=>ArchiveStatus);
parcelHelpers.export(exports, "EncodingType", ()=>EncodingType);
parcelHelpers.export(exports, "ObjectStorageClass", ()=>ObjectStorageClass);
parcelHelpers.export(exports, "NoSuchBucket", ()=>NoSuchBucket);
parcelHelpers.export(exports, "ObjectVersionStorageClass", ()=>ObjectVersionStorageClass);
parcelHelpers.export(exports, "MFADelete", ()=>MFADelete);
parcelHelpers.export(exports, "CompleteMultipartUploadOutputFilterSensitiveLog", ()=>CompleteMultipartUploadOutputFilterSensitiveLog);
parcelHelpers.export(exports, "CompleteMultipartUploadRequestFilterSensitiveLog", ()=>CompleteMultipartUploadRequestFilterSensitiveLog);
parcelHelpers.export(exports, "CopyObjectOutputFilterSensitiveLog", ()=>CopyObjectOutputFilterSensitiveLog);
parcelHelpers.export(exports, "CopyObjectRequestFilterSensitiveLog", ()=>CopyObjectRequestFilterSensitiveLog);
parcelHelpers.export(exports, "CreateMultipartUploadOutputFilterSensitiveLog", ()=>CreateMultipartUploadOutputFilterSensitiveLog);
parcelHelpers.export(exports, "CreateMultipartUploadRequestFilterSensitiveLog", ()=>CreateMultipartUploadRequestFilterSensitiveLog);
parcelHelpers.export(exports, "ServerSideEncryptionByDefaultFilterSensitiveLog", ()=>ServerSideEncryptionByDefaultFilterSensitiveLog);
parcelHelpers.export(exports, "ServerSideEncryptionRuleFilterSensitiveLog", ()=>ServerSideEncryptionRuleFilterSensitiveLog);
parcelHelpers.export(exports, "ServerSideEncryptionConfigurationFilterSensitiveLog", ()=>ServerSideEncryptionConfigurationFilterSensitiveLog);
parcelHelpers.export(exports, "GetBucketEncryptionOutputFilterSensitiveLog", ()=>GetBucketEncryptionOutputFilterSensitiveLog);
parcelHelpers.export(exports, "SSEKMSFilterSensitiveLog", ()=>SSEKMSFilterSensitiveLog);
parcelHelpers.export(exports, "InventoryEncryptionFilterSensitiveLog", ()=>InventoryEncryptionFilterSensitiveLog);
parcelHelpers.export(exports, "InventoryS3BucketDestinationFilterSensitiveLog", ()=>InventoryS3BucketDestinationFilterSensitiveLog);
parcelHelpers.export(exports, "InventoryDestinationFilterSensitiveLog", ()=>InventoryDestinationFilterSensitiveLog);
parcelHelpers.export(exports, "InventoryConfigurationFilterSensitiveLog", ()=>InventoryConfigurationFilterSensitiveLog);
parcelHelpers.export(exports, "GetBucketInventoryConfigurationOutputFilterSensitiveLog", ()=>GetBucketInventoryConfigurationOutputFilterSensitiveLog);
parcelHelpers.export(exports, "GetObjectOutputFilterSensitiveLog", ()=>GetObjectOutputFilterSensitiveLog);
parcelHelpers.export(exports, "GetObjectRequestFilterSensitiveLog", ()=>GetObjectRequestFilterSensitiveLog);
parcelHelpers.export(exports, "GetObjectAttributesRequestFilterSensitiveLog", ()=>GetObjectAttributesRequestFilterSensitiveLog);
parcelHelpers.export(exports, "GetObjectTorrentOutputFilterSensitiveLog", ()=>GetObjectTorrentOutputFilterSensitiveLog);
parcelHelpers.export(exports, "HeadObjectOutputFilterSensitiveLog", ()=>HeadObjectOutputFilterSensitiveLog);
parcelHelpers.export(exports, "HeadObjectRequestFilterSensitiveLog", ()=>HeadObjectRequestFilterSensitiveLog);
parcelHelpers.export(exports, "ListBucketInventoryConfigurationsOutputFilterSensitiveLog", ()=>ListBucketInventoryConfigurationsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ListPartsRequestFilterSensitiveLog", ()=>ListPartsRequestFilterSensitiveLog);
parcelHelpers.export(exports, "PutBucketEncryptionRequestFilterSensitiveLog", ()=>PutBucketEncryptionRequestFilterSensitiveLog);
parcelHelpers.export(exports, "PutBucketInventoryConfigurationRequestFilterSensitiveLog", ()=>PutBucketInventoryConfigurationRequestFilterSensitiveLog);
parcelHelpers.export(exports, "PutObjectOutputFilterSensitiveLog", ()=>PutObjectOutputFilterSensitiveLog);
parcelHelpers.export(exports, "PutObjectRequestFilterSensitiveLog", ()=>PutObjectRequestFilterSensitiveLog);
var _smithyClient = require("@aws-sdk/smithy-client");
var _s3ServiceException = require("./S3ServiceException");
const RequestCharged = {
    requester: "requester"
};
const RequestPayer = {
    requester: "requester"
};
class NoSuchUpload extends (0, _s3ServiceException.S3ServiceException) {
    constructor(opts){
        super({
            name: "NoSuchUpload",
            $fault: "client",
            ...opts
        });
        this.name = "NoSuchUpload";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchUpload.prototype);
    }
}
const BucketAccelerateStatus = {
    Enabled: "Enabled",
    Suspended: "Suspended"
};
const Type = {
    AmazonCustomerByEmail: "AmazonCustomerByEmail",
    CanonicalUser: "CanonicalUser",
    Group: "Group"
};
const Permission = {
    FULL_CONTROL: "FULL_CONTROL",
    READ: "READ",
    READ_ACP: "READ_ACP",
    WRITE: "WRITE",
    WRITE_ACP: "WRITE_ACP"
};
const OwnerOverride = {
    Destination: "Destination"
};
const ServerSideEncryption = {
    AES256: "AES256",
    aws_kms: "aws:kms"
};
const ObjectCannedACL = {
    authenticated_read: "authenticated-read",
    aws_exec_read: "aws-exec-read",
    bucket_owner_full_control: "bucket-owner-full-control",
    bucket_owner_read: "bucket-owner-read",
    private: "private",
    public_read: "public-read",
    public_read_write: "public-read-write"
};
const ChecksumAlgorithm = {
    CRC32: "CRC32",
    CRC32C: "CRC32C",
    SHA1: "SHA1",
    SHA256: "SHA256"
};
const MetadataDirective = {
    COPY: "COPY",
    REPLACE: "REPLACE"
};
const ObjectLockLegalHoldStatus = {
    OFF: "OFF",
    ON: "ON"
};
const ObjectLockMode = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE"
};
const StorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    OUTPOSTS: "OUTPOSTS",
    REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
    SNOW: "SNOW",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA"
};
const TaggingDirective = {
    COPY: "COPY",
    REPLACE: "REPLACE"
};
class ObjectNotInActiveTierError extends (0, _s3ServiceException.S3ServiceException) {
    constructor(opts){
        super({
            name: "ObjectNotInActiveTierError",
            $fault: "client",
            ...opts
        });
        this.name = "ObjectNotInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, ObjectNotInActiveTierError.prototype);
    }
}
class BucketAlreadyExists extends (0, _s3ServiceException.S3ServiceException) {
    constructor(opts){
        super({
            name: "BucketAlreadyExists",
            $fault: "client",
            ...opts
        });
        this.name = "BucketAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketAlreadyExists.prototype);
    }
}
class BucketAlreadyOwnedByYou extends (0, _s3ServiceException.S3ServiceException) {
    constructor(opts){
        super({
            name: "BucketAlreadyOwnedByYou",
            $fault: "client",
            ...opts
        });
        this.name = "BucketAlreadyOwnedByYou";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketAlreadyOwnedByYou.prototype);
    }
}
const BucketCannedACL = {
    authenticated_read: "authenticated-read",
    private: "private",
    public_read: "public-read",
    public_read_write: "public-read-write"
};
const BucketLocationConstraint = {
    EU: "EU",
    af_south_1: "af-south-1",
    ap_east_1: "ap-east-1",
    ap_northeast_1: "ap-northeast-1",
    ap_northeast_2: "ap-northeast-2",
    ap_northeast_3: "ap-northeast-3",
    ap_south_1: "ap-south-1",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    ap_southeast_3: "ap-southeast-3",
    ca_central_1: "ca-central-1",
    cn_north_1: "cn-north-1",
    cn_northwest_1: "cn-northwest-1",
    eu_central_1: "eu-central-1",
    eu_north_1: "eu-north-1",
    eu_south_1: "eu-south-1",
    eu_west_1: "eu-west-1",
    eu_west_2: "eu-west-2",
    eu_west_3: "eu-west-3",
    me_south_1: "me-south-1",
    sa_east_1: "sa-east-1",
    us_east_2: "us-east-2",
    us_gov_east_1: "us-gov-east-1",
    us_gov_west_1: "us-gov-west-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2"
};
const ObjectOwnership = {
    BucketOwnerEnforced: "BucketOwnerEnforced",
    BucketOwnerPreferred: "BucketOwnerPreferred",
    ObjectWriter: "ObjectWriter"
};
var AnalyticsFilter;
(function(AnalyticsFilter) {
    AnalyticsFilter.visit = (value, visitor)=>{
        if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined) return visitor.Tag(value.Tag);
        if (value.And !== undefined) return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AnalyticsFilter || (AnalyticsFilter = {}));
const AnalyticsS3ExportFileFormat = {
    CSV: "CSV"
};
const StorageClassAnalysisSchemaVersion = {
    V_1: "V_1"
};
const IntelligentTieringStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
const IntelligentTieringAccessTier = {
    ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
    DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
};
const InventoryFormat = {
    CSV: "CSV",
    ORC: "ORC",
    Parquet: "Parquet"
};
const InventoryIncludedObjectVersions = {
    All: "All",
    Current: "Current"
};
const InventoryOptionalField = {
    BucketKeyStatus: "BucketKeyStatus",
    ChecksumAlgorithm: "ChecksumAlgorithm",
    ETag: "ETag",
    EncryptionStatus: "EncryptionStatus",
    IntelligentTieringAccessTier: "IntelligentTieringAccessTier",
    IsMultipartUploaded: "IsMultipartUploaded",
    LastModifiedDate: "LastModifiedDate",
    ObjectLockLegalHoldStatus: "ObjectLockLegalHoldStatus",
    ObjectLockMode: "ObjectLockMode",
    ObjectLockRetainUntilDate: "ObjectLockRetainUntilDate",
    ReplicationStatus: "ReplicationStatus",
    Size: "Size",
    StorageClass: "StorageClass"
};
const InventoryFrequency = {
    Daily: "Daily",
    Weekly: "Weekly"
};
var LifecycleRuleFilter;
(function(LifecycleRuleFilter) {
    LifecycleRuleFilter.visit = (value, visitor)=>{
        if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined) return visitor.Tag(value.Tag);
        if (value.ObjectSizeGreaterThan !== undefined) return visitor.ObjectSizeGreaterThan(value.ObjectSizeGreaterThan);
        if (value.ObjectSizeLessThan !== undefined) return visitor.ObjectSizeLessThan(value.ObjectSizeLessThan);
        if (value.And !== undefined) return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(LifecycleRuleFilter || (LifecycleRuleFilter = {}));
const TransitionStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    STANDARD_IA: "STANDARD_IA"
};
const ExpirationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
const BucketLogsPermission = {
    FULL_CONTROL: "FULL_CONTROL",
    READ: "READ",
    WRITE: "WRITE"
};
var MetricsFilter;
(function(MetricsFilter) {
    MetricsFilter.visit = (value, visitor)=>{
        if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined) return visitor.Tag(value.Tag);
        if (value.AccessPointArn !== undefined) return visitor.AccessPointArn(value.AccessPointArn);
        if (value.And !== undefined) return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(MetricsFilter || (MetricsFilter = {}));
const Event = {
    s3_IntelligentTiering: "s3:IntelligentTiering",
    s3_LifecycleExpiration_: "s3:LifecycleExpiration:*",
    s3_LifecycleExpiration_Delete: "s3:LifecycleExpiration:Delete",
    s3_LifecycleExpiration_DeleteMarkerCreated: "s3:LifecycleExpiration:DeleteMarkerCreated",
    s3_LifecycleTransition: "s3:LifecycleTransition",
    s3_ObjectAcl_Put: "s3:ObjectAcl:Put",
    s3_ObjectCreated_: "s3:ObjectCreated:*",
    s3_ObjectCreated_CompleteMultipartUpload: "s3:ObjectCreated:CompleteMultipartUpload",
    s3_ObjectCreated_Copy: "s3:ObjectCreated:Copy",
    s3_ObjectCreated_Post: "s3:ObjectCreated:Post",
    s3_ObjectCreated_Put: "s3:ObjectCreated:Put",
    s3_ObjectRemoved_: "s3:ObjectRemoved:*",
    s3_ObjectRemoved_Delete: "s3:ObjectRemoved:Delete",
    s3_ObjectRemoved_DeleteMarkerCreated: "s3:ObjectRemoved:DeleteMarkerCreated",
    s3_ObjectRestore_: "s3:ObjectRestore:*",
    s3_ObjectRestore_Completed: "s3:ObjectRestore:Completed",
    s3_ObjectRestore_Delete: "s3:ObjectRestore:Delete",
    s3_ObjectRestore_Post: "s3:ObjectRestore:Post",
    s3_ObjectTagging_: "s3:ObjectTagging:*",
    s3_ObjectTagging_Delete: "s3:ObjectTagging:Delete",
    s3_ObjectTagging_Put: "s3:ObjectTagging:Put",
    s3_ReducedRedundancyLostObject: "s3:ReducedRedundancyLostObject",
    s3_Replication_: "s3:Replication:*",
    s3_Replication_OperationFailedReplication: "s3:Replication:OperationFailedReplication",
    s3_Replication_OperationMissedThreshold: "s3:Replication:OperationMissedThreshold",
    s3_Replication_OperationNotTracked: "s3:Replication:OperationNotTracked",
    s3_Replication_OperationReplicatedAfterThreshold: "s3:Replication:OperationReplicatedAfterThreshold"
};
const FilterRuleName = {
    prefix: "prefix",
    suffix: "suffix"
};
const DeleteMarkerReplicationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
const MetricsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
const ReplicationTimeStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
const ExistingObjectReplicationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
var ReplicationRuleFilter;
(function(ReplicationRuleFilter) {
    ReplicationRuleFilter.visit = (value, visitor)=>{
        if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined) return visitor.Tag(value.Tag);
        if (value.And !== undefined) return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ReplicationRuleFilter || (ReplicationRuleFilter = {}));
const ReplicaModificationsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
const SseKmsEncryptedObjectsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
const ReplicationRuleStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
const Payer = {
    BucketOwner: "BucketOwner",
    Requester: "Requester"
};
const MFADeleteStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
const BucketVersioningStatus = {
    Enabled: "Enabled",
    Suspended: "Suspended"
};
const Protocol = {
    http: "http",
    https: "https"
};
const ReplicationStatus = {
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    PENDING: "PENDING",
    REPLICA: "REPLICA"
};
const ChecksumMode = {
    ENABLED: "ENABLED"
};
class InvalidObjectState extends (0, _s3ServiceException.S3ServiceException) {
    constructor(opts){
        super({
            name: "InvalidObjectState",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidObjectState";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidObjectState.prototype);
        this.StorageClass = opts.StorageClass;
        this.AccessTier = opts.AccessTier;
    }
}
class NoSuchKey extends (0, _s3ServiceException.S3ServiceException) {
    constructor(opts){
        super({
            name: "NoSuchKey",
            $fault: "client",
            ...opts
        });
        this.name = "NoSuchKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchKey.prototype);
    }
}
const ObjectAttributes = {
    CHECKSUM: "Checksum",
    ETAG: "ETag",
    OBJECT_PARTS: "ObjectParts",
    OBJECT_SIZE: "ObjectSize",
    STORAGE_CLASS: "StorageClass"
};
const ObjectLockEnabled = {
    Enabled: "Enabled"
};
const ObjectLockRetentionMode = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE"
};
class NotFound extends (0, _s3ServiceException.S3ServiceException) {
    constructor(opts){
        super({
            name: "NotFound",
            $fault: "client",
            ...opts
        });
        this.name = "NotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFound.prototype);
    }
}
const ArchiveStatus = {
    ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
    DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
};
const EncodingType = {
    url: "url"
};
const ObjectStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    OUTPOSTS: "OUTPOSTS",
    REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
    SNOW: "SNOW",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA"
};
class NoSuchBucket extends (0, _s3ServiceException.S3ServiceException) {
    constructor(opts){
        super({
            name: "NoSuchBucket",
            $fault: "client",
            ...opts
        });
        this.name = "NoSuchBucket";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchBucket.prototype);
    }
}
const ObjectVersionStorageClass = {
    STANDARD: "STANDARD"
};
const MFADelete = {
    Disabled: "Disabled",
    Enabled: "Enabled"
};
const CompleteMultipartUploadOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const CompleteMultipartUploadRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const CopyObjectOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const CopyObjectRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.CopySourceSSECustomerKey && {
            CopySourceSSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const CreateMultipartUploadOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const CreateMultipartUploadRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const ServerSideEncryptionByDefaultFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.KMSMasterKeyID && {
            KMSMasterKeyID: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const ServerSideEncryptionRuleFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.ApplyServerSideEncryptionByDefault && {
            ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(obj.ApplyServerSideEncryptionByDefault)
        }
    });
const ServerSideEncryptionConfigurationFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Rules && {
            Rules: obj.Rules.map((item)=>ServerSideEncryptionRuleFilterSensitiveLog(item))
        }
    });
const GetBucketEncryptionOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.ServerSideEncryptionConfiguration && {
            ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
        }
    });
const SSEKMSFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.KeyId && {
            KeyId: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const InventoryEncryptionFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSEKMS && {
            SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS)
        }
    });
const InventoryS3BucketDestinationFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Encryption && {
            Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption)
        }
    });
const InventoryDestinationFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.S3BucketDestination && {
            S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination)
        }
    });
const InventoryConfigurationFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Destination && {
            Destination: InventoryDestinationFilterSensitiveLog(obj.Destination)
        }
    });
const GetBucketInventoryConfigurationOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.InventoryConfiguration && {
            InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
        }
    });
const GetObjectOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const GetObjectRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const GetObjectAttributesRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const GetObjectTorrentOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const HeadObjectOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const HeadObjectRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const ListBucketInventoryConfigurationsOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.InventoryConfigurationList && {
            InventoryConfigurationList: obj.InventoryConfigurationList.map((item)=>InventoryConfigurationFilterSensitiveLog(item))
        }
    });
const ListPartsRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const PutBucketEncryptionRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.ServerSideEncryptionConfiguration && {
            ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
        }
    });
const PutBucketInventoryConfigurationRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.InventoryConfiguration && {
            InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
        }
    });
const PutObjectOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const PutObjectRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        }
    });

},{"@aws-sdk/smithy-client":"ats0l","./S3ServiceException":"g5NPd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g5NPd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__ServiceException", ()=>(0, _smithyClient.ServiceException));
parcelHelpers.export(exports, "S3ServiceException", ()=>S3ServiceException);
var _smithyClient = require("@aws-sdk/smithy-client");
class S3ServiceException extends (0, _smithyClient.ServiceException) {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, S3ServiceException.prototype);
    }
}

},{"@aws-sdk/smithy-client":"ats0l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iOWbb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ObjectAlreadyInActiveTierError", ()=>ObjectAlreadyInActiveTierError);
parcelHelpers.export(exports, "Tier", ()=>Tier);
parcelHelpers.export(exports, "ExpressionType", ()=>ExpressionType);
parcelHelpers.export(exports, "CompressionType", ()=>CompressionType);
parcelHelpers.export(exports, "FileHeaderInfo", ()=>FileHeaderInfo);
parcelHelpers.export(exports, "JSONType", ()=>JSONType);
parcelHelpers.export(exports, "QuoteFields", ()=>QuoteFields);
parcelHelpers.export(exports, "RestoreRequestType", ()=>RestoreRequestType);
parcelHelpers.export(exports, "SelectObjectContentEventStream", ()=>SelectObjectContentEventStream);
parcelHelpers.export(exports, "EncryptionFilterSensitiveLog", ()=>EncryptionFilterSensitiveLog);
parcelHelpers.export(exports, "S3LocationFilterSensitiveLog", ()=>S3LocationFilterSensitiveLog);
parcelHelpers.export(exports, "OutputLocationFilterSensitiveLog", ()=>OutputLocationFilterSensitiveLog);
parcelHelpers.export(exports, "RestoreRequestFilterSensitiveLog", ()=>RestoreRequestFilterSensitiveLog);
parcelHelpers.export(exports, "RestoreObjectRequestFilterSensitiveLog", ()=>RestoreObjectRequestFilterSensitiveLog);
parcelHelpers.export(exports, "SelectObjectContentEventStreamFilterSensitiveLog", ()=>SelectObjectContentEventStreamFilterSensitiveLog);
parcelHelpers.export(exports, "SelectObjectContentOutputFilterSensitiveLog", ()=>SelectObjectContentOutputFilterSensitiveLog);
parcelHelpers.export(exports, "SelectObjectContentRequestFilterSensitiveLog", ()=>SelectObjectContentRequestFilterSensitiveLog);
parcelHelpers.export(exports, "UploadPartOutputFilterSensitiveLog", ()=>UploadPartOutputFilterSensitiveLog);
parcelHelpers.export(exports, "UploadPartRequestFilterSensitiveLog", ()=>UploadPartRequestFilterSensitiveLog);
parcelHelpers.export(exports, "UploadPartCopyOutputFilterSensitiveLog", ()=>UploadPartCopyOutputFilterSensitiveLog);
parcelHelpers.export(exports, "UploadPartCopyRequestFilterSensitiveLog", ()=>UploadPartCopyRequestFilterSensitiveLog);
parcelHelpers.export(exports, "WriteGetObjectResponseRequestFilterSensitiveLog", ()=>WriteGetObjectResponseRequestFilterSensitiveLog);
var _smithyClient = require("@aws-sdk/smithy-client");
var _s3ServiceException = require("./S3ServiceException");
class ObjectAlreadyInActiveTierError extends (0, _s3ServiceException.S3ServiceException) {
    constructor(opts){
        super({
            name: "ObjectAlreadyInActiveTierError",
            $fault: "client",
            ...opts
        });
        this.name = "ObjectAlreadyInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, ObjectAlreadyInActiveTierError.prototype);
    }
}
const Tier = {
    Bulk: "Bulk",
    Expedited: "Expedited",
    Standard: "Standard"
};
const ExpressionType = {
    SQL: "SQL"
};
const CompressionType = {
    BZIP2: "BZIP2",
    GZIP: "GZIP",
    NONE: "NONE"
};
const FileHeaderInfo = {
    IGNORE: "IGNORE",
    NONE: "NONE",
    USE: "USE"
};
const JSONType = {
    DOCUMENT: "DOCUMENT",
    LINES: "LINES"
};
const QuoteFields = {
    ALWAYS: "ALWAYS",
    ASNEEDED: "ASNEEDED"
};
const RestoreRequestType = {
    SELECT: "SELECT"
};
var SelectObjectContentEventStream;
(function(SelectObjectContentEventStream) {
    SelectObjectContentEventStream.visit = (value, visitor)=>{
        if (value.Records !== undefined) return visitor.Records(value.Records);
        if (value.Stats !== undefined) return visitor.Stats(value.Stats);
        if (value.Progress !== undefined) return visitor.Progress(value.Progress);
        if (value.Cont !== undefined) return visitor.Cont(value.Cont);
        if (value.End !== undefined) return visitor.End(value.End);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
const EncryptionFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.KMSKeyId && {
            KMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const S3LocationFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Encryption && {
            Encryption: EncryptionFilterSensitiveLog(obj.Encryption)
        }
    });
const OutputLocationFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.S3 && {
            S3: S3LocationFilterSensitiveLog(obj.S3)
        }
    });
const RestoreRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.OutputLocation && {
            OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation)
        }
    });
const RestoreObjectRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.RestoreRequest && {
            RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest)
        }
    });
const SelectObjectContentEventStreamFilterSensitiveLog = (obj)=>{
    if (obj.Records !== undefined) return {
        Records: obj.Records
    };
    if (obj.Stats !== undefined) return {
        Stats: obj.Stats
    };
    if (obj.Progress !== undefined) return {
        Progress: obj.Progress
    };
    if (obj.Cont !== undefined) return {
        Cont: obj.Cont
    };
    if (obj.End !== undefined) return {
        End: obj.End
    };
    if (obj.$unknown !== undefined) return {
        [obj.$unknown[0]]: "UNKNOWN"
    };
};
const SelectObjectContentOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Payload && {
            Payload: "STREAMING_CONTENT"
        }
    });
const SelectObjectContentRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const UploadPartOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const UploadPartRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const UploadPartCopyOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const UploadPartCopyRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        },
        ...obj.CopySourceSSECustomerKey && {
            CopySourceSSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }
    });
const WriteGetObjectResponseRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }
    });

},{"@aws-sdk/smithy-client":"ats0l","./S3ServiceException":"g5NPd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"almpH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "CompleteMultipartUploadCommand", ()=>CompleteMultipartUploadCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSdkS3 = require("@aws-sdk/middleware-sdk-s3");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class CompleteMultipartUploadCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, CompleteMultipartUploadCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSdkS3.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "CompleteMultipartUploadCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.CompleteMultipartUploadRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.CompleteMultipartUploadOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_CompleteMultipartUploadCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_CompleteMultipartUploadCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-sdk-s3":"lvLFs","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5N1b6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ssecMiddleware", ()=>ssecMiddleware);
parcelHelpers.export(exports, "ssecMiddlewareOptions", ()=>ssecMiddlewareOptions);
parcelHelpers.export(exports, "getSsecPlugin", ()=>getSsecPlugin);
function ssecMiddleware(options) {
    return (next)=>async (args)=>{
            let input = {
                ...args.input
            };
            const properties = [
                {
                    target: "SSECustomerKey",
                    hash: "SSECustomerKeyMD5"
                },
                {
                    target: "CopySourceSSECustomerKey",
                    hash: "CopySourceSSECustomerKeyMD5"
                }
            ];
            for (const prop of properties){
                const value = input[prop.target];
                if (value) {
                    const valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === "string" ? options.utf8Decoder(value) : new Uint8Array(value);
                    const encoded = options.base64Encoder(valueView);
                    const hash = new options.md5();
                    hash.update(valueView);
                    input = {
                        ...input,
                        [prop.target]: encoded,
                        [prop.hash]: options.base64Encoder(await hash.digest())
                    };
                }
            }
            return next({
                ...args,
                input
            });
        };
}
const ssecMiddlewareOptions = {
    name: "ssecMiddleware",
    step: "initialize",
    tags: [
        "SSE"
    ],
    override: true
};
const getSsecPlugin = (config)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);
        }
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3CRz3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "CopyObjectCommand", ()=>CopyObjectCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSdkS3 = require("@aws-sdk/middleware-sdk-s3");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class CopyObjectCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, CopyObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSdkS3.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "CopyObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.CopyObjectRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.CopyObjectOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_CopyObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_CopyObjectCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-sdk-s3":"lvLFs","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6goC4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "CreateBucketCommand", ()=>CreateBucketCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareLocationConstraint = require("@aws-sdk/middleware-location-constraint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class CreateBucketCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            DisableAccessPoints: {
                type: "staticContextParams",
                value: true
            },
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, CreateBucketCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareLocationConstraint.getLocationConstraintPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "CreateBucketCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_CreateBucketCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_CreateBucketCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-location-constraint":"j3047","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j3047":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "locationConstraintMiddleware", ()=>locationConstraintMiddleware);
parcelHelpers.export(exports, "locationConstraintMiddlewareOptions", ()=>locationConstraintMiddlewareOptions);
parcelHelpers.export(exports, "getLocationConstraintPlugin", ()=>getLocationConstraintPlugin);
function locationConstraintMiddleware(options) {
    return (next)=>async (args)=>{
            const { CreateBucketConfiguration  } = args.input;
            const region = await options.region();
            if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) args = {
                ...args,
                input: {
                    ...args.input,
                    CreateBucketConfiguration: region === "us-east-1" ? undefined : {
                        LocationConstraint: region
                    }
                }
            };
            return next(args);
        };
}
const locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: [
        "LOCATION_CONSTRAINT",
        "CREATE_BUCKET_CONFIGURATION"
    ],
    name: "locationConstraintMiddleware",
    override: true
};
const getLocationConstraintPlugin = (config)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);
        }
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8uRl8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "CreateMultipartUploadCommand", ()=>CreateMultipartUploadCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class CreateMultipartUploadCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, CreateMultipartUploadCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "CreateMultipartUploadCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.CreateMultipartUploadRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.CreateMultipartUploadOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_CreateMultipartUploadCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_CreateMultipartUploadCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"faHXV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketAnalyticsConfigurationCommand", ()=>DeleteBucketAnalyticsConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketAnalyticsConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketAnalyticsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketAnalyticsConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jn0Fw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketCommand", ()=>DeleteBucketCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1xcuV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketCorsCommand", ()=>DeleteBucketCorsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketCorsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketCorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketCorsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketCorsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketCorsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eKf2i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketEncryptionCommand", ()=>DeleteBucketEncryptionCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketEncryptionCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketEncryptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketEncryptionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketEncryptionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketEncryptionCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCldy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketIntelligentTieringConfigurationCommand", ()=>DeleteBucketIntelligentTieringConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketIntelligentTieringConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketIntelligentTieringConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketIntelligentTieringConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"860EX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketInventoryConfigurationCommand", ()=>DeleteBucketInventoryConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketInventoryConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketInventoryConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketInventoryConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f9K9o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketLifecycleCommand", ()=>DeleteBucketLifecycleCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketLifecycleCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketLifecycleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketLifecycleCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketLifecycleCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketLifecycleCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cMib0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketMetricsConfigurationCommand", ()=>DeleteBucketMetricsConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketMetricsConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketMetricsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketMetricsConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d7qRW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketOwnershipControlsCommand", ()=>DeleteBucketOwnershipControlsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketOwnershipControlsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketOwnershipControlsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketOwnershipControlsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fGSax":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketPolicyCommand", ()=>DeleteBucketPolicyCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketPolicyCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketPolicyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketPolicyCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketPolicyCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4U0k2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketReplicationCommand", ()=>DeleteBucketReplicationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketReplicationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketReplicationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketReplicationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketReplicationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6PWcY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketTaggingCommand", ()=>DeleteBucketTaggingCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketTaggingCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketTaggingCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7rdpL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteBucketWebsiteCommand", ()=>DeleteBucketWebsiteCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteBucketWebsiteCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBucketWebsiteCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketWebsiteCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteBucketWebsiteCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteBucketWebsiteCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1SZLs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteObjectCommand", ()=>DeleteObjectCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteObjectCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteObjectCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteObjectCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Xs5S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteObjectsCommand", ()=>DeleteObjectsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteObjectsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteObjectsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteObjectsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteObjectsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dOFuw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _flexibleChecksumsMiddleware = require("./flexibleChecksumsMiddleware");
parcelHelpers.exportAll(_flexibleChecksumsMiddleware, exports);
var _getFlexibleChecksumsPlugin = require("./getFlexibleChecksumsPlugin");
parcelHelpers.exportAll(_getFlexibleChecksumsPlugin, exports);

},{"./constants":"jC3he","./flexibleChecksumsMiddleware":"bkRpy","./getFlexibleChecksumsPlugin":"bgOp9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jC3he":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ChecksumAlgorithm", ()=>ChecksumAlgorithm);
parcelHelpers.export(exports, "ChecksumLocation", ()=>ChecksumLocation);
var ChecksumAlgorithm;
(function(ChecksumAlgorithm) {
    ChecksumAlgorithm["MD5"] = "MD5";
    ChecksumAlgorithm["CRC32"] = "CRC32";
    ChecksumAlgorithm["CRC32C"] = "CRC32C";
    ChecksumAlgorithm["SHA1"] = "SHA1";
    ChecksumAlgorithm["SHA256"] = "SHA256";
})(ChecksumAlgorithm || (ChecksumAlgorithm = {}));
var ChecksumLocation;
(function(ChecksumLocation) {
    ChecksumLocation["HEADER"] = "header";
    ChecksumLocation["TRAILER"] = "trailer";
})(ChecksumLocation || (ChecksumLocation = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bkRpy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flexibleChecksumsMiddleware", ()=>flexibleChecksumsMiddleware);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _getChecksumAlgorithmForRequest = require("./getChecksumAlgorithmForRequest");
var _getChecksumLocationName = require("./getChecksumLocationName");
var _hasHeader = require("./hasHeader");
var _isStreaming = require("./isStreaming");
var _selectChecksumAlgorithmFunction = require("./selectChecksumAlgorithmFunction");
var _stringHasher = require("./stringHasher");
var _validateChecksumFromResponse = require("./validateChecksumFromResponse");
const flexibleChecksumsMiddleware = (config, middlewareConfig)=>(next)=>async (args)=>{
            if (!(0, _protocolHttp.HttpRequest).isInstance(args.request)) return next(args);
            const { request  } = args;
            const { body: requestBody , headers  } = request;
            const { base64Encoder , streamHasher  } = config;
            const { input , requestChecksumRequired , requestAlgorithmMember  } = middlewareConfig;
            const checksumAlgorithm = (0, _getChecksumAlgorithmForRequest.getChecksumAlgorithmForRequest)(input, {
                requestChecksumRequired,
                requestAlgorithmMember
            });
            let updatedBody = requestBody;
            let updatedHeaders = headers;
            if (checksumAlgorithm) {
                const checksumLocationName = (0, _getChecksumLocationName.getChecksumLocationName)(checksumAlgorithm);
                const checksumAlgorithmFn = (0, _selectChecksumAlgorithmFunction.selectChecksumAlgorithmFunction)(checksumAlgorithm, config);
                if ((0, _isStreaming.isStreaming)(requestBody)) {
                    const { getAwsChunkedEncodingStream , bodyLengthChecker  } = config;
                    updatedBody = getAwsChunkedEncodingStream(requestBody, {
                        base64Encoder,
                        bodyLengthChecker,
                        checksumLocationName,
                        checksumAlgorithmFn,
                        streamHasher
                    });
                    updatedHeaders = {
                        ...headers,
                        "content-encoding": headers["content-encoding"] ? `${headers["content-encoding"]},aws-chunked` : "aws-chunked",
                        "transfer-encoding": "chunked",
                        "x-amz-decoded-content-length": headers["content-length"],
                        "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
                        "x-amz-trailer": checksumLocationName
                    };
                    delete updatedHeaders["content-length"];
                } else if (!(0, _hasHeader.hasHeader)(checksumLocationName, headers)) {
                    const rawChecksum = await (0, _stringHasher.stringHasher)(checksumAlgorithmFn, requestBody);
                    updatedHeaders = {
                        ...headers,
                        [checksumLocationName]: base64Encoder(rawChecksum)
                    };
                }
            }
            const result = await next({
                ...args,
                request: {
                    ...request,
                    headers: updatedHeaders,
                    body: updatedBody
                }
            });
            const { requestValidationModeMember , responseAlgorithms  } = middlewareConfig;
            if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") (0, _validateChecksumFromResponse.validateChecksumFromResponse)(result.response, {
                config,
                responseAlgorithms
            });
            return result;
        };

},{"@aws-sdk/protocol-http":"lkWtc","./getChecksumAlgorithmForRequest":"4y38X","./getChecksumLocationName":"7bOJq","./hasHeader":"kPDnT","./isStreaming":"jEk8T","./selectChecksumAlgorithmFunction":"99xWC","./stringHasher":"4deGG","./validateChecksumFromResponse":"j75Mc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4y38X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getChecksumAlgorithmForRequest", ()=>getChecksumAlgorithmForRequest);
var _constants = require("./constants");
var _types = require("./types");
const getChecksumAlgorithmForRequest = (input, { requestChecksumRequired , requestAlgorithmMember  })=>{
    if (!requestAlgorithmMember || !input[requestAlgorithmMember]) return requestChecksumRequired ? (0, _constants.ChecksumAlgorithm).MD5 : undefined;
    const checksumAlgorithm = input[requestAlgorithmMember];
    if (!(0, _types.CLIENT_SUPPORTED_ALGORITHMS).includes(checksumAlgorithm)) throw new Error(`The checksum algorithm "${checksumAlgorithm}" is not supported by the client.` + ` Select one of ${0, _types.CLIENT_SUPPORTED_ALGORITHMS}.`);
    return checksumAlgorithm;
};

},{"./constants":"jC3he","./types":"3dcWr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3dcWr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CLIENT_SUPPORTED_ALGORITHMS", ()=>CLIENT_SUPPORTED_ALGORITHMS);
parcelHelpers.export(exports, "PRIORITY_ORDER_ALGORITHMS", ()=>PRIORITY_ORDER_ALGORITHMS);
var _constants = require("./constants");
const CLIENT_SUPPORTED_ALGORITHMS = [
    (0, _constants.ChecksumAlgorithm).CRC32,
    (0, _constants.ChecksumAlgorithm).CRC32C,
    (0, _constants.ChecksumAlgorithm).SHA1,
    (0, _constants.ChecksumAlgorithm).SHA256
];
const PRIORITY_ORDER_ALGORITHMS = [
    (0, _constants.ChecksumAlgorithm).CRC32,
    (0, _constants.ChecksumAlgorithm).CRC32C,
    (0, _constants.ChecksumAlgorithm).SHA1,
    (0, _constants.ChecksumAlgorithm).SHA256
];

},{"./constants":"jC3he","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7bOJq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getChecksumLocationName", ()=>getChecksumLocationName);
var _constants = require("./constants");
const getChecksumLocationName = (algorithm)=>algorithm === (0, _constants.ChecksumAlgorithm).MD5 ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`;

},{"./constants":"jC3he","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kPDnT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasHeader", ()=>hasHeader);
const hasHeader = (header, headers)=>{
    const soughtHeader = header.toLowerCase();
    for (const headerName of Object.keys(headers)){
        if (soughtHeader === headerName.toLowerCase()) return true;
    }
    return false;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jEk8T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isStreaming", ()=>isStreaming);
var _isArrayBuffer = require("@aws-sdk/is-array-buffer");
const isStreaming = (body)=>body !== undefined && typeof body !== "string" && !ArrayBuffer.isView(body) && !(0, _isArrayBuffer.isArrayBuffer)(body);

},{"@aws-sdk/is-array-buffer":"9QzrT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99xWC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "selectChecksumAlgorithmFunction", ()=>selectChecksumAlgorithmFunction);
var _crc32 = require("@aws-crypto/crc32");
var _crc32C = require("@aws-crypto/crc32c");
var _constants = require("./constants");
const selectChecksumAlgorithmFunction = (checksumAlgorithm, config)=>({
        [(0, _constants.ChecksumAlgorithm).MD5]: config.md5,
        [(0, _constants.ChecksumAlgorithm).CRC32]: (0, _crc32.AwsCrc32),
        [(0, _constants.ChecksumAlgorithm).CRC32C]: (0, _crc32C.AwsCrc32c),
        [(0, _constants.ChecksumAlgorithm).SHA1]: config.sha1,
        [(0, _constants.ChecksumAlgorithm).SHA256]: config.sha256
    })[checksumAlgorithm];

},{"@aws-crypto/crc32":"eJWDd","@aws-crypto/crc32c":"hP2RS","./constants":"jC3he","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hP2RS":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AwsCrc32c = exports.Crc32c = exports.crc32c = void 0;
var tslib_1 = require("334f8e4578e64277");
var util_1 = require("b781b5f9d6920ee0");
function crc32c(data) {
    return new Crc32c().update(data).digest();
}
exports.crc32c = crc32c;
var Crc32c = /** @class */ function() {
    function Crc32c() {
        this.checksum = 0xffffffff;
    }
    Crc32c.prototype.update = function(data) {
        var e_1, _a;
        try {
            for(var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()){
                var byte = data_1_1.value;
                this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 0xff];
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return this;
    };
    Crc32c.prototype.digest = function() {
        return (this.checksum ^ 0xffffffff) >>> 0;
    };
    return Crc32c;
}();
exports.Crc32c = Crc32c;
// prettier-ignore
var a_lookupTable = [
    0x00000000,
    0xF26B8303,
    0xE13B70F7,
    0x1350F3F4,
    0xC79A971F,
    0x35F1141C,
    0x26A1E7E8,
    0xD4CA64EB,
    0x8AD958CF,
    0x78B2DBCC,
    0x6BE22838,
    0x9989AB3B,
    0x4D43CFD0,
    0xBF284CD3,
    0xAC78BF27,
    0x5E133C24,
    0x105EC76F,
    0xE235446C,
    0xF165B798,
    0x030E349B,
    0xD7C45070,
    0x25AFD373,
    0x36FF2087,
    0xC494A384,
    0x9A879FA0,
    0x68EC1CA3,
    0x7BBCEF57,
    0x89D76C54,
    0x5D1D08BF,
    0xAF768BBC,
    0xBC267848,
    0x4E4DFB4B,
    0x20BD8EDE,
    0xD2D60DDD,
    0xC186FE29,
    0x33ED7D2A,
    0xE72719C1,
    0x154C9AC2,
    0x061C6936,
    0xF477EA35,
    0xAA64D611,
    0x580F5512,
    0x4B5FA6E6,
    0xB93425E5,
    0x6DFE410E,
    0x9F95C20D,
    0x8CC531F9,
    0x7EAEB2FA,
    0x30E349B1,
    0xC288CAB2,
    0xD1D83946,
    0x23B3BA45,
    0xF779DEAE,
    0x05125DAD,
    0x1642AE59,
    0xE4292D5A,
    0xBA3A117E,
    0x4851927D,
    0x5B016189,
    0xA96AE28A,
    0x7DA08661,
    0x8FCB0562,
    0x9C9BF696,
    0x6EF07595,
    0x417B1DBC,
    0xB3109EBF,
    0xA0406D4B,
    0x522BEE48,
    0x86E18AA3,
    0x748A09A0,
    0x67DAFA54,
    0x95B17957,
    0xCBA24573,
    0x39C9C670,
    0x2A993584,
    0xD8F2B687,
    0x0C38D26C,
    0xFE53516F,
    0xED03A29B,
    0x1F682198,
    0x5125DAD3,
    0xA34E59D0,
    0xB01EAA24,
    0x42752927,
    0x96BF4DCC,
    0x64D4CECF,
    0x77843D3B,
    0x85EFBE38,
    0xDBFC821C,
    0x2997011F,
    0x3AC7F2EB,
    0xC8AC71E8,
    0x1C661503,
    0xEE0D9600,
    0xFD5D65F4,
    0x0F36E6F7,
    0x61C69362,
    0x93AD1061,
    0x80FDE395,
    0x72966096,
    0xA65C047D,
    0x5437877E,
    0x4767748A,
    0xB50CF789,
    0xEB1FCBAD,
    0x197448AE,
    0x0A24BB5A,
    0xF84F3859,
    0x2C855CB2,
    0xDEEEDFB1,
    0xCDBE2C45,
    0x3FD5AF46,
    0x7198540D,
    0x83F3D70E,
    0x90A324FA,
    0x62C8A7F9,
    0xB602C312,
    0x44694011,
    0x5739B3E5,
    0xA55230E6,
    0xFB410CC2,
    0x092A8FC1,
    0x1A7A7C35,
    0xE811FF36,
    0x3CDB9BDD,
    0xCEB018DE,
    0xDDE0EB2A,
    0x2F8B6829,
    0x82F63B78,
    0x709DB87B,
    0x63CD4B8F,
    0x91A6C88C,
    0x456CAC67,
    0xB7072F64,
    0xA457DC90,
    0x563C5F93,
    0x082F63B7,
    0xFA44E0B4,
    0xE9141340,
    0x1B7F9043,
    0xCFB5F4A8,
    0x3DDE77AB,
    0x2E8E845F,
    0xDCE5075C,
    0x92A8FC17,
    0x60C37F14,
    0x73938CE0,
    0x81F80FE3,
    0x55326B08,
    0xA759E80B,
    0xB4091BFF,
    0x466298FC,
    0x1871A4D8,
    0xEA1A27DB,
    0xF94AD42F,
    0x0B21572C,
    0xDFEB33C7,
    0x2D80B0C4,
    0x3ED04330,
    0xCCBBC033,
    0xA24BB5A6,
    0x502036A5,
    0x4370C551,
    0xB11B4652,
    0x65D122B9,
    0x97BAA1BA,
    0x84EA524E,
    0x7681D14D,
    0x2892ED69,
    0xDAF96E6A,
    0xC9A99D9E,
    0x3BC21E9D,
    0xEF087A76,
    0x1D63F975,
    0x0E330A81,
    0xFC588982,
    0xB21572C9,
    0x407EF1CA,
    0x532E023E,
    0xA145813D,
    0x758FE5D6,
    0x87E466D5,
    0x94B49521,
    0x66DF1622,
    0x38CC2A06,
    0xCAA7A905,
    0xD9F75AF1,
    0x2B9CD9F2,
    0xFF56BD19,
    0x0D3D3E1A,
    0x1E6DCDEE,
    0xEC064EED,
    0xC38D26C4,
    0x31E6A5C7,
    0x22B65633,
    0xD0DDD530,
    0x0417B1DB,
    0xF67C32D8,
    0xE52CC12C,
    0x1747422F,
    0x49547E0B,
    0xBB3FFD08,
    0xA86F0EFC,
    0x5A048DFF,
    0x8ECEE914,
    0x7CA56A17,
    0x6FF599E3,
    0x9D9E1AE0,
    0xD3D3E1AB,
    0x21B862A8,
    0x32E8915C,
    0xC083125F,
    0x144976B4,
    0xE622F5B7,
    0xF5720643,
    0x07198540,
    0x590AB964,
    0xAB613A67,
    0xB831C993,
    0x4A5A4A90,
    0x9E902E7B,
    0x6CFBAD78,
    0x7FAB5E8C,
    0x8DC0DD8F,
    0xE330A81A,
    0x115B2B19,
    0x020BD8ED,
    0xF0605BEE,
    0x24AA3F05,
    0xD6C1BC06,
    0xC5914FF2,
    0x37FACCF1,
    0x69E9F0D5,
    0x9B8273D6,
    0x88D28022,
    0x7AB90321,
    0xAE7367CA,
    0x5C18E4C9,
    0x4F48173D,
    0xBD23943E,
    0xF36E6F75,
    0x0105EC76,
    0x12551F82,
    0xE03E9C81,
    0x34F4F86A,
    0xC69F7B69,
    0xD5CF889D,
    0x27A40B9E,
    0x79B737BA,
    0x8BDCB4B9,
    0x988C474D,
    0x6AE7C44E,
    0xBE2DA0A5,
    0x4C4623A6,
    0x5F16D052,
    0xAD7D5351
];
var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookupTable);
var aws_crc32c_1 = require("b7775c95c4106aa9");
Object.defineProperty(exports, "AwsCrc32c", {
    enumerable: true,
    get: function() {
        return aws_crc32c_1.AwsCrc32c;
    }
});

},{"334f8e4578e64277":"dpeLQ","b781b5f9d6920ee0":"aDvRG","b7775c95c4106aa9":"lLtWT"}],"dpeLQ":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lLtWT":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AwsCrc32c = void 0;
var tslib_1 = require("838290fbd75c6f73");
var util_1 = require("9e106dea1cc6660b");
var index_1 = require("95b1d182690243fb");
var AwsCrc32c = /** @class */ function() {
    function AwsCrc32c() {
        this.crc32c = new index_1.Crc32c();
    }
    AwsCrc32c.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash)) return;
        this.crc32c.update((0, util_1.convertToBuffer)(toHash));
    };
    AwsCrc32c.prototype.digest = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    (0, util_1.numToUint8)(this.crc32c.digest())
                ];
            });
        });
    };
    AwsCrc32c.prototype.reset = function() {
        this.crc32c = new index_1.Crc32c();
    };
    return AwsCrc32c;
}();
exports.AwsCrc32c = AwsCrc32c;

},{"838290fbd75c6f73":"dpeLQ","9e106dea1cc6660b":"aDvRG","95b1d182690243fb":"hP2RS"}],"4deGG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringHasher", ()=>stringHasher);
var _utilUtf8 = require("@aws-sdk/util-utf8");
const stringHasher = (checksumAlgorithmFn, body)=>{
    const hash = new checksumAlgorithmFn();
    hash.update((0, _utilUtf8.toUint8Array)(body || ""));
    return hash.digest();
};

},{"@aws-sdk/util-utf8":"6cVVP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j75Mc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validateChecksumFromResponse", ()=>validateChecksumFromResponse);
var _getChecksum = require("./getChecksum");
var _getChecksumAlgorithmListForResponse = require("./getChecksumAlgorithmListForResponse");
var _getChecksumLocationName = require("./getChecksumLocationName");
var _selectChecksumAlgorithmFunction = require("./selectChecksumAlgorithmFunction");
const validateChecksumFromResponse = async (response, { config , responseAlgorithms  })=>{
    const checksumAlgorithms = (0, _getChecksumAlgorithmListForResponse.getChecksumAlgorithmListForResponse)(responseAlgorithms);
    const { body: responseBody , headers: responseHeaders  } = response;
    for (const algorithm of checksumAlgorithms){
        const responseHeader = (0, _getChecksumLocationName.getChecksumLocationName)(algorithm);
        const checksumFromResponse = responseHeaders[responseHeader];
        if (checksumFromResponse) {
            const checksumAlgorithmFn = (0, _selectChecksumAlgorithmFunction.selectChecksumAlgorithmFunction)(algorithm, config);
            const { streamHasher , base64Encoder  } = config;
            const checksum = await (0, _getChecksum.getChecksum)(responseBody, {
                streamHasher,
                checksumAlgorithmFn,
                base64Encoder
            });
            if (checksum === checksumFromResponse) break;
            throw new Error(`Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}"` + ` in response header "${responseHeader}".`);
        }
    }
};

},{"./getChecksum":"2p9E8","./getChecksumAlgorithmListForResponse":"ehQkI","./getChecksumLocationName":"7bOJq","./selectChecksumAlgorithmFunction":"99xWC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2p9E8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getChecksum", ()=>getChecksum);
var _isStreaming = require("./isStreaming");
var _stringHasher = require("./stringHasher");
const getChecksum = async (body, { streamHasher , checksumAlgorithmFn , base64Encoder  })=>{
    const digest = (0, _isStreaming.isStreaming)(body) ? streamHasher(checksumAlgorithmFn, body) : (0, _stringHasher.stringHasher)(checksumAlgorithmFn, body);
    return base64Encoder(await digest);
};

},{"./isStreaming":"jEk8T","./stringHasher":"4deGG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ehQkI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getChecksumAlgorithmListForResponse", ()=>getChecksumAlgorithmListForResponse);
var _types = require("./types");
const getChecksumAlgorithmListForResponse = (responseAlgorithms = [])=>{
    const validChecksumAlgorithms = [];
    for (const algorithm of (0, _types.PRIORITY_ORDER_ALGORITHMS)){
        if (!responseAlgorithms.includes(algorithm) || !(0, _types.CLIENT_SUPPORTED_ALGORITHMS).includes(algorithm)) continue;
        validChecksumAlgorithms.push(algorithm);
    }
    return validChecksumAlgorithms;
};

},{"./types":"3dcWr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgOp9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flexibleChecksumsMiddlewareOptions", ()=>flexibleChecksumsMiddlewareOptions);
parcelHelpers.export(exports, "getFlexibleChecksumsPlugin", ()=>getFlexibleChecksumsPlugin);
var _flexibleChecksumsMiddleware = require("./flexibleChecksumsMiddleware");
const flexibleChecksumsMiddlewareOptions = {
    name: "flexibleChecksumsMiddleware",
    step: "build",
    tags: [
        "BODY_CHECKSUM"
    ],
    override: true
};
const getFlexibleChecksumsPlugin = (config, middlewareConfig)=>({
        applyToStack: (clientStack)=>{
            clientStack.add((0, _flexibleChecksumsMiddleware.flexibleChecksumsMiddleware)(config, middlewareConfig), flexibleChecksumsMiddlewareOptions);
        }
    });

},{"./flexibleChecksumsMiddleware":"bkRpy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gE019":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeleteObjectTaggingCommand", ()=>DeleteObjectTaggingCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeleteObjectTaggingCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteObjectTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeleteObjectTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeleteObjectTaggingCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4vaOW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "DeletePublicAccessBlockCommand", ()=>DeletePublicAccessBlockCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class DeletePublicAccessBlockCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeletePublicAccessBlockCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "DeletePublicAccessBlockCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_DeletePublicAccessBlockCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_DeletePublicAccessBlockCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ijiPj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketAccelerateConfigurationCommand", ()=>GetBucketAccelerateConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketAccelerateConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAccelerateConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketAccelerateConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketAccelerateConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hSPaV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketAclCommand", ()=>GetBucketAclCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketAclCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketAclCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAclCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketAclCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketAclCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gJrBY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketAnalyticsConfigurationCommand", ()=>GetBucketAnalyticsConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketAnalyticsConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketAnalyticsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketAnalyticsConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"49ic2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketCorsCommand", ()=>GetBucketCorsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketCorsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketCorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketCorsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketCorsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketCorsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hXT2o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketEncryptionCommand", ()=>GetBucketEncryptionCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketEncryptionCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketEncryptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketEncryptionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (0, _models0.GetBucketEncryptionOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketEncryptionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketEncryptionCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8F3Nx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketIntelligentTieringConfigurationCommand", ()=>GetBucketIntelligentTieringConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketIntelligentTieringConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketIntelligentTieringConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketIntelligentTieringConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jkDGR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketInventoryConfigurationCommand", ()=>GetBucketInventoryConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketInventoryConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (0, _models0.GetBucketInventoryConfigurationOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketInventoryConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketInventoryConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aQS7J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketLifecycleConfigurationCommand", ()=>GetBucketLifecycleConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketLifecycleConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLifecycleConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketLifecycleConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketLifecycleConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l1ojc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketLocationCommand", ()=>GetBucketLocationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketLocationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketLocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLocationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketLocationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketLocationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aYXJ8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketLoggingCommand", ()=>GetBucketLoggingCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketLoggingCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketLoggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLoggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketLoggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketLoggingCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Wvbz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketMetricsConfigurationCommand", ()=>GetBucketMetricsConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketMetricsConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketMetricsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketMetricsConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6vA3E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketNotificationConfigurationCommand", ()=>GetBucketNotificationConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketNotificationConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketNotificationConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketNotificationConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketNotificationConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"30Rfx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketOwnershipControlsCommand", ()=>GetBucketOwnershipControlsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketOwnershipControlsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketOwnershipControlsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketOwnershipControlsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9iZjE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketPolicyCommand", ()=>GetBucketPolicyCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketPolicyCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketPolicyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketPolicyCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketPolicyCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kWRPJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketPolicyStatusCommand", ()=>GetBucketPolicyStatusCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketPolicyStatusCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketPolicyStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketPolicyStatusCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketPolicyStatusCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketPolicyStatusCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4egcA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketReplicationCommand", ()=>GetBucketReplicationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketReplicationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketReplicationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketReplicationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketReplicationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"KZMrw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketRequestPaymentCommand", ()=>GetBucketRequestPaymentCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketRequestPaymentCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketRequestPaymentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketRequestPaymentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketRequestPaymentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketRequestPaymentCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iYJZD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketTaggingCommand", ()=>GetBucketTaggingCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketTaggingCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketTaggingCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gnv3r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketVersioningCommand", ()=>GetBucketVersioningCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketVersioningCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketVersioningCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketVersioningCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketVersioningCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketVersioningCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"rXCvL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetBucketWebsiteCommand", ()=>GetBucketWebsiteCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetBucketWebsiteCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetBucketWebsiteCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketWebsiteCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetBucketWebsiteCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetBucketWebsiteCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aKKe8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetObjectAclCommand", ()=>GetObjectAclCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetObjectAclCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetObjectAclCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectAclCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetObjectAclCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetObjectAclCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fQNYl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetObjectAttributesCommand", ()=>GetObjectAttributesCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetObjectAttributesCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetObjectAttributesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectAttributesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.GetObjectAttributesRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetObjectAttributesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetObjectAttributesCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7JB7P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetObjectCommand", ()=>GetObjectCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetObjectCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestChecksumRequired: false,
            requestValidationModeMember: "ChecksumMode",
            responseAlgorithms: [
                "CRC32",
                "CRC32C",
                "SHA256",
                "SHA1"
            ]
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.GetObjectRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.GetObjectOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetObjectCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"exGUh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetObjectLegalHoldCommand", ()=>GetObjectLegalHoldCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetObjectLegalHoldCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetObjectLegalHoldCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectLegalHoldCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetObjectLegalHoldCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetObjectLegalHoldCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hqSGb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetObjectLockConfigurationCommand", ()=>GetObjectLockConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetObjectLockConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetObjectLockConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectLockConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetObjectLockConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetObjectLockConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5QEMq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetObjectRetentionCommand", ()=>GetObjectRetentionCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetObjectRetentionCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetObjectRetentionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectRetentionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetObjectRetentionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetObjectRetentionCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eTJKj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetObjectTaggingCommand", ()=>GetObjectTaggingCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetObjectTaggingCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetObjectTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetObjectTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetObjectTaggingCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7g3kA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetObjectTorrentCommand", ()=>GetObjectTorrentCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetObjectTorrentCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetObjectTorrentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectTorrentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (0, _models0.GetObjectTorrentOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetObjectTorrentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetObjectTorrentCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"wRCYl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "GetPublicAccessBlockCommand", ()=>GetPublicAccessBlockCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class GetPublicAccessBlockCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetPublicAccessBlockCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "GetPublicAccessBlockCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_GetPublicAccessBlockCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_GetPublicAccessBlockCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6w0s6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "HeadBucketCommand", ()=>HeadBucketCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class HeadBucketCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, HeadBucketCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "HeadBucketCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_HeadBucketCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_HeadBucketCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dHKtr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "HeadObjectCommand", ()=>HeadObjectCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class HeadObjectCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, HeadObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "HeadObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.HeadObjectRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.HeadObjectOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_HeadObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_HeadObjectCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7cazJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "ListBucketAnalyticsConfigurationsCommand", ()=>ListBucketAnalyticsConfigurationsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class ListBucketAnalyticsConfigurationsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListBucketAnalyticsConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketAnalyticsConfigurationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_ListBucketAnalyticsConfigurationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_ListBucketAnalyticsConfigurationsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ZBWg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "ListBucketIntelligentTieringConfigurationsCommand", ()=>ListBucketIntelligentTieringConfigurationsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class ListBucketIntelligentTieringConfigurationsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListBucketIntelligentTieringConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketIntelligentTieringConfigurationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_ListBucketIntelligentTieringConfigurationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_ListBucketIntelligentTieringConfigurationsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jxcpe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "ListBucketInventoryConfigurationsCommand", ()=>ListBucketInventoryConfigurationsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class ListBucketInventoryConfigurationsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListBucketInventoryConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketInventoryConfigurationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (0, _models0.ListBucketInventoryConfigurationsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_ListBucketInventoryConfigurationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_ListBucketInventoryConfigurationsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1U21v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "ListBucketMetricsConfigurationsCommand", ()=>ListBucketMetricsConfigurationsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class ListBucketMetricsConfigurationsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListBucketMetricsConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketMetricsConfigurationsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_ListBucketMetricsConfigurationsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_ListBucketMetricsConfigurationsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j25ta":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "ListBucketsCommand", ()=>ListBucketsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class ListBucketsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListBucketsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_ListBucketsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_ListBucketsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7uXfN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "ListMultipartUploadsCommand", ()=>ListMultipartUploadsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class ListMultipartUploadsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListMultipartUploadsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "ListMultipartUploadsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_ListMultipartUploadsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_ListMultipartUploadsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kpKDh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "ListObjectsCommand", ()=>ListObjectsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class ListObjectsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListObjectsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_ListObjectsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_ListObjectsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2fiSo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "ListObjectsV2Command", ()=>ListObjectsV2Command);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class ListObjectsV2Command extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListObjectsV2Command.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectsV2Command";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_ListObjectsV2Command)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_ListObjectsV2Command)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2F9ix":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "ListObjectVersionsCommand", ()=>ListObjectVersionsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class ListObjectVersionsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListObjectVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectVersionsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_ListObjectVersionsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_ListObjectVersionsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3iUOT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "ListPartsCommand", ()=>ListPartsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class ListPartsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListPartsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "ListPartsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListPartsRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_ListPartsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_ListPartsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fsI9c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketAccelerateConfigurationCommand", ()=>PutBucketAccelerateConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketAccelerateConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAccelerateConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketAccelerateConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketAccelerateConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lgtRq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketAclCommand", ()=>PutBucketAclCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketAclCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketAclCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAclCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketAclCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketAclCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6sg2b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketAnalyticsConfigurationCommand", ()=>PutBucketAnalyticsConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketAnalyticsConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketAnalyticsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketAnalyticsConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4JoGb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketCorsCommand", ()=>PutBucketCorsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketCorsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketCorsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketCorsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketCorsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketCorsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dFYuw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketEncryptionCommand", ()=>PutBucketEncryptionCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketEncryptionCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketEncryptionCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketEncryptionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.PutBucketEncryptionRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketEncryptionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketEncryptionCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jA5Je":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketIntelligentTieringConfigurationCommand", ()=>PutBucketIntelligentTieringConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketIntelligentTieringConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketIntelligentTieringConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketIntelligentTieringConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjzqq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketInventoryConfigurationCommand", ()=>PutBucketInventoryConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketInventoryConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.PutBucketInventoryConfigurationRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketInventoryConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketInventoryConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dLPxU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketLifecycleConfigurationCommand", ()=>PutBucketLifecycleConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketLifecycleConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketLifecycleConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketLifecycleConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketLifecycleConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3pNrt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketLoggingCommand", ()=>PutBucketLoggingCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketLoggingCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketLoggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketLoggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketLoggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketLoggingCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"adGnu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketMetricsConfigurationCommand", ()=>PutBucketMetricsConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketMetricsConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketMetricsConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketMetricsConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"24ATi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketNotificationConfigurationCommand", ()=>PutBucketNotificationConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketNotificationConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketNotificationConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketNotificationConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketNotificationConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"faEzd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketOwnershipControlsCommand", ()=>PutBucketOwnershipControlsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketOwnershipControlsCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketOwnershipControlsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketOwnershipControlsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kaWfg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketPolicyCommand", ()=>PutBucketPolicyCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketPolicyCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketPolicyCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketPolicyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketPolicyCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketPolicyCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Ue2q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketReplicationCommand", ()=>PutBucketReplicationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketReplicationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketReplicationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketReplicationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketReplicationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketReplicationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9LH6x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketRequestPaymentCommand", ()=>PutBucketRequestPaymentCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketRequestPaymentCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketRequestPaymentCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketRequestPaymentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketRequestPaymentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketRequestPaymentCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jT6rN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketTaggingCommand", ()=>PutBucketTaggingCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketTaggingCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketTaggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketTaggingCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fsjbT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketVersioningCommand", ()=>PutBucketVersioningCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketVersioningCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketVersioningCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketVersioningCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketVersioningCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketVersioningCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"97y5a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutBucketWebsiteCommand", ()=>PutBucketWebsiteCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutBucketWebsiteCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutBucketWebsiteCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketWebsiteCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutBucketWebsiteCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutBucketWebsiteCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j8SCH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutObjectAclCommand", ()=>PutObjectAclCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutObjectAclCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutObjectAclCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectAclCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutObjectAclCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutObjectAclCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2J42a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutObjectCommand", ()=>PutObjectCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSdkS3 = require("@aws-sdk/middleware-sdk-s3");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutObjectCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSdkS3.getCheckContentLengthHeaderPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.PutObjectRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.PutObjectOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutObjectCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-sdk-s3":"lvLFs","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_0":"c3vBh","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"29HlY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutObjectLegalHoldCommand", ()=>PutObjectLegalHoldCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutObjectLegalHoldCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutObjectLegalHoldCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectLegalHoldCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutObjectLegalHoldCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutObjectLegalHoldCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fbw27":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutObjectLockConfigurationCommand", ()=>PutObjectLockConfigurationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutObjectLockConfigurationCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutObjectLockConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectLockConfigurationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutObjectLockConfigurationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutObjectLockConfigurationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1R5tg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutObjectRetentionCommand", ()=>PutObjectRetentionCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutObjectRetentionCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutObjectRetentionCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectRetentionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutObjectRetentionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutObjectRetentionCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gFb9V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutObjectTaggingCommand", ()=>PutObjectTaggingCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutObjectTaggingCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutObjectTaggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectTaggingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutObjectTaggingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutObjectTaggingCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9epma":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "PutPublicAccessBlockCommand", ()=>PutPublicAccessBlockCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _awsRestXml = require("../protocols/Aws_restXml");
class PutPublicAccessBlockCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutPublicAccessBlockCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "PutPublicAccessBlockCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (_)=>_,
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_PutPublicAccessBlockCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_PutPublicAccessBlockCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"69civ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "RestoreObjectCommand", ()=>RestoreObjectCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models1 = require("../models/models_1");
var _awsRestXml = require("../protocols/Aws_restXml");
class RestoreObjectCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, RestoreObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "RestoreObjectCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models1.RestoreObjectRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_RestoreObjectCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_RestoreObjectCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_1":"iOWbb","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aU2MM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "SelectObjectContentCommand", ()=>SelectObjectContentCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models1 = require("../models/models_1");
var _awsRestXml = require("../protocols/Aws_restXml");
class SelectObjectContentCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, SelectObjectContentCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "SelectObjectContentCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models1.SelectObjectContentRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models1.SelectObjectContentOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_SelectObjectContentCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_SelectObjectContentCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_1":"iOWbb","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kd9TM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "UploadPartCommand", ()=>UploadPartCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareFlexibleChecksums = require("@aws-sdk/middleware-flexible-checksums");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models1 = require("../models/models_1");
var _awsRestXml = require("../protocols/Aws_restXml");
class UploadPartCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UploadPartCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareFlexibleChecksums.getFlexibleChecksumsPlugin)(configuration, {
            input: this.input,
            requestAlgorithmMember: "ChecksumAlgorithm",
            requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "UploadPartCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models1.UploadPartRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models1.UploadPartOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_UploadPartCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_UploadPartCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-flexible-checksums":"dOFuw","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_1":"iOWbb","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2jcli":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "UploadPartCopyCommand", ()=>UploadPartCopyCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSdkS3 = require("@aws-sdk/middleware-sdk-s3");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models1 = require("../models/models_1");
var _awsRestXml = require("../protocols/Aws_restXml");
class UploadPartCopyCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            Bucket: {
                type: "contextParams",
                name: "Bucket"
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UploadPartCopyCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSdkS3.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "UploadPartCopyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models1.UploadPartCopyRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models1.UploadPartCopyOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_UploadPartCopyCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_UploadPartCopyCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-sdk-s3":"lvLFs","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-ssec":"5N1b6","@aws-sdk/smithy-client":"ats0l","../models/models_1":"iOWbb","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ajOg1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$Command", ()=>(0, _smithyClient.Command));
parcelHelpers.export(exports, "WriteGetObjectResponseCommand", ()=>WriteGetObjectResponseCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models1 = require("../models/models_1");
var _awsRestXml = require("../protocols/Aws_restXml");
class WriteGetObjectResponseCommand extends (0, _smithyClient.Command) {
    static getEndpointParameterInstructions() {
        return {
            UseObjectLambdaEndpoint: {
                type: "staticContextParams",
                value: true
            },
            ForcePathStyle: {
                type: "clientContextParams",
                name: "forcePathStyle"
            },
            UseArnRegion: {
                type: "clientContextParams",
                name: "useArnRegion"
            },
            DisableMultiRegionAccessPoints: {
                type: "clientContextParams",
                name: "disableMultiregionAccessPoints"
            },
            Accelerate: {
                type: "clientContextParams",
                name: "useAccelerateEndpoint"
            },
            UseGlobalEndpoint: {
                type: "builtInParams",
                name: "useGlobalEndpoint"
            },
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    constructor(input){
        super();
        this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, WriteGetObjectResponseCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "S3Client";
        const commandName = "WriteGetObjectResponseCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models1.WriteGetObjectResponseRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (_)=>_
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsRestXml.se_WriteGetObjectResponseCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsRestXml.de_WriteGetObjectResponseCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_1":"iOWbb","../protocols/Aws_restXml":"2et4H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aGg4b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _abortMultipartUploadCommand = require("./AbortMultipartUploadCommand");
parcelHelpers.exportAll(_abortMultipartUploadCommand, exports);
var _completeMultipartUploadCommand = require("./CompleteMultipartUploadCommand");
parcelHelpers.exportAll(_completeMultipartUploadCommand, exports);
var _copyObjectCommand = require("./CopyObjectCommand");
parcelHelpers.exportAll(_copyObjectCommand, exports);
var _createBucketCommand = require("./CreateBucketCommand");
parcelHelpers.exportAll(_createBucketCommand, exports);
var _createMultipartUploadCommand = require("./CreateMultipartUploadCommand");
parcelHelpers.exportAll(_createMultipartUploadCommand, exports);
var _deleteBucketAnalyticsConfigurationCommand = require("./DeleteBucketAnalyticsConfigurationCommand");
parcelHelpers.exportAll(_deleteBucketAnalyticsConfigurationCommand, exports);
var _deleteBucketCommand = require("./DeleteBucketCommand");
parcelHelpers.exportAll(_deleteBucketCommand, exports);
var _deleteBucketCorsCommand = require("./DeleteBucketCorsCommand");
parcelHelpers.exportAll(_deleteBucketCorsCommand, exports);
var _deleteBucketEncryptionCommand = require("./DeleteBucketEncryptionCommand");
parcelHelpers.exportAll(_deleteBucketEncryptionCommand, exports);
var _deleteBucketIntelligentTieringConfigurationCommand = require("./DeleteBucketIntelligentTieringConfigurationCommand");
parcelHelpers.exportAll(_deleteBucketIntelligentTieringConfigurationCommand, exports);
var _deleteBucketInventoryConfigurationCommand = require("./DeleteBucketInventoryConfigurationCommand");
parcelHelpers.exportAll(_deleteBucketInventoryConfigurationCommand, exports);
var _deleteBucketLifecycleCommand = require("./DeleteBucketLifecycleCommand");
parcelHelpers.exportAll(_deleteBucketLifecycleCommand, exports);
var _deleteBucketMetricsConfigurationCommand = require("./DeleteBucketMetricsConfigurationCommand");
parcelHelpers.exportAll(_deleteBucketMetricsConfigurationCommand, exports);
var _deleteBucketOwnershipControlsCommand = require("./DeleteBucketOwnershipControlsCommand");
parcelHelpers.exportAll(_deleteBucketOwnershipControlsCommand, exports);
var _deleteBucketPolicyCommand = require("./DeleteBucketPolicyCommand");
parcelHelpers.exportAll(_deleteBucketPolicyCommand, exports);
var _deleteBucketReplicationCommand = require("./DeleteBucketReplicationCommand");
parcelHelpers.exportAll(_deleteBucketReplicationCommand, exports);
var _deleteBucketTaggingCommand = require("./DeleteBucketTaggingCommand");
parcelHelpers.exportAll(_deleteBucketTaggingCommand, exports);
var _deleteBucketWebsiteCommand = require("./DeleteBucketWebsiteCommand");
parcelHelpers.exportAll(_deleteBucketWebsiteCommand, exports);
var _deleteObjectCommand = require("./DeleteObjectCommand");
parcelHelpers.exportAll(_deleteObjectCommand, exports);
var _deleteObjectTaggingCommand = require("./DeleteObjectTaggingCommand");
parcelHelpers.exportAll(_deleteObjectTaggingCommand, exports);
var _deleteObjectsCommand = require("./DeleteObjectsCommand");
parcelHelpers.exportAll(_deleteObjectsCommand, exports);
var _deletePublicAccessBlockCommand = require("./DeletePublicAccessBlockCommand");
parcelHelpers.exportAll(_deletePublicAccessBlockCommand, exports);
var _getBucketAccelerateConfigurationCommand = require("./GetBucketAccelerateConfigurationCommand");
parcelHelpers.exportAll(_getBucketAccelerateConfigurationCommand, exports);
var _getBucketAclCommand = require("./GetBucketAclCommand");
parcelHelpers.exportAll(_getBucketAclCommand, exports);
var _getBucketAnalyticsConfigurationCommand = require("./GetBucketAnalyticsConfigurationCommand");
parcelHelpers.exportAll(_getBucketAnalyticsConfigurationCommand, exports);
var _getBucketCorsCommand = require("./GetBucketCorsCommand");
parcelHelpers.exportAll(_getBucketCorsCommand, exports);
var _getBucketEncryptionCommand = require("./GetBucketEncryptionCommand");
parcelHelpers.exportAll(_getBucketEncryptionCommand, exports);
var _getBucketIntelligentTieringConfigurationCommand = require("./GetBucketIntelligentTieringConfigurationCommand");
parcelHelpers.exportAll(_getBucketIntelligentTieringConfigurationCommand, exports);
var _getBucketInventoryConfigurationCommand = require("./GetBucketInventoryConfigurationCommand");
parcelHelpers.exportAll(_getBucketInventoryConfigurationCommand, exports);
var _getBucketLifecycleConfigurationCommand = require("./GetBucketLifecycleConfigurationCommand");
parcelHelpers.exportAll(_getBucketLifecycleConfigurationCommand, exports);
var _getBucketLocationCommand = require("./GetBucketLocationCommand");
parcelHelpers.exportAll(_getBucketLocationCommand, exports);
var _getBucketLoggingCommand = require("./GetBucketLoggingCommand");
parcelHelpers.exportAll(_getBucketLoggingCommand, exports);
var _getBucketMetricsConfigurationCommand = require("./GetBucketMetricsConfigurationCommand");
parcelHelpers.exportAll(_getBucketMetricsConfigurationCommand, exports);
var _getBucketNotificationConfigurationCommand = require("./GetBucketNotificationConfigurationCommand");
parcelHelpers.exportAll(_getBucketNotificationConfigurationCommand, exports);
var _getBucketOwnershipControlsCommand = require("./GetBucketOwnershipControlsCommand");
parcelHelpers.exportAll(_getBucketOwnershipControlsCommand, exports);
var _getBucketPolicyCommand = require("./GetBucketPolicyCommand");
parcelHelpers.exportAll(_getBucketPolicyCommand, exports);
var _getBucketPolicyStatusCommand = require("./GetBucketPolicyStatusCommand");
parcelHelpers.exportAll(_getBucketPolicyStatusCommand, exports);
var _getBucketReplicationCommand = require("./GetBucketReplicationCommand");
parcelHelpers.exportAll(_getBucketReplicationCommand, exports);
var _getBucketRequestPaymentCommand = require("./GetBucketRequestPaymentCommand");
parcelHelpers.exportAll(_getBucketRequestPaymentCommand, exports);
var _getBucketTaggingCommand = require("./GetBucketTaggingCommand");
parcelHelpers.exportAll(_getBucketTaggingCommand, exports);
var _getBucketVersioningCommand = require("./GetBucketVersioningCommand");
parcelHelpers.exportAll(_getBucketVersioningCommand, exports);
var _getBucketWebsiteCommand = require("./GetBucketWebsiteCommand");
parcelHelpers.exportAll(_getBucketWebsiteCommand, exports);
var _getObjectAclCommand = require("./GetObjectAclCommand");
parcelHelpers.exportAll(_getObjectAclCommand, exports);
var _getObjectAttributesCommand = require("./GetObjectAttributesCommand");
parcelHelpers.exportAll(_getObjectAttributesCommand, exports);
var _getObjectCommand = require("./GetObjectCommand");
parcelHelpers.exportAll(_getObjectCommand, exports);
var _getObjectLegalHoldCommand = require("./GetObjectLegalHoldCommand");
parcelHelpers.exportAll(_getObjectLegalHoldCommand, exports);
var _getObjectLockConfigurationCommand = require("./GetObjectLockConfigurationCommand");
parcelHelpers.exportAll(_getObjectLockConfigurationCommand, exports);
var _getObjectRetentionCommand = require("./GetObjectRetentionCommand");
parcelHelpers.exportAll(_getObjectRetentionCommand, exports);
var _getObjectTaggingCommand = require("./GetObjectTaggingCommand");
parcelHelpers.exportAll(_getObjectTaggingCommand, exports);
var _getObjectTorrentCommand = require("./GetObjectTorrentCommand");
parcelHelpers.exportAll(_getObjectTorrentCommand, exports);
var _getPublicAccessBlockCommand = require("./GetPublicAccessBlockCommand");
parcelHelpers.exportAll(_getPublicAccessBlockCommand, exports);
var _headBucketCommand = require("./HeadBucketCommand");
parcelHelpers.exportAll(_headBucketCommand, exports);
var _headObjectCommand = require("./HeadObjectCommand");
parcelHelpers.exportAll(_headObjectCommand, exports);
var _listBucketAnalyticsConfigurationsCommand = require("./ListBucketAnalyticsConfigurationsCommand");
parcelHelpers.exportAll(_listBucketAnalyticsConfigurationsCommand, exports);
var _listBucketIntelligentTieringConfigurationsCommand = require("./ListBucketIntelligentTieringConfigurationsCommand");
parcelHelpers.exportAll(_listBucketIntelligentTieringConfigurationsCommand, exports);
var _listBucketInventoryConfigurationsCommand = require("./ListBucketInventoryConfigurationsCommand");
parcelHelpers.exportAll(_listBucketInventoryConfigurationsCommand, exports);
var _listBucketMetricsConfigurationsCommand = require("./ListBucketMetricsConfigurationsCommand");
parcelHelpers.exportAll(_listBucketMetricsConfigurationsCommand, exports);
var _listBucketsCommand = require("./ListBucketsCommand");
parcelHelpers.exportAll(_listBucketsCommand, exports);
var _listMultipartUploadsCommand = require("./ListMultipartUploadsCommand");
parcelHelpers.exportAll(_listMultipartUploadsCommand, exports);
var _listObjectVersionsCommand = require("./ListObjectVersionsCommand");
parcelHelpers.exportAll(_listObjectVersionsCommand, exports);
var _listObjectsCommand = require("./ListObjectsCommand");
parcelHelpers.exportAll(_listObjectsCommand, exports);
var _listObjectsV2Command = require("./ListObjectsV2Command");
parcelHelpers.exportAll(_listObjectsV2Command, exports);
var _listPartsCommand = require("./ListPartsCommand");
parcelHelpers.exportAll(_listPartsCommand, exports);
var _putBucketAccelerateConfigurationCommand = require("./PutBucketAccelerateConfigurationCommand");
parcelHelpers.exportAll(_putBucketAccelerateConfigurationCommand, exports);
var _putBucketAclCommand = require("./PutBucketAclCommand");
parcelHelpers.exportAll(_putBucketAclCommand, exports);
var _putBucketAnalyticsConfigurationCommand = require("./PutBucketAnalyticsConfigurationCommand");
parcelHelpers.exportAll(_putBucketAnalyticsConfigurationCommand, exports);
var _putBucketCorsCommand = require("./PutBucketCorsCommand");
parcelHelpers.exportAll(_putBucketCorsCommand, exports);
var _putBucketEncryptionCommand = require("./PutBucketEncryptionCommand");
parcelHelpers.exportAll(_putBucketEncryptionCommand, exports);
var _putBucketIntelligentTieringConfigurationCommand = require("./PutBucketIntelligentTieringConfigurationCommand");
parcelHelpers.exportAll(_putBucketIntelligentTieringConfigurationCommand, exports);
var _putBucketInventoryConfigurationCommand = require("./PutBucketInventoryConfigurationCommand");
parcelHelpers.exportAll(_putBucketInventoryConfigurationCommand, exports);
var _putBucketLifecycleConfigurationCommand = require("./PutBucketLifecycleConfigurationCommand");
parcelHelpers.exportAll(_putBucketLifecycleConfigurationCommand, exports);
var _putBucketLoggingCommand = require("./PutBucketLoggingCommand");
parcelHelpers.exportAll(_putBucketLoggingCommand, exports);
var _putBucketMetricsConfigurationCommand = require("./PutBucketMetricsConfigurationCommand");
parcelHelpers.exportAll(_putBucketMetricsConfigurationCommand, exports);
var _putBucketNotificationConfigurationCommand = require("./PutBucketNotificationConfigurationCommand");
parcelHelpers.exportAll(_putBucketNotificationConfigurationCommand, exports);
var _putBucketOwnershipControlsCommand = require("./PutBucketOwnershipControlsCommand");
parcelHelpers.exportAll(_putBucketOwnershipControlsCommand, exports);
var _putBucketPolicyCommand = require("./PutBucketPolicyCommand");
parcelHelpers.exportAll(_putBucketPolicyCommand, exports);
var _putBucketReplicationCommand = require("./PutBucketReplicationCommand");
parcelHelpers.exportAll(_putBucketReplicationCommand, exports);
var _putBucketRequestPaymentCommand = require("./PutBucketRequestPaymentCommand");
parcelHelpers.exportAll(_putBucketRequestPaymentCommand, exports);
var _putBucketTaggingCommand = require("./PutBucketTaggingCommand");
parcelHelpers.exportAll(_putBucketTaggingCommand, exports);
var _putBucketVersioningCommand = require("./PutBucketVersioningCommand");
parcelHelpers.exportAll(_putBucketVersioningCommand, exports);
var _putBucketWebsiteCommand = require("./PutBucketWebsiteCommand");
parcelHelpers.exportAll(_putBucketWebsiteCommand, exports);
var _putObjectAclCommand = require("./PutObjectAclCommand");
parcelHelpers.exportAll(_putObjectAclCommand, exports);
var _putObjectCommand = require("./PutObjectCommand");
parcelHelpers.exportAll(_putObjectCommand, exports);
var _putObjectLegalHoldCommand = require("./PutObjectLegalHoldCommand");
parcelHelpers.exportAll(_putObjectLegalHoldCommand, exports);
var _putObjectLockConfigurationCommand = require("./PutObjectLockConfigurationCommand");
parcelHelpers.exportAll(_putObjectLockConfigurationCommand, exports);
var _putObjectRetentionCommand = require("./PutObjectRetentionCommand");
parcelHelpers.exportAll(_putObjectRetentionCommand, exports);
var _putObjectTaggingCommand = require("./PutObjectTaggingCommand");
parcelHelpers.exportAll(_putObjectTaggingCommand, exports);
var _putPublicAccessBlockCommand = require("./PutPublicAccessBlockCommand");
parcelHelpers.exportAll(_putPublicAccessBlockCommand, exports);
var _restoreObjectCommand = require("./RestoreObjectCommand");
parcelHelpers.exportAll(_restoreObjectCommand, exports);
var _selectObjectContentCommand = require("./SelectObjectContentCommand");
parcelHelpers.exportAll(_selectObjectContentCommand, exports);
var _uploadPartCommand = require("./UploadPartCommand");
parcelHelpers.exportAll(_uploadPartCommand, exports);
var _uploadPartCopyCommand = require("./UploadPartCopyCommand");
parcelHelpers.exportAll(_uploadPartCopyCommand, exports);
var _writeGetObjectResponseCommand = require("./WriteGetObjectResponseCommand");
parcelHelpers.exportAll(_writeGetObjectResponseCommand, exports);

},{"./AbortMultipartUploadCommand":false,"./CompleteMultipartUploadCommand":false,"./CopyObjectCommand":false,"./CreateBucketCommand":false,"./CreateMultipartUploadCommand":false,"./DeleteBucketAnalyticsConfigurationCommand":false,"./DeleteBucketCommand":false,"./DeleteBucketCorsCommand":false,"./DeleteBucketEncryptionCommand":false,"./DeleteBucketIntelligentTieringConfigurationCommand":false,"./DeleteBucketInventoryConfigurationCommand":false,"./DeleteBucketLifecycleCommand":false,"./DeleteBucketMetricsConfigurationCommand":false,"./DeleteBucketOwnershipControlsCommand":false,"./DeleteBucketPolicyCommand":false,"./DeleteBucketReplicationCommand":false,"./DeleteBucketTaggingCommand":false,"./DeleteBucketWebsiteCommand":false,"./DeleteObjectCommand":false,"./DeleteObjectTaggingCommand":false,"./DeleteObjectsCommand":false,"./DeletePublicAccessBlockCommand":false,"./GetBucketAccelerateConfigurationCommand":false,"./GetBucketAclCommand":false,"./GetBucketAnalyticsConfigurationCommand":false,"./GetBucketCorsCommand":false,"./GetBucketEncryptionCommand":false,"./GetBucketIntelligentTieringConfigurationCommand":false,"./GetBucketInventoryConfigurationCommand":false,"./GetBucketLifecycleConfigurationCommand":false,"./GetBucketLocationCommand":false,"./GetBucketLoggingCommand":false,"./GetBucketMetricsConfigurationCommand":false,"./GetBucketNotificationConfigurationCommand":false,"./GetBucketOwnershipControlsCommand":false,"./GetBucketPolicyCommand":false,"./GetBucketPolicyStatusCommand":false,"./GetBucketReplicationCommand":false,"./GetBucketRequestPaymentCommand":false,"./GetBucketTaggingCommand":false,"./GetBucketVersioningCommand":false,"./GetBucketWebsiteCommand":false,"./GetObjectAclCommand":false,"./GetObjectAttributesCommand":false,"./GetObjectCommand":false,"./GetObjectLegalHoldCommand":false,"./GetObjectLockConfigurationCommand":false,"./GetObjectRetentionCommand":false,"./GetObjectTaggingCommand":false,"./GetObjectTorrentCommand":false,"./GetPublicAccessBlockCommand":false,"./HeadBucketCommand":false,"./HeadObjectCommand":false,"./ListBucketAnalyticsConfigurationsCommand":false,"./ListBucketIntelligentTieringConfigurationsCommand":false,"./ListBucketInventoryConfigurationsCommand":false,"./ListBucketMetricsConfigurationsCommand":false,"./ListBucketsCommand":false,"./ListMultipartUploadsCommand":false,"./ListObjectVersionsCommand":false,"./ListObjectsCommand":false,"./ListObjectsV2Command":false,"./ListPartsCommand":false,"./PutBucketAccelerateConfigurationCommand":false,"./PutBucketAclCommand":false,"./PutBucketAnalyticsConfigurationCommand":false,"./PutBucketCorsCommand":false,"./PutBucketEncryptionCommand":false,"./PutBucketIntelligentTieringConfigurationCommand":false,"./PutBucketInventoryConfigurationCommand":false,"./PutBucketLifecycleConfigurationCommand":false,"./PutBucketLoggingCommand":false,"./PutBucketMetricsConfigurationCommand":false,"./PutBucketNotificationConfigurationCommand":false,"./PutBucketOwnershipControlsCommand":false,"./PutBucketPolicyCommand":false,"./PutBucketReplicationCommand":false,"./PutBucketRequestPaymentCommand":false,"./PutBucketTaggingCommand":false,"./PutBucketVersioningCommand":false,"./PutBucketWebsiteCommand":false,"./PutObjectAclCommand":false,"./PutObjectCommand":"2J42a","./PutObjectLegalHoldCommand":false,"./PutObjectLockConfigurationCommand":false,"./PutObjectRetentionCommand":false,"./PutObjectTaggingCommand":false,"./PutPublicAccessBlockCommand":false,"./RestoreObjectCommand":false,"./SelectObjectContentCommand":false,"./UploadPartCommand":false,"./UploadPartCopyCommand":false,"./WriteGetObjectResponseCommand":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1k4UK":[function(require,module,exports) {
var process = require("531f735780a40d9d");
(function() {
    require("189b0e1511c7824a").config(Object.assign({}, require("f558f63a3e8a11c6"), require("84f1c1578099e207")(process.argv)));
})();

},{"531f735780a40d9d":"d5jf4","189b0e1511c7824a":"lErsX","f558f63a3e8a11c6":"7QNnF","84f1c1578099e207":"2uqY9"}],"lErsX":[function(require,module,exports) {
var process = require("a81606b34c5d81aa");
var Buffer = require("41bceb7eaaabbe41").Buffer;
const fs = require("3cedb41afbfb34c8");
const path = require("24ed8c5da1e3fe5e");
const os = require("cbaad8186a70aa4e");
const crypto = require("c2a78565a91e0a0d");
const packageJson = require("1e1923289a8e6904");
const version = packageJson.version;
const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
// Parse src into an Object
function parse(src) {
    const obj = {};
    // Convert buffer to string
    let lines = src.toString();
    // Convert line breaks to same format
    lines = lines.replace(/\r\n?/mg, "\n");
    let match;
    while((match = LINE.exec(lines)) != null){
        const key = match[1];
        // Default undefined or null to empty string
        let value = match[2] || "";
        // Remove whitespace
        value = value.trim();
        // Check if double quoted
        const maybeQuote = value[0];
        // Remove surrounding quotes
        value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
        // Expand newlines if double quoted
        if (maybeQuote === '"') {
            value = value.replace(/\\n/g, "\n");
            value = value.replace(/\\r/g, "\r");
        }
        // Add to object
        obj[key] = value;
    }
    return obj;
}
function _parseVault(options) {
    const vaultPath = _vaultPath(options);
    // Parse .env.vault
    const result = DotenvModule.configDotenv({
        path: vaultPath
    });
    if (!result.parsed) throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
    // handle scenario for comma separated keys - for use with key rotation
    // example: DOTENV_KEY="dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod"
    const keys = _dotenvKey().split(",");
    const length = keys.length;
    let decrypted;
    for(let i = 0; i < length; i++)try {
        // Get full key
        const key = keys[i].trim();
        // Get instructions for decrypt
        const attrs = _instructions(result, key);
        // Decrypt
        decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
        break;
    } catch (error) {
        // last key
        if (i + 1 >= length) throw error;
    // try next key
    }
    // Parse decrypted .env string
    return DotenvModule.parse(decrypted);
}
function _log(message) {
    console.log(`[dotenv@${version}][INFO] ${message}`);
}
function _warn(message) {
    console.log(`[dotenv@${version}][WARN] ${message}`);
}
function _debug(message) {
    console.log(`[dotenv@${version}][DEBUG] ${message}`);
}
function _dotenvKey() {
    return "";
}
function _instructions(result, dotenvKey) {
    // Parse DOTENV_KEY. Format is a URI
    let uri;
    try {
        uri = new URL(dotenvKey);
    } catch (error) {
        if (error.code === "ERR_INVALID_URL") throw new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development");
        throw error;
    }
    // Get decrypt key
    const key = uri.password;
    if (!key) throw new Error("INVALID_DOTENV_KEY: Missing key part");
    // Get environment
    const environment = uri.searchParams.get("environment");
    if (!environment) throw new Error("INVALID_DOTENV_KEY: Missing environment part");
    // Get ciphertext payload
    const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
    const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION
    ;
    if (!ciphertext) throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
    return {
        ciphertext,
        key
    };
}
function _vaultPath(options) {
    let dotenvPath = path.resolve(process.cwd(), ".env");
    if (options && options.path && options.path.length > 0) dotenvPath = options.path;
    // Locate .env.vault
    return dotenvPath.endsWith(".vault") ? dotenvPath : `${dotenvPath}.vault`;
}
function _resolveHome(envPath) {
    return envPath[0] === "~" ? path.join(os.homedir(), envPath.slice(1)) : envPath;
}
function _configVault(options) {
    _log("Loading env from encrypted .env.vault");
    const parsed = DotenvModule._parseVault(options);
    DotenvModule.populate(process.env, parsed, options);
    return {
        parsed
    };
}
function configDotenv(options) {
    let dotenvPath = path.resolve(process.cwd(), ".env");
    let encoding = "utf8";
    const debug = Boolean(options && options.debug);
    if (options) {
        if (options.path != null) dotenvPath = _resolveHome(options.path);
        if (options.encoding != null) encoding = options.encoding;
    }
    try {
        // Specifying an encoding returns a string instead of a buffer
        const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, {
            encoding
        }));
        DotenvModule.populate(process.env, parsed, options);
        return {
            parsed
        };
    } catch (e) {
        if (debug) _debug(`Failed to load ${dotenvPath} ${e.message}`);
        return {
            error: e
        };
    }
}
// Populates process.env from .env file
function config(options) {
    const vaultPath = _vaultPath(options);
    // fallback to original dotenv if DOTENV_KEY is not set
    if (_dotenvKey().length === 0) return DotenvModule.configDotenv(options);
    // dotenvKey exists but .env.vault file does not exist
    if (!fs.existsSync(vaultPath)) {
        _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
        return DotenvModule.configDotenv(options);
    }
    return DotenvModule._configVault(options);
}
function decrypt(encrypted, keyStr) {
    const key = Buffer.from(keyStr.slice(-64), "hex");
    let ciphertext = Buffer.from(encrypted, "base64");
    const nonce = ciphertext.slice(0, 12);
    const authTag = ciphertext.slice(-16);
    ciphertext = ciphertext.slice(12, -16);
    try {
        const aesgcm = crypto.createDecipheriv("aes-256-gcm", key, nonce);
        aesgcm.setAuthTag(authTag);
        return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
    } catch (error) {
        const isRange = error instanceof RangeError;
        const invalidKeyLength = error.message === "Invalid key length";
        const decryptionFailed = error.message === "Unsupported state or unable to authenticate data";
        if (isRange || invalidKeyLength) {
            const msg = "INVALID_DOTENV_KEY: It must be 64 characters long (or more)";
            throw new Error(msg);
        } else if (decryptionFailed) {
            const msg = "DECRYPTION_FAILED: Please check your DOTENV_KEY";
            throw new Error(msg);
        } else {
            console.error("Error: ", error.code);
            console.error("Error: ", error.message);
            throw error;
        }
    }
}
// Populate process.env with parsed values
function populate(processEnv, parsed, options = {}) {
    const debug = Boolean(options && options.debug);
    const override = Boolean(options && options.override);
    if (typeof parsed !== "object") throw new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
    // Set process.env
    for (const key of Object.keys(parsed))if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
        if (override === true) processEnv[key] = parsed[key];
        if (debug) {
            if (override === true) _debug(`"${key}" is already defined and WAS overwritten`);
            else _debug(`"${key}" is already defined and was NOT overwritten`);
        }
    } else processEnv[key] = parsed[key];
}
const DotenvModule = {
    configDotenv,
    _configVault,
    _parseVault,
    config,
    decrypt,
    parse,
    populate
};
module.exports.configDotenv = DotenvModule.configDotenv;
module.exports._configVault = DotenvModule._configVault;
module.exports._parseVault = DotenvModule._parseVault;
module.exports.config = DotenvModule.config;
module.exports.decrypt = DotenvModule.decrypt;
module.exports.parse = DotenvModule.parse;
module.exports.populate = DotenvModule.populate;
module.exports = DotenvModule;

},{"a81606b34c5d81aa":"d5jf4","41bceb7eaaabbe41":"fCgem","3cedb41afbfb34c8":"jhUEF","24ed8c5da1e3fe5e":"loE3o","cbaad8186a70aa4e":"6yyXu","c2a78565a91e0a0d":"hagNj","1e1923289a8e6904":"4QvE8"}],"loE3o":[function(require,module,exports) {
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var process = require("c0743715070b1b8a");
"use strict";
function assertPath(path) {
    if (typeof path !== "string") throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
}
// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
    var res = "";
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;
    for(var i = 0; i <= path.length; ++i){
        if (i < path.length) code = path.charCodeAt(i);
        else if (code === 47 /*/*/ ) break;
        else code = 47 /*/*/ ;
        if (code === 47 /*/*/ ) {
            if (lastSlash === i - 1 || dots === 1) ;
            else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/  || res.charCodeAt(res.length - 2) !== 46 /*.*/ ) {
                    if (res.length > 2) {
                        var lastSlashIndex = res.lastIndexOf("/");
                        if (lastSlashIndex !== res.length - 1) {
                            if (lastSlashIndex === -1) {
                                res = "";
                                lastSegmentLength = 0;
                            } else {
                                res = res.slice(0, lastSlashIndex);
                                lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                            }
                            lastSlash = i;
                            dots = 0;
                            continue;
                        }
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += "/..";
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += "/" + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 /*.*/  && dots !== -1) ++dots;
        else dots = -1;
    }
    return res;
}
function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root;
    var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
var posix = {
    // path.resolve([from ...], to)
    resolve: function resolve() {
        var resolvedPath = "";
        var resolvedAbsolute = false;
        var cwd;
        for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){
            var path;
            if (i >= 0) path = arguments[i];
            else {
                if (cwd === undefined) cwd = process.cwd();
                path = cwd;
            }
            assertPath(path);
            // Skip empty entries
            if (path.length === 0) continue;
            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        // Normalize the path
        resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
            if (resolvedPath.length > 0) return "/" + resolvedPath;
            else return "/";
        } else if (resolvedPath.length > 0) return resolvedPath;
        else return ".";
    },
    normalize: function normalize(path) {
        assertPath(path);
        if (path.length === 0) return ".";
        var isAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/ ;
        // Normalize the path
        path = normalizeStringPosix(path, !isAbsolute);
        if (path.length === 0 && !isAbsolute) path = ".";
        if (path.length > 0 && trailingSeparator) path += "/";
        if (isAbsolute) return "/" + path;
        return path;
    },
    isAbsolute: function isAbsolute(path) {
        assertPath(path);
        return path.length > 0 && path.charCodeAt(0) === 47 /*/*/ ;
    },
    join: function join() {
        if (arguments.length === 0) return ".";
        var joined;
        for(var i = 0; i < arguments.length; ++i){
            var arg = arguments[i];
            assertPath(arg);
            if (arg.length > 0) {
                if (joined === undefined) joined = arg;
                else joined += "/" + arg;
            }
        }
        if (joined === undefined) return ".";
        return posix.normalize(joined);
    },
    relative: function relative(from, to) {
        assertPath(from);
        assertPath(to);
        if (from === to) return "";
        from = posix.resolve(from);
        to = posix.resolve(to);
        if (from === to) return "";
        // Trim any leading backslashes
        var fromStart = 1;
        for(; fromStart < from.length; ++fromStart){
            if (from.charCodeAt(fromStart) !== 47 /*/*/ ) break;
        }
        var fromEnd = from.length;
        var fromLen = fromEnd - fromStart;
        // Trim any leading backslashes
        var toStart = 1;
        for(; toStart < to.length; ++toStart){
            if (to.charCodeAt(toStart) !== 47 /*/*/ ) break;
        }
        var toEnd = to.length;
        var toLen = toEnd - toStart;
        // Compare paths to find the longest common path from root
        var length = fromLen < toLen ? fromLen : toLen;
        var lastCommonSep = -1;
        var i = 0;
        for(; i <= length; ++i){
            if (i === length) {
                if (toLen > length) {
                    if (to.charCodeAt(toStart + i) === 47 /*/*/ ) // We get here if `from` is the exact base path for `to`.
                    // For example: from='/foo/bar'; to='/foo/bar/baz'
                    return to.slice(toStart + i + 1);
                    else if (i === 0) // We get here if `from` is the root
                    // For example: from='/'; to='/foo'
                    return to.slice(toStart + i);
                } else if (fromLen > length) {
                    if (from.charCodeAt(fromStart + i) === 47 /*/*/ ) // We get here if `to` is the exact base path for `from`.
                    // For example: from='/foo/bar/baz'; to='/foo/bar'
                    lastCommonSep = i;
                    else if (i === 0) // We get here if `to` is the root.
                    // For example: from='/foo'; to='/'
                    lastCommonSep = 0;
                }
                break;
            }
            var fromCode = from.charCodeAt(fromStart + i);
            var toCode = to.charCodeAt(toStart + i);
            if (fromCode !== toCode) break;
            else if (fromCode === 47 /*/*/ ) lastCommonSep = i;
        }
        var out = "";
        // Generate the relative path based on the path difference between `to`
        // and `from`
        for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i)if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/ ) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
        // Lastly, append the rest of the destination (`to`) path that comes after
        // the common path parts
        if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
        else {
            toStart += lastCommonSep;
            if (to.charCodeAt(toStart) === 47 /*/*/ ) ++toStart;
            return to.slice(toStart);
        }
    },
    _makeLong: function _makeLong(path) {
        return path;
    },
    dirname: function dirname(path) {
        assertPath(path);
        if (path.length === 0) return ".";
        var code = path.charCodeAt(0);
        var hasRoot = code === 47 /*/*/ ;
        var end = -1;
        var matchedSlash = true;
        for(var i = path.length - 1; i >= 1; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            } else // We saw the first non-path separator
            matchedSlash = false;
        }
        if (end === -1) return hasRoot ? "/" : ".";
        if (hasRoot && end === 1) return "//";
        return path.slice(0, end);
    },
    basename: function basename(path, ext) {
        if (ext !== undefined && typeof ext !== "string") throw new TypeError('"ext" argument must be a string');
        assertPath(path);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
            if (ext.length === path.length && ext === path) return "";
            var extIdx = ext.length - 1;
            var firstNonSlashEnd = -1;
            for(i = path.length - 1; i >= 0; --i){
                var code = path.charCodeAt(i);
                if (code === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === ext.charCodeAt(extIdx)) {
                            if (--extIdx === -1) // We matched the extension, so mark this as the end of our path
                            // component
                            end = i;
                        } else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end) end = firstNonSlashEnd;
            else if (end === -1) end = path.length;
            return path.slice(start, end);
        } else {
            for(i = path.length - 1; i >= 0; --i){
                if (path.charCodeAt(i) === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else if (end === -1) {
                    // We saw the first non-path separator, mark this as the end of our
                    // path component
                    matchedSlash = false;
                    end = i + 1;
                }
            }
            if (end === -1) return "";
            return path.slice(start, end);
        }
    },
    extname: function extname(path) {
        assertPath(path);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        for(var i = path.length - 1; i >= 0; --i){
            var code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) return "";
        return path.slice(startDot, end);
    },
    format: function format(pathObject) {
        if (pathObject === null || typeof pathObject !== "object") throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
        return _format("/", pathObject);
    },
    parse: function parse(path) {
        assertPath(path);
        var ret = {
            root: "",
            dir: "",
            base: "",
            ext: "",
            name: ""
        };
        if (path.length === 0) return ret;
        var code = path.charCodeAt(0);
        var isAbsolute = code === 47 /*/*/ ;
        var start;
        if (isAbsolute) {
            ret.root = "/";
            start = 1;
        } else start = 0;
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        // Get non-dir info
        for(; i >= start; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            if (end !== -1) {
                if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);
                else ret.base = ret.name = path.slice(startPart, end);
            }
        } else {
            if (startPart === 0 && isAbsolute) {
                ret.name = path.slice(1, startDot);
                ret.base = path.slice(1, end);
            } else {
                ret.name = path.slice(startPart, startDot);
                ret.base = path.slice(startPart, end);
            }
            ret.ext = path.slice(startDot, end);
        }
        if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
        else if (isAbsolute) ret.dir = "/";
        return ret;
    },
    sep: "/",
    delimiter: ":",
    win32: null,
    posix: null
};
posix.posix = posix;
module.exports = posix;

},{"c0743715070b1b8a":"d5jf4"}],"6yyXu":[function(require,module,exports) {
exports.endianness = function() {
    return "LE";
};
exports.hostname = function() {
    if (typeof location !== "undefined") return location.hostname;
    else return "";
};
exports.loadavg = function() {
    return [];
};
exports.uptime = function() {
    return 0;
};
exports.freemem = function() {
    return Number.MAX_VALUE;
};
exports.totalmem = function() {
    return Number.MAX_VALUE;
};
exports.cpus = function() {
    return [];
};
exports.type = function() {
    return "Browser";
};
exports.release = function() {
    if (typeof navigator !== "undefined") return navigator.appVersion;
    return "";
};
exports.networkInterfaces = exports.getNetworkInterfaces = function() {
    return {};
};
exports.arch = function() {
    return "javascript";
};
exports.platform = function() {
    return "browser";
};
exports.tmpdir = exports.tmpDir = function() {
    return "/tmp";
};
exports.EOL = "\n";
exports.homedir = function() {
    return "/";
};

},{}],"hagNj":[function(require,module,exports) {
"use strict";
exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require("9f84b01a6f751e2b");
exports.createHash = exports.Hash = require("6215218888164bf3");
exports.createHmac = exports.Hmac = require("41dc42cb22bbf5f8");
var algos = require("acce2639fd57a8ee");
var algoKeys = Object.keys(algos);
var hashes = [
    "sha1",
    "sha224",
    "sha256",
    "sha384",
    "sha512",
    "md5",
    "rmd160"
].concat(algoKeys);
exports.getHashes = function() {
    return hashes;
};
var p = require("b26231bc996405c3");
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;
var aes = require("cd296f7efacbf3dd");
exports.Cipher = aes.Cipher;
exports.createCipher = aes.createCipher;
exports.Cipheriv = aes.Cipheriv;
exports.createCipheriv = aes.createCipheriv;
exports.Decipher = aes.Decipher;
exports.createDecipher = aes.createDecipher;
exports.Decipheriv = aes.Decipheriv;
exports.createDecipheriv = aes.createDecipheriv;
exports.getCiphers = aes.getCiphers;
exports.listCiphers = aes.listCiphers;
var dh = require("f35f6f689077fd07");
exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
exports.getDiffieHellman = dh.getDiffieHellman;
exports.createDiffieHellman = dh.createDiffieHellman;
exports.DiffieHellman = dh.DiffieHellman;
var sign = require("e955328ff9b7dd32");
exports.createSign = sign.createSign;
exports.Sign = sign.Sign;
exports.createVerify = sign.createVerify;
exports.Verify = sign.Verify;
exports.createECDH = require("84e3bfaa4f6c843e");
var publicEncrypt = require("eeb59405cf029b93");
exports.publicEncrypt = publicEncrypt.publicEncrypt;
exports.privateEncrypt = publicEncrypt.privateEncrypt;
exports.publicDecrypt = publicEncrypt.publicDecrypt;
exports.privateDecrypt = publicEncrypt.privateDecrypt;
// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })
var rf = require("327f527258516f60");
exports.randomFill = rf.randomFill;
exports.randomFillSync = rf.randomFillSync;
exports.createCredentials = function() {
    throw new Error([
        "sorry, createCredentials is not implemented yet",
        "we accept pull requests",
        "https://github.com/crypto-browserify/crypto-browserify"
    ].join("\n"));
};
exports.constants = {
    "DH_CHECK_P_NOT_SAFE_PRIME": 2,
    "DH_CHECK_P_NOT_PRIME": 1,
    "DH_UNABLE_TO_CHECK_GENERATOR": 4,
    "DH_NOT_SUITABLE_GENERATOR": 8,
    "NPN_ENABLED": 1,
    "ALPN_ENABLED": 1,
    "RSA_PKCS1_PADDING": 1,
    "RSA_SSLV23_PADDING": 2,
    "RSA_NO_PADDING": 3,
    "RSA_PKCS1_OAEP_PADDING": 4,
    "RSA_X931_PADDING": 5,
    "RSA_PKCS1_PSS_PADDING": 6,
    "POINT_CONVERSION_COMPRESSED": 2,
    "POINT_CONVERSION_UNCOMPRESSED": 4,
    "POINT_CONVERSION_HYBRID": 6
};

},{"9f84b01a6f751e2b":"8hjhE","6215218888164bf3":"2WyL8","41dc42cb22bbf5f8":"k1utz","acce2639fd57a8ee":"busIB","b26231bc996405c3":"g38Hg","cd296f7efacbf3dd":"d4idn","f35f6f689077fd07":"hwD3y","e955328ff9b7dd32":"jbRNy","84e3bfaa4f6c843e":"9Rcg1","eeb59405cf029b93":"h9Rdh","327f527258516f60":"k3tsT"}],"8hjhE":[function(require,module,exports) {
var global = arguments[3];
var process = require("9f5c61be6bd9c67a");
"use strict";
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295;
function oldBrowser() {
    throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
}
var Buffer = require("caff9346743c214e").Buffer;
var crypto = global.crypto || global.msCrypto;
if (crypto && crypto.getRandomValues) module.exports = randomBytes;
else module.exports = oldBrowser;
function randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
    var bytes = Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        else crypto.getRandomValues(bytes);
    }
    if (typeof cb === "function") return process.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

},{"9f5c61be6bd9c67a":"d5jf4","caff9346743c214e":"eW7r9"}],"eW7r9":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("7e0d6ecd698c3ca6");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return buffer.SlowBuffer(size);
};

},{"7e0d6ecd698c3ca6":"fCgem"}],"2WyL8":[function(require,module,exports) {
"use strict";
var inherits = require("45ce174cec337471");
var MD5 = require("4170b0039f3b4aab");
var RIPEMD160 = require("efcc6ede1fda4d98");
var sha = require("65b1a51ddac82548");
var Base = require("ac5a46c0f3b4d769");
function Hash(hash) {
    Base.call(this, "digest");
    this._hash = hash;
}
inherits(Hash, Base);
Hash.prototype._update = function(data) {
    this._hash.update(data);
};
Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === "md5") return new MD5();
    if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD160();
    return new Hash(sha(alg));
};

},{"45ce174cec337471":"bRL3M","4170b0039f3b4aab":"45VeE","efcc6ede1fda4d98":"bFDDq","65b1a51ddac82548":"jkn7m","ac5a46c0f3b4d769":"g5fTz"}],"bRL3M":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"45VeE":[function(require,module,exports) {
"use strict";
var inherits = require("634114d48656c754");
var HashBase = require("4b170874b4cb8d4e");
var Buffer = require("72d4e45c6a42a2da").Buffer;
var ARRAY16 = new Array(16);
function MD5() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
}
inherits(MD5, HashBase);
MD5.prototype._update = function() {
    var M = ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fnF(a, b, c, d, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function fnG(a, b, c, d, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function fnH(a, b, c, d, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function fnI(a, b, c, d, m, k, s) {
    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = MD5;

},{"634114d48656c754":"bRL3M","4b170874b4cb8d4e":"51qBP","72d4e45c6a42a2da":"eW7r9"}],"51qBP":[function(require,module,exports) {
"use strict";
var Buffer = require("27eaec8a721206a5").Buffer;
var Transform = require("c5aab47d8f1d340a").Transform;
var inherits = require("91e9fa68d440541e");
function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== "string") throw new TypeError(prefix + " must be a string or a buffer");
}
function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, "Data");
    if (this._finalized) throw new Error("Digest already called");
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }
    return this;
};
HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
};
HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
};
module.exports = HashBase;

},{"27eaec8a721206a5":"eW7r9","c5aab47d8f1d340a":"jXNWE","91e9fa68d440541e":"bRL3M"}],"jXNWE":[function(require,module,exports) {
exports = module.exports = require("68bb3bdae87803ec");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require("74167f79b688eaf7");
exports.Duplex = require("84600f6783428a47");
exports.Transform = require("23bee5f697448a0");
exports.PassThrough = require("e0ec4b8e438dbbd");
exports.finished = require("6cc0f9af7147cdbc");
exports.pipeline = require("f90db22d01d3c3d1");

},{"68bb3bdae87803ec":"6NdbQ","74167f79b688eaf7":"gTkcq","84600f6783428a47":"kKNA3","23bee5f697448a0":"ba8Mr","e0ec4b8e438dbbd":"2xP98","6cc0f9af7147cdbc":"aOMy2","f90db22d01d3c3d1":"fyp4t"}],"6NdbQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var global = arguments[3];
var process = require("896ff8d56553f7a");
"use strict";
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("16782d660ac22e0c").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("9a34f23fa53f83f7");
/*</replacement>*/ var Buffer = require("fb95ecaa88342eae").Buffer;
var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("a4a723b7297c7152");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("7a14cc1689b8c63e");
var destroyImpl = require("efa8155386cc4283");
var _require = require("994c984d08c7bbf2"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("8de60461b822641b").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("19affa8ce41f090d")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("f1c95f846e94e4eb");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("6392acd10886f115").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("f1c95f846e94e4eb");
    if (!(this instanceof Readable)) return new Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};
// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("6392acd10886f115").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function nReadingNextTick(self1) {
    debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("830c56f840811f05");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("7451b8c4bf72370");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"896ff8d56553f7a":"d5jf4","16782d660ac22e0c":"1VQLm","9a34f23fa53f83f7":"60BLS","fb95ecaa88342eae":"fCgem","a4a723b7297c7152":"jhUEF","7a14cc1689b8c63e":"hf3P2","efa8155386cc4283":"YI8DF","994c984d08c7bbf2":"61BRN","8de60461b822641b":"aJlwj","19affa8ce41f090d":"bRL3M","f1c95f846e94e4eb":"kKNA3","6392acd10886f115":"3vmkr","830c56f840811f05":"k019Y","7451b8c4bf72370":"ak0YH"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"60BLS":[function(require,module,exports) {
module.exports = require("ed88fc9aa73f911").EventEmitter;

},{"ed88fc9aa73f911":"1VQLm"}],"hf3P2":[function(require,module,exports) {
"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var _require = require("59f5d0111b7fa075"), Buffer = _require.Buffer;
var _require2 = require("eef6a677577349b8"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || "inspect";
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"59f5d0111b7fa075":"fCgem","eef6a677577349b8":"jhUEF"}],"YI8DF":[function(require,module,exports) {
var process = require("4284522496af5dfb");
"use strict";
// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"4284522496af5dfb":"d5jf4"}],"61BRN":[function(require,module,exports) {
"use strict";
var ERR_INVALID_OPT_VALUE = require("4e508d569e2117ef").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"4e508d569e2117ef":"aJlwj"}],"aJlwj":[function(require,module,exports) {
"use strict";
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
module.exports.codes = codes;

},{}],"kKNA3":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
var process = require("2ab1115635c50a9f");
"use strict";
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("68a7582259cd5865");
var Writable = require("93d042f8bb80078e");
require("aa7b11ba5bf4defc")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"2ab1115635c50a9f":"d5jf4","68a7582259cd5865":"6NdbQ","93d042f8bb80078e":"gTkcq","aa7b11ba5bf4defc":"bRL3M"}],"gTkcq":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
var global = arguments[3];
var process = require("f05a2a5a09d4d8b0");
"use strict";
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("dc51171b07b54af1")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("44a3cc22ec64fcd3");
/*</replacement>*/ var Buffer = require("de8f7fb7ccda8086").Buffer;
var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("acf48fb5d9dc6204");
var _require = require("9d146cd974da0f53"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("3c574b8881abcf86").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("10dad555ffe77dde")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("c5e7171d6f58d3c0");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("c5e7171d6f58d3c0");
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"f05a2a5a09d4d8b0":"d5jf4","dc51171b07b54af1":"j92NQ","44a3cc22ec64fcd3":"60BLS","de8f7fb7ccda8086":"fCgem","acf48fb5d9dc6204":"YI8DF","9d146cd974da0f53":"61BRN","3c574b8881abcf86":"aJlwj","10dad555ffe77dde":"bRL3M","c5e7171d6f58d3c0":"kKNA3"}],"j92NQ":[function(require,module,exports) {
/**
 * Module exports.
 */ var global = arguments[3];
module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config("throwDeprecation")) throw new Error(msg);
            else if (config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

},{}],"3vmkr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
/*<replacement>*/ var Buffer = require("2a29807c689a070a").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "�";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "�";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "�";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "�";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

},{"2a29807c689a070a":"eW7r9"}],"k019Y":[function(require,module,exports) {
var process = require("96b869862a96261a");
"use strict";
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var finished = require("745a3cd8f6469ed5");
var kLastResolve = Symbol("lastResolve");
var kLastReject = Symbol("lastReject");
var kError = Symbol("error");
var kEnded = Symbol("ended");
var kLastPromise = Symbol("lastPromise");
var kHandlePromise = Symbol("handlePromise");
var kStream = Symbol("stream");
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"96b869862a96261a":"d5jf4","745a3cd8f6469ed5":"aOMy2"}],"aOMy2":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var ERR_STREAM_PREMATURE_CLOSE = require("d35458f585bdd360").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = eos;

},{"d35458f585bdd360":"aJlwj"}],"ak0YH":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

},{}],"ba8Mr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = Transform;
var _require$codes = require("baab47252aa06434").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("db11ebf938e536ed");
require("82049677fa603d40")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"baab47252aa06434":"aJlwj","db11ebf938e536ed":"kKNA3","82049677fa603d40":"bRL3M"}],"2xP98":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = PassThrough;
var Transform = require("7ab21291895ec3d2");
require("f24ec1883eef5e9b")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"7ab21291895ec3d2":"ba8Mr","f24ec1883eef5e9b":"bRL3M"}],"fyp4t":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("6ba21bd580ac7d57").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if (eos === undefined) eos = require("dd7fd89dd81b8674");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== "function") return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"6ba21bd580ac7d57":"aJlwj","dd7fd89dd81b8674":"aOMy2"}],"bFDDq":[function(require,module,exports) {
"use strict";
var Buffer = require("c813c8075bcf823e").Buffer;
var inherits = require("84928993e7c3934b");
var HashBase = require("4b3519823770a56d");
var ARRAY16 = new Array(16);
var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var hl = [
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
];
var hr = [
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
];
function RIPEMD160() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
}
inherits(RIPEMD160, HashBase);
RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fn1(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function fn2(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function fn3(a, b, c, d, e, m, k, s) {
    return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function fn4(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function fn5(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = RIPEMD160;

},{"c813c8075bcf823e":"fCgem","84928993e7c3934b":"bRL3M","4b3519823770a56d":"51qBP"}],"jkn7m":[function(require,module,exports) {
var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
};
exports.sha = require("54c9313943368ce2");
exports.sha1 = require("6e6f42e0b6fe29ef");
exports.sha224 = require("cefe70c6f9f68940");
exports.sha256 = require("3b4e2aa73bc3fef5");
exports.sha384 = require("be7da8b8e5a0fd78");
exports.sha512 = require("25610a4ba83316a4");

},{"54c9313943368ce2":"6PecA","6e6f42e0b6fe29ef":"iCEYJ","cefe70c6f9f68940":"7e0O2","3b4e2aa73bc3fef5":"kVAym","be7da8b8e5a0fd78":"bWRvM","25610a4ba83316a4":"aZK4H"}],"6PecA":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ var inherits = require("55404b425acd1c6f");
var Hash = require("457bc9c7737d761f");
var Buffer = require("44759e57eb2992a").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha, Hash);
Sha.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha;

},{"55404b425acd1c6f":"bRL3M","457bc9c7737d761f":"7wpAR","44759e57eb2992a":"eW7r9"}],"7wpAR":[function(require,module,exports) {
var Buffer = require("fe67468afd3c1b91").Buffer;
// prototype class for hash functions
function Hash(blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
Hash.prototype.update = function(data, enc) {
    if (typeof data === "string") {
        enc = enc || "utf8";
        data = Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
};
module.exports = Hash;

},{"fe67468afd3c1b91":"eW7r9"}],"iCEYJ":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ var inherits = require("bf0dcaa2121c06d3");
var Hash = require("788f05b1f9753762");
var Buffer = require("ee7c2a3e649d259f").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha1() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl1(num) {
    return num << 1 | num >>> 31;
}
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha1.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha1;

},{"bf0dcaa2121c06d3":"bRL3M","788f05b1f9753762":"7wpAR","ee7c2a3e649d259f":"eW7r9"}],"7e0O2":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("1759318dd61b32af");
var Sha256 = require("5a24a8ff4dc414f6");
var Hash = require("377596dd27739a66");
var Buffer = require("381289f917f16a20").Buffer;
var W = new Array(64);
function Sha224() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha224, Sha256);
Sha224.prototype.init = function() {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
};
Sha224.prototype._hash = function() {
    var H = Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = Sha224;

},{"1759318dd61b32af":"bRL3M","5a24a8ff4dc414f6":"kVAym","377596dd27739a66":"7wpAR","381289f917f16a20":"eW7r9"}],"kVAym":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("682a6716eeab42dd");
var Hash = require("f062bd789841a9ce");
var Buffer = require("1d47643a8adb8c1b").Buffer;
var K = [
    0x428A2F98,
    0x71374491,
    0xB5C0FBCF,
    0xE9B5DBA5,
    0x3956C25B,
    0x59F111F1,
    0x923F82A4,
    0xAB1C5ED5,
    0xD807AA98,
    0x12835B01,
    0x243185BE,
    0x550C7DC3,
    0x72BE5D74,
    0x80DEB1FE,
    0x9BDC06A7,
    0xC19BF174,
    0xE49B69C1,
    0xEFBE4786,
    0x0FC19DC6,
    0x240CA1CC,
    0x2DE92C6F,
    0x4A7484AA,
    0x5CB0A9DC,
    0x76F988DA,
    0x983E5152,
    0xA831C66D,
    0xB00327C8,
    0xBF597FC7,
    0xC6E00BF3,
    0xD5A79147,
    0x06CA6351,
    0x14292967,
    0x27B70A85,
    0x2E1B2138,
    0x4D2C6DFC,
    0x53380D13,
    0x650A7354,
    0x766A0ABB,
    0x81C2C92E,
    0x92722C85,
    0xA2BFE8A1,
    0xA81A664B,
    0xC24B8B70,
    0xC76C51A3,
    0xD192E819,
    0xD6990624,
    0xF40E3585,
    0x106AA070,
    0x19A4C116,
    0x1E376C08,
    0x2748774C,
    0x34B0BCB5,
    0x391C0CB3,
    0x4ED8AA4A,
    0x5B9CCA4F,
    0x682E6FF3,
    0x748F82EE,
    0x78A5636F,
    0x84C87814,
    0x8CC70208,
    0x90BEFFFA,
    0xA4506CEB,
    0xBEF9A3F7,
    0xC67178F2
];
var W = new Array(64);
function Sha256() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
};
function ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
    var H = Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = Sha256;

},{"682a6716eeab42dd":"bRL3M","f062bd789841a9ce":"7wpAR","1d47643a8adb8c1b":"eW7r9"}],"bWRvM":[function(require,module,exports) {
var inherits = require("2a5cbb73fedd61b");
var SHA512 = require("fdb4d0946b31cdb5");
var Hash = require("50aa04d4bd2df0e1");
var Buffer = require("3d3bcc84ec383b74").Buffer;
var W = new Array(160);
function Sha384() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha384, SHA512);
Sha384.prototype.init = function() {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
};
Sha384.prototype._hash = function() {
    var H = Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = Sha384;

},{"2a5cbb73fedd61b":"bRL3M","fdb4d0946b31cdb5":"aZK4H","50aa04d4bd2df0e1":"7wpAR","3d3bcc84ec383b74":"eW7r9"}],"aZK4H":[function(require,module,exports) {
var inherits = require("8d87c82d5ce5743");
var Hash = require("27d0146c4419ba93");
var Buffer = require("602d9c7256ca6bf7").Buffer;
var K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
var W = new Array(160);
function Sha512() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
};
function Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};
Sha512.prototype._hash = function() {
    var H = Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = Sha512;

},{"8d87c82d5ce5743":"bRL3M","27d0146c4419ba93":"7wpAR","602d9c7256ca6bf7":"eW7r9"}],"g5fTz":[function(require,module,exports) {
var Buffer = require("631f7eb12d35b579").Buffer;
var Transform = require("5b378a2a05398c5").Transform;
var StringDecoder = require("d42da7de127e1c4b").StringDecoder;
var inherits = require("7a0f2f27fe0a389b");
function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === "string";
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
inherits(CipherBase, Transform);
CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === "string") data = Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
CipherBase.prototype.setAutoPadding = function() {};
CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
};
CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
};
CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
};
CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error("can't switch encodings");
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = CipherBase;

},{"631f7eb12d35b579":"eW7r9","5b378a2a05398c5":"j77ns","d42da7de127e1c4b":"3vmkr","7a0f2f27fe0a389b":"bRL3M"}],"j77ns":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;
var EE = require("96b62835346f84f0").EventEmitter;
var inherits = require("4a6ee9586f51c38d");
inherits(Stream, EE);
Stream.Readable = require("e6206e1f4d20abc7");
Stream.Writable = require("a3f1405f37e1dfb1");
Stream.Duplex = require("6691a72c5fc222fd");
Stream.Transform = require("43a905ce7ec6ac9e");
Stream.PassThrough = require("dd715550d7783885");
Stream.finished = require("d90a3520974ec96e");
Stream.pipeline = require("eb2779cfd287c5c9");
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream() {
    EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on("data", ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on("drain", ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

},{"96b62835346f84f0":"1VQLm","4a6ee9586f51c38d":"bRL3M","e6206e1f4d20abc7":"6NdbQ","a3f1405f37e1dfb1":"gTkcq","6691a72c5fc222fd":"kKNA3","43a905ce7ec6ac9e":"ba8Mr","dd715550d7783885":"2xP98","d90a3520974ec96e":"aOMy2","eb2779cfd287c5c9":"fyp4t"}],"k1utz":[function(require,module,exports) {
"use strict";
var inherits = require("6a73c7c8ca6b61fa");
var Legacy = require("e1b443c27c833bc0");
var Base = require("7571755cc57fd60e");
var Buffer = require("b8ba1339feab1938").Buffer;
var md5 = require("c00fb3fd28cadeb2");
var RIPEMD160 = require("b7f8eae556813ec1");
var sha = require("40c5a912778271f7");
var ZEROS = Buffer.alloc(128);
function Hmac(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") key = Buffer.from(key);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
    this._hash.update(ipad);
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === "rmd160" || alg === "ripemd160") return new Hmac("rmd160", key);
    if (alg === "md5") return new Legacy(md5, key);
    return new Hmac(alg, key);
};

},{"6a73c7c8ca6b61fa":"bRL3M","e1b443c27c833bc0":"kO6k7","7571755cc57fd60e":"g5fTz","b8ba1339feab1938":"eW7r9","c00fb3fd28cadeb2":"h5gRT","b7f8eae556813ec1":"bFDDq","40c5a912778271f7":"jkn7m"}],"kO6k7":[function(require,module,exports) {
"use strict";
var inherits = require("2baf2864ece10f11");
var Buffer = require("c7fb5e22d675c53c").Buffer;
var Base = require("8fdec7d6b96329ea");
var ZEROS = Buffer.alloc(128);
var blocksize = 64;
function Hmac(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") key = Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) key = alg(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = [
        ipad
    ];
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
Hmac.prototype._final = function() {
    var h = this._alg(Buffer.concat(this._hash));
    return this._alg(Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = Hmac;

},{"2baf2864ece10f11":"bRL3M","c7fb5e22d675c53c":"eW7r9","8fdec7d6b96329ea":"g5fTz"}],"h5gRT":[function(require,module,exports) {
var MD5 = require("f07cc93582c49804");
module.exports = function(buffer) {
    return new MD5().update(buffer).digest();
};

},{"f07cc93582c49804":"45VeE"}],"busIB":[function(require,module,exports) {
module.exports = require("b6a65ebe2480cb5a");

},{"b6a65ebe2480cb5a":"kWFdV"}],"kWFdV":[function(require,module,exports) {
module.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');

},{}],"g38Hg":[function(require,module,exports) {
exports.pbkdf2 = require("50310b85983e4f32");
exports.pbkdf2Sync = require("5f7b0df9c2ef196d");

},{"50310b85983e4f32":"aqdig","5f7b0df9c2ef196d":"lh9gw"}],"aqdig":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("a1f6b66eddae53e0").Buffer;
var checkParameters = require("a915fb954a5b62ac");
var defaultEncoding = require("76b8747fb257c65c");
var sync = require("f6f43e3eaadd9ae9");
var toBuffer = require("d12cab846fc3f945");
var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
    sha: "SHA-1",
    "sha-1": "SHA-1",
    sha1: "SHA-1",
    sha256: "SHA-256",
    "sha-256": "SHA-256",
    sha384: "SHA-384",
    "sha-384": "SHA-384",
    "sha-512": "SHA-512",
    sha512: "SHA-512"
};
var checks = [];
function checkNative(algo) {
    if (global.process && !global.process.browser) return Promise.resolve(false);
    if (!subtle || !subtle.importKey || !subtle.deriveBits) return Promise.resolve(false);
    if (checks[algo] !== undefined) return checks[algo];
    ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    checks[algo] = prom;
    return prom;
}
var nextTick;
function getNextTick() {
    if (nextTick) return nextTick;
    if (global.process && global.process.nextTick) nextTick = global.process.nextTick;
    else if (global.queueMicrotask) nextTick = global.queueMicrotask;
    else if (global.setImmediate) nextTick = global.setImmediate;
    else nextTick = global.setTimeout;
    return nextTick;
}
function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey("raw", password, {
        name: "PBKDF2"
    }, false, [
        "deriveBits"
    ]).then(function(key) {
        return subtle.deriveBits({
            name: "PBKDF2",
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return Buffer.from(res);
    });
}
function resolvePromise(promise, callback) {
    promise.then(function(out) {
        getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === "function") {
        callback = digest;
        digest = undefined;
    }
    digest = digest || "sha1";
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof global.Promise !== "function") {
        getNextTick()(function() {
            var out;
            try {
                out = sync(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, "Password");
    salt = toBuffer(salt, defaultEncoding, "Salt");
    if (typeof callback !== "function") throw new Error("No callback provided to pbkdf2");
    resolvePromise(checkNative(algo).then(function(resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
        return sync(password, salt, iterations, keylen, digest);
    }), callback);
};

},{"a1f6b66eddae53e0":"eW7r9","a915fb954a5b62ac":"jg75G","76b8747fb257c65c":"T9r9Q","f6f43e3eaadd9ae9":"lh9gw","d12cab846fc3f945":"kaFyH"}],"jg75G":[function(require,module,exports) {
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== "number") throw new TypeError("Iterations not a number");
    if (iterations < 0) throw new TypeError("Bad iterations");
    if (typeof keylen !== "number") throw new TypeError("Key length not a number");
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) throw new TypeError("Bad key length");
};

},{}],"T9r9Q":[function(require,module,exports) {
var global = arguments[3];
var process = require("6b9fe6b7a0bbf941");
var defaultEncoding;
/* istanbul ignore next */ if (global.process && global.process.browser) defaultEncoding = "utf-8";
else if (global.process && global.process.version) {
    var pVersionMajor = parseInt(process.version.split(".")[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
} else defaultEncoding = "utf-8";
module.exports = defaultEncoding;

},{"6b9fe6b7a0bbf941":"d5jf4"}],"lh9gw":[function(require,module,exports) {
var md5 = require("1e04e1c2d51cd13d");
var RIPEMD160 = require("42015ac33af139f8");
var sha = require("a7eb8e83614997ca");
var Buffer = require("290c92d9373f664d").Buffer;
var checkParameters = require("1b04775c4713da3d");
var defaultEncoding = require("b290a762e8475e9f");
var toBuffer = require("82c0eccfe5526b2c");
var ZEROS = Buffer.alloc(128);
var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function Hmac(alg, key, saltLen) {
    var hash = getDigest(alg);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = sizes[alg];
}
Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function getDigest(alg) {
    function shaFunc(data) {
        return sha(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
    }
    if (alg === "rmd160" || alg === "ripemd160") return rmd160Func;
    if (alg === "md5") return md5;
    return shaFunc;
}
function pbkdf2(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, "Password");
    salt = toBuffer(salt, defaultEncoding, "Salt");
    digest = digest || "sha1";
    var hmac = new Hmac(digest, password, salt.length);
    var DK = Buffer.allocUnsafe(keylen);
    var block1 = Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = pbkdf2;

},{"1e04e1c2d51cd13d":"h5gRT","42015ac33af139f8":"bFDDq","a7eb8e83614997ca":"jkn7m","290c92d9373f664d":"eW7r9","1b04775c4713da3d":"jg75G","b290a762e8475e9f":"T9r9Q","82c0eccfe5526b2c":"kaFyH"}],"kaFyH":[function(require,module,exports) {
var Buffer = require("cc6579c2e1506b6d").Buffer;
module.exports = function(thing, encoding, name) {
    if (Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === "string") return Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return Buffer.from(thing.buffer);
    else throw new TypeError(name + " must be a string, a Buffer, a typed array or a DataView");
};

},{"cc6579c2e1506b6d":"eW7r9"}],"d4idn":[function(require,module,exports) {
var DES = require("9fddd06e02c9f65f");
var aes = require("c080e0e074a10616");
var aesModes = require("deca4106fa6cf801");
var desModes = require("7141e0762da15af0");
var ebtk = require("ca278cb2f2d32ea3");
function createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys.key, keys.iv);
}
function createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys.key, keys.iv);
}
function createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError("invalid suite type");
}
function createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError("invalid suite type");
}
function getCiphers() {
    return Object.keys(desModes).concat(aes.getCiphers());
}
exports.createCipher = exports.Cipher = createCipher;
exports.createCipheriv = exports.Cipheriv = createCipheriv;
exports.createDecipher = exports.Decipher = createDecipher;
exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"9fddd06e02c9f65f":"d7hSK","c080e0e074a10616":"hnlHj","deca4106fa6cf801":"jyQSU","7141e0762da15af0":"iO8co","ca278cb2f2d32ea3":"1rd4d"}],"d7hSK":[function(require,module,exports) {
var CipherBase = require("4df025afd5a20f9f");
var des = require("8ea0942e2f125a3");
var inherits = require("8a7d640fedcdd788");
var Buffer = require("c9c674d2a2a092c4").Buffer;
var modes = {
    "des-ede3-cbc": des.CBC.instantiate(des.EDE),
    "des-ede3": des.EDE,
    "des-ede-cbc": des.CBC.instantiate(des.EDE),
    "des-ede": des.EDE,
    "des-cbc": des.CBC.instantiate(des.DES),
    "des-ecb": des.DES
};
modes.des = modes["des-cbc"];
modes.des3 = modes["des-ede3-cbc"];
module.exports = DES;
inherits(DES, CipherBase);
function DES(opts) {
    CipherBase.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = modes[modeName];
    var type;
    if (opts.decrypt) type = "decrypt";
    else type = "encrypt";
    var key = opts.key;
    if (!Buffer.isBuffer(key)) key = Buffer.from(key);
    if (modeName === "des-ede" || modeName === "des-ede-cbc") key = Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!Buffer.isBuffer(iv)) iv = Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
DES.prototype._update = function(data) {
    return Buffer.from(this._des.update(data));
};
DES.prototype._final = function() {
    return Buffer.from(this._des.final());
};

},{"4df025afd5a20f9f":"g5fTz","8ea0942e2f125a3":"jn95T","8a7d640fedcdd788":"bRL3M","c9c674d2a2a092c4":"eW7r9"}],"jn95T":[function(require,module,exports) {
"use strict";
exports.utils = require("c56851640eb0e265");
exports.Cipher = require("22f0b7ac3b9c9316");
exports.DES = require("d0445787359f92a0");
exports.CBC = require("203ada8fdbbff440");
exports.EDE = require("736756ddbc573f7");

},{"c56851640eb0e265":"aeccw","22f0b7ac3b9c9316":"jz3In","d0445787359f92a0":"gDFTo","203ada8fdbbff440":"lPo0P","736756ddbc573f7":"avp7S"}],"aeccw":[function(require,module,exports) {
"use strict";
exports.readUInt32BE = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 0xff;
    bytes[2 + off] = value >>> 8 & 0xff;
    bytes[3 + off] = value & 0xff;
};
exports.ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.r28shl = function r28shl(num, shift) {
    return num << shift & 0xfffffff | num >>> 28 - shift;
};
var pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
exports.pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 0x1;
    }
    for(var i = len; i < pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 0x1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.expand = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 0x3f;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 0x3f;
        outR <<= 6;
    }
    outR |= (r & 0x1f) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
exports.substitute = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 0x3f;
        var sb = sTable[i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 0x3f;
        var sb = sTable[256 + i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
exports.permute = function permute(num) {
    var out = 0;
    for(var i = 0; i < permuteTable.length; i++){
        out <<= 1;
        out |= num >>> permuteTable[i] & 0x1;
    }
    return out >>> 0;
};
exports.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = "0" + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(" ");
};

},{}],"jz3In":[function(require,module,exports) {
"use strict";
var assert = require("85cfb697294fd1d8");
function Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
    this.padding = options.padding !== false;
}
module.exports = Cipher;
Cipher.prototype._init = function _init() {
// Might be overrided
};
Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === "decrypt") return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === "encrypt") last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    assert.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

},{"85cfb697294fd1d8":"8OvWh"}],"8OvWh":[function(require,module,exports) {
module.exports = assert;
function assert(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}
assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};

},{}],"gDFTo":[function(require,module,exports) {
"use strict";
var assert = require("2e43e10aa2de50ed");
var inherits = require("551480b8aa09d318");
var utils = require("b6dc5b7926f5a82f");
var Cipher = require("38547d2f1967e2cd");
function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function DES(options) {
    Cipher.call(this, options);
    var state = new DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;
DES.create = function create(options) {
    return new DES(options);
};
var shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    assert.equal(key.length, this.blockSize, "Invalid key length");
    var kL = utils.readUInt32BE(key, 0);
    var kR = utils.readUInt32BE(key, 4);
    utils.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
    }
};
DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = utils.readUInt32BE(inp, inOff);
    var r = utils.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    utils.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === "encrypt") this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    utils.writeUInt32BE(out, l, outOff);
    utils.writeUInt32BE(out, r, outOff + 4);
};
DES.prototype._pad = function _pad(buffer, off) {
    if (this.padding === false) return false;
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
DES.prototype._unpad = function _unpad(buffer) {
    if (this.padding === false) return buffer;
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)assert.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    utils.rip(r, l, out, off);
};
DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    utils.rip(l, r, out, off);
};

},{"2e43e10aa2de50ed":"8OvWh","551480b8aa09d318":"bRL3M","b6dc5b7926f5a82f":"aeccw","38547d2f1967e2cd":"jz3In"}],"lPo0P":[function(require,module,exports) {
"use strict";
var assert = require("63ac301527fc117b");
var inherits = require("7d48f4d3d39d3b86");
var proto = {};
function CBCState(iv) {
    assert.equal(iv.length, 8, "Invalid IV length");
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    inherits(CBC, Base);
    var keys = Object.keys(proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
exports.instantiate = instantiate;
proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
};
proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === "encrypt") {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

},{"63ac301527fc117b":"8OvWh","7d48f4d3d39d3b86":"bRL3M"}],"avp7S":[function(require,module,exports) {
"use strict";
var assert = require("d5bfc55b5aa12c8d");
var inherits = require("39ce41101e752862");
var Cipher = require("ba2db61b5607fad4");
var DES = require("f13080dd5389ba87");
function EDEState(type, key) {
    assert.equal(key.length, 24, "Invalid key length");
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === "encrypt") this.ciphers = [
        DES.create({
            type: "encrypt",
            key: k1
        }),
        DES.create({
            type: "decrypt",
            key: k2
        }),
        DES.create({
            type: "encrypt",
            key: k3
        })
    ];
    else this.ciphers = [
        DES.create({
            type: "decrypt",
            key: k3
        }),
        DES.create({
            type: "encrypt",
            key: k2
        }),
        DES.create({
            type: "decrypt",
            key: k1
        })
    ];
}
function EDE(options) {
    Cipher.call(this, options);
    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
}
inherits(EDE, Cipher);
module.exports = EDE;
EDE.create = function create(options) {
    return new EDE(options);
};
EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"d5bfc55b5aa12c8d":"8OvWh","39ce41101e752862":"bRL3M","ba2db61b5607fad4":"jz3In","f13080dd5389ba87":"gDFTo"}],"hnlHj":[function(require,module,exports) {
var ciphers = require("852cf53431a1f811");
var deciphers = require("cf65999dbb4c5e15");
var modes = require("deceb76ffb34f58f");
function getCiphers() {
    return Object.keys(modes);
}
exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"852cf53431a1f811":"7DBsd","cf65999dbb4c5e15":"cixt2","deceb76ffb34f58f":"1XQMU"}],"7DBsd":[function(require,module,exports) {
var MODES = require("634015cf40a677fe");
var AuthCipher = require("ca7c032525082be8");
var Buffer = require("2bd35013f47d4062").Buffer;
var StreamCipher = require("2b03aae3a1335af6");
var Transform = require("138a78277ccfd16f");
var aes = require("cc8a1e2b2934f08f");
var ebtk = require("b149eab8b94068d4");
var inherits = require("ebc328fc178264d2");
function Cipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Cipher, Transform);
Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
var PADDING = Buffer.alloc(16, 0x10);
Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error("data not multiple of block length");
    }
};
Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)padBuff.writeUInt8(len, i);
    return Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function createCipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    if (typeof password === "string") password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
    if (typeof iv === "string") iv = Buffer.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
    if (config.type === "stream") return new StreamCipher(config.module, password, iv);
    else if (config.type === "auth") return new AuthCipher(config.module, password, iv);
    return new Cipher(config.module, password, iv);
}
function createCipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv);
}
exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

},{"634015cf40a677fe":"jyQSU","ca7c032525082be8":"kn9wf","2bd35013f47d4062":"eW7r9","2b03aae3a1335af6":"4ZMNU","138a78277ccfd16f":"g5fTz","cc8a1e2b2934f08f":"4VzKF","b149eab8b94068d4":"1rd4d","ebc328fc178264d2":"bRL3M"}],"jyQSU":[function(require,module,exports) {
var modeModules = {
    ECB: require("c49ddaf3154fac1e"),
    CBC: require("7c781e2d9206f623"),
    CFB: require("12dfbd130b5827a1"),
    CFB8: require("ae02434166690767"),
    CFB1: require("15ddc45cf76ec123"),
    OFB: require("62e3e290f0879f98"),
    CTR: require("1e6578fa70b860a7"),
    GCM: require("1e6578fa70b860a7")
};
var modes = require("b313067770c9aed2");
for(var key in modes)modes[key].module = modeModules[modes[key].mode];
module.exports = modes;

},{"c49ddaf3154fac1e":"f4tme","7c781e2d9206f623":"8JcO4","12dfbd130b5827a1":"dVMRE","ae02434166690767":"jk3Qm","15ddc45cf76ec123":"4BsKj","62e3e290f0879f98":"9DT3x","1e6578fa70b860a7":"fLj86","b313067770c9aed2":"1XQMU"}],"f4tme":[function(require,module,exports) {
exports.encrypt = function(self, block) {
    return self._cipher.encryptBlock(block);
};
exports.decrypt = function(self, block) {
    return self._cipher.decryptBlock(block);
};

},{}],"8JcO4":[function(require,module,exports) {
var xor = require("587e692127ea2c31");
exports.encrypt = function(self, block) {
    var data = xor(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
exports.decrypt = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return xor(out, pad);
};

},{"587e692127ea2c31":"eYhY5"}],"eYhY5":[function(require,module,exports) {
var Buffer = require("ccae1b11eb3a9ec8").Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

},{"ccae1b11eb3a9ec8":"fCgem"}],"dVMRE":[function(require,module,exports) {
var Buffer = require("7747ec7a535c746a").Buffer;
var xor = require("fe4415d84c8f2a05");
function encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = xor(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
exports.encrypt = function(self, data, decrypt) {
    var out = Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = Buffer.concat([
                out,
                encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = Buffer.concat([
                out,
                encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

},{"7747ec7a535c746a":"eW7r9","fe4415d84c8f2a05":"eYhY5"}],"jk3Qm":[function(require,module,exports) {
var Buffer = require("36c8b61b54eac90b").Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = Buffer.concat([
        self._prev.slice(1),
        Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"36c8b61b54eac90b":"eW7r9"}],"4BsKj":[function(require,module,exports) {
var Buffer = require("5eb46e1eefd15734").Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while(++i < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += (value & 0x80) >> i % 8;
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = Buffer.allocUnsafe(buffer.length);
    buffer = Buffer.concat([
        buffer,
        Buffer.from([
            value
        ])
    ]);
    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"5eb46e1eefd15734":"eW7r9"}],"9DT3x":[function(require,module,exports) {
var Buffer = require("b3ff65e516d49ef1").Buffer;
var xor = require("7f0c2ff10cf58835");
function getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
exports.encrypt = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = Buffer.concat([
        self._cache,
        getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"b3ff65e516d49ef1":"fCgem","7f0c2ff10cf58835":"eYhY5"}],"fLj86":[function(require,module,exports) {
var xor = require("9e40d7dfdb715c7");
var Buffer = require("53cb1eb6f102a1c9").Buffer;
var incr32 = require("57780b841d591d93");
function getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    incr32(self._prev);
    return out;
}
var blockSize = 16;
exports.encrypt = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self._cache.length;
    self._cache = Buffer.concat([
        self._cache,
        Buffer.allocUnsafe(chunkNum * blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = getBlock(self);
        var offset = start + i * blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"9e40d7dfdb715c7":"eYhY5","53cb1eb6f102a1c9":"eW7r9","57780b841d591d93":"bZlDZ"}],"bZlDZ":[function(require,module,exports) {
function incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = incr32;

},{}],"1XQMU":[function(require,module,exports) {
module.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');

},{}],"kn9wf":[function(require,module,exports) {
var aes = require("b0edcf3ce18ae4ef");
var Buffer = require("2c8f7ba691c38788").Buffer;
var Transform = require("1432783a1879aa01");
var inherits = require("60e0d0bfceaaf739");
var GHASH = require("f76de0f4100ad13f");
var xor = require("a9c82903acf3978e");
var incr32 = require("4e429278132497a7");
function xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new GHASH(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer.alloc(toPad, 0));
    }
    ghash.update(Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = Buffer.from(self._finID);
    incr32(out);
    return out;
}
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    var h = Buffer.alloc(4, 0);
    this._cipher = new aes.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new GHASH(ck);
    iv = calcIv(this, iv, ck);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
    var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
    this._authTag = tag;
    this._cipher.scrub();
};
StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
    return this._authTag;
};
StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
    this._authTag = tag;
};
StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error("Attempting to set AAD in unsupported state");
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = StreamCipher;

},{"b0edcf3ce18ae4ef":"4VzKF","2c8f7ba691c38788":"eW7r9","1432783a1879aa01":"g5fTz","60e0d0bfceaaf739":"bRL3M","f76de0f4100ad13f":"lmx0M","a9c82903acf3978e":"eYhY5","4e429278132497a7":"bZlDZ"}],"4VzKF":[function(require,module,exports) {
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/
var Buffer = require("9c4f04f75f375be").Buffer;
function asUInt32Array(buf) {
    if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var RCON = [
    0x00,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1b,
    0x36
];
var G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 0x11b;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function AES(key) {
    this._key = asUInt32Array(key);
    this._reset();
}
AES.blockSize = 16;
AES.keySize = 32;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;
AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
            t ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
AES.prototype.encryptBlockRaw = function(M) {
    M = asUInt32Array(M);
    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};
AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
AES.prototype.decryptBlock = function(M) {
    M = asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
AES.prototype.scrub = function() {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
};
module.exports.AES = AES;

},{"9c4f04f75f375be":"eW7r9"}],"lmx0M":[function(require,module,exports) {
var Buffer = require("815beeecbe039d1a").Buffer;
var ZEROES = Buffer.alloc(16, 0);
function toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function fromArray(out) {
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function GHASH(key) {
    this.h = key;
    this.state = Buffer.alloc(16, 0);
    this.cache = Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function(block) {
    var i = -1;
    while(++i < block.length)this.state[i] ^= block[i];
    this._multiply();
};
GHASH.prototype._multiply = function() {
    var Vi = toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while(++i < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = fromArray(Zi);
};
GHASH.prototype.update = function(buf) {
    this.cache = Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash(Buffer.concat([
        this.cache,
        ZEROES
    ], 16));
    this.ghash(fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = GHASH;

},{"815beeecbe039d1a":"eW7r9"}],"4ZMNU":[function(require,module,exports) {
var aes = require("499d62308d7dac40");
var Buffer = require("bc4a1f7113303d58").Buffer;
var Transform = require("e701745abb80bc49");
var inherits = require("3765f10ec3d7a831");
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = StreamCipher;

},{"499d62308d7dac40":"4VzKF","bc4a1f7113303d58":"eW7r9","e701745abb80bc49":"g5fTz","3765f10ec3d7a831":"bRL3M"}],"1rd4d":[function(require,module,exports) {
var Buffer = require("adb33291e0f9c65a").Buffer;
var MD5 = require("15f984dc9e3797d9");
/* eslint-disable camelcase */ function EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!Buffer.isBuffer(password)) password = Buffer.from(password, "binary");
    if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, "binary");
        if (salt.length !== 8) throw new RangeError("salt should be Buffer with 8 byte length");
    }
    var keyLen = keyBits / 8;
    var key = Buffer.alloc(keyLen);
    var iv = Buffer.alloc(ivLen || 0);
    var tmp = Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new MD5();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = EVP_BytesToKey;

},{"adb33291e0f9c65a":"eW7r9","15f984dc9e3797d9":"45VeE"}],"cixt2":[function(require,module,exports) {
var AuthCipher = require("2f5914bdcee0aab2");
var Buffer = require("2eedc5cbfd1eafeb").Buffer;
var MODES = require("2b861a45e2a2d1fe");
var StreamCipher = require("54b6d333d74ae9c8");
var Transform = require("4b438dd1327af64e");
var aes = require("928aea47daff81dc");
var ebtk = require("25542df8da1646fe");
var inherits = require("153b885d89d2089e");
function Decipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._last = void 0;
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Decipher, Transform);
Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error("data not multiple of block length");
};
Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error("unable to decrypt data");
    var i = -1;
    while(++i < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error("unable to decrypt data");
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function createDecipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    if (typeof iv === "string") iv = Buffer.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
    if (typeof password === "string") password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
    if (config.type === "stream") return new StreamCipher(config.module, password, iv, true);
    else if (config.type === "auth") return new AuthCipher(config.module, password, iv, true);
    return new Decipher(config.module, password, iv);
}
function createDecipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv);
}
exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

},{"2f5914bdcee0aab2":"kn9wf","2eedc5cbfd1eafeb":"eW7r9","2b861a45e2a2d1fe":"jyQSU","54b6d333d74ae9c8":"4ZMNU","4b438dd1327af64e":"g5fTz","928aea47daff81dc":"4VzKF","25542df8da1646fe":"1rd4d","153b885d89d2089e":"bRL3M"}],"iO8co":[function(require,module,exports) {
exports["des-ecb"] = {
    key: 8,
    iv: 0
};
exports["des-cbc"] = exports.des = {
    key: 8,
    iv: 8
};
exports["des-ede3-cbc"] = exports.des3 = {
    key: 24,
    iv: 8
};
exports["des-ede3"] = {
    key: 24,
    iv: 0
};
exports["des-ede-cbc"] = {
    key: 16,
    iv: 8
};
exports["des-ede"] = {
    key: 16,
    iv: 0
};

},{}],"hwD3y":[function(require,module,exports) {
var Buffer = require("55a084ce1a29baa3").Buffer;
var generatePrime = require("5ed99cf028c947ad");
var primes = require("8da23ed5d7edf952");
var DH = require("981b8db942febaf3");
function getDiffieHellman(mod) {
    var prime = new Buffer(primes[mod].prime, "hex");
    var gen = new Buffer(primes[mod].gen, "hex");
    return new DH(prime, gen);
}
var ENCODINGS = {
    "binary": true,
    "hex": true,
    "base64": true
};
function createDiffieHellman(prime, enc, generator, genc) {
    if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) return createDiffieHellman(prime, "binary", enc, generator);
    enc = enc || "binary";
    genc = genc || "binary";
    generator = generator || new Buffer([
        2
    ]);
    if (!Buffer.isBuffer(generator)) generator = new Buffer(generator, genc);
    if (typeof prime === "number") return new DH(generatePrime(prime, generator), generator, true);
    if (!Buffer.isBuffer(prime)) prime = new Buffer(prime, enc);
    return new DH(prime, generator, true);
}
exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

},{"55a084ce1a29baa3":"fCgem","5ed99cf028c947ad":"ZMXAL","8da23ed5d7edf952":"ch1XV","981b8db942febaf3":"f8kfc"}],"ZMXAL":[function(require,module,exports) {
var randomBytes = require("e11b752ebf414e01");
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require("6139735ee181267b");
var TWENTYFOUR = new BN(24);
var MillerRabin = require("7b3f73f9ab7b2b6a");
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;
function _getPrimes() {
    if (primes !== null) return primes;
    var limit = 0x100000;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    primes = res;
    return res;
}
function simpleSieve(p) {
    var primes = _getPrimes();
    for(var i = 0; i < primes.length; i++)if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) return true;
        else return false;
    }
    return true;
}
function fermatTest(p) {
    var red = BN.mont(p);
    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new BN([
            0x8c,
            0x7b
        ]);
        else return new BN([
            0x8c,
            0x27
        ]);
    }
    gen = new BN(gen);
    var num, n2;
    while(true){
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd(ONE);
        if (!num.testn(1)) num.iadd(TWO);
        if (!gen.cmp(TWO)) while(num.mod(TWENTYFOUR).cmp(ELEVEN))num.iadd(FOUR);
        else if (!gen.cmp(FIVE)) while(num.mod(TEN).cmp(THREE))num.iadd(FOUR);
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) return num;
    }
}

},{"e11b752ebf414e01":"8hjhE","6139735ee181267b":"7mh7U","7b3f73f9ab7b2b6a":"i79Nu"}],"7mh7U":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("a4b3a214327293bc").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"a4b3a214327293bc":"jhUEF"}],"i79Nu":[function(require,module,exports) {
var bn = require("31d279a7646d17e9");
var brorand = require("1ed277e13aa258c6");
function MillerRabin(rand) {
    this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;
MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
};
MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new bn(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0);
    return a;
};
MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

},{"31d279a7646d17e9":"7TM3g","1ed277e13aa258c6":"8FGdh"}],"7TM3g":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("1a01f12e7676c433").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"1a01f12e7676c433":"jhUEF"}],"8FGdh":[function(require,module,exports) {
var r;
module.exports = function rand(len) {
    if (!r) r = new Rand(null);
    return r.generate(len);
};
function Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = Rand;
Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};
if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === "object") // Old junk
    Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
    };
} else // Node.js or Web worker with no crypto support
try {
    var crypto = require("e8ad0674730919a8");
    if (typeof crypto.randomBytes !== "function") throw new Error("Not supported");
    Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
    };
} catch (e) {}

},{"e8ad0674730919a8":"jhUEF"}],"ch1XV":[function(require,module,exports) {
module.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');

},{}],"f8kfc":[function(require,module,exports) {
var Buffer = require("18c258c24cda4205").Buffer;
var BN = require("6cfaed55db270425");
var MillerRabin = require("8bc0d9823ee74460");
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require("dd39d03f4b3404fc");
var randomBytes = require("e2757e55299a3ebc");
module.exports = DH;
function setPublicKey(pub, enc) {
    enc = enc || "utf8";
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this._pub = new BN(pub);
    return this;
}
function setPrivateKey(priv, enc) {
    enc = enc || "utf8";
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    this._priv = new BN(priv);
    return this;
}
var primeCache = {};
function checkPrime(prime, generator) {
    var gen = generator.toString("hex");
    var hex = [
        gen,
        prime.toString(16)
    ].join("_");
    if (hex in primeCache) return primeCache[hex];
    var error = 0;
    if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === "02" || gen === "05") // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        primeCache[hex] = error;
        return error;
    }
    if (!millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case "02":
            if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case "05":
            rem = prime.mod(TEN);
            if (rem.cmp(THREE) && rem.cmp(SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    primeCache[hex] = error;
    return error;
}
function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new BN(prime);
    this._prime = BN.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty(DH.prototype, "verifyError", {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== "number") this._primeCode = checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new BN(randomBytes(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue(this._pub, enc);
};
DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue(this._priv, enc);
};
DH.prototype.getPrime = function(enc) {
    return formatReturnValue(this.__prime, enc);
};
DH.prototype.getGenerator = function(enc) {
    return formatReturnValue(this._gen, enc);
};
DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || "utf8";
    if (!Buffer.isBuffer(gen)) gen = new Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new BN(gen);
    return this;
};
function formatReturnValue(bn, enc) {
    var buf = new Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"18c258c24cda4205":"fCgem","6cfaed55db270425":"7mh7U","8bc0d9823ee74460":"i79Nu","dd39d03f4b3404fc":"ZMXAL","e2757e55299a3ebc":"8hjhE"}],"jbRNy":[function(require,module,exports) {
var Buffer = require("9c72b70d69889676").Buffer;
var createHash = require("efe64c48bedfa38e");
var stream = require("6a5343e9b2081ca8");
var inherits = require("f95e32eac8325984");
var sign = require("6e9f6edb752a2c10");
var verify = require("c2f6e4379d1db430");
var algorithms = require("2d93707c75adaee");
Object.keys(algorithms).forEach(function(key) {
    algorithms[key].id = Buffer.from(algorithms[key].id, "hex");
    algorithms[key.toLowerCase()] = algorithms[key];
});
function Sign(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error("Unknown message digest");
    this._hashType = data.hash;
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Sign, stream.Writable);
Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
Sign.prototype.update = function update(data, enc) {
    if (typeof data === "string") data = Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = sign(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function Verify(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error("Unknown message digest");
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Verify, stream.Writable);
Verify.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
Verify.prototype.update = function update(data, enc) {
    if (typeof data === "string") data = Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === "string") sig = Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return verify(sig, hash, key, this._signType, this._tag);
};
function createSign(algorithm) {
    return new Sign(algorithm);
}
function createVerify(algorithm) {
    return new Verify(algorithm);
}
module.exports = {
    Sign: createSign,
    Verify: createVerify,
    createSign: createSign,
    createVerify: createVerify
};

},{"9c72b70d69889676":"eW7r9","efe64c48bedfa38e":"2WyL8","6a5343e9b2081ca8":"jXNWE","f95e32eac8325984":"bRL3M","6e9f6edb752a2c10":"lDgyi","c2f6e4379d1db430":"vbFso","2d93707c75adaee":"kWFdV"}],"lDgyi":[function(require,module,exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require("6ae1d89b9934a98d").Buffer;
var createHmac = require("a8da94153ecfc34b");
var crt = require("51cccb2c4d98daac");
var EC = require("94cc3a287d70a03d").ec;
var BN = require("e83ac2526d8afeba");
var parseKeys = require("892f1603b4523d84");
var curves = require("d22eecc2600c2d97");
function sign(hash, key, hashType, signType, tag) {
    var priv = parseKeys(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") throw new Error("wrong private key type");
        return ecSign(hash, priv);
    } else if (priv.type === "dsa") {
        if (signType !== "dsa") throw new Error("wrong private key type");
        return dsaSign(hash, priv, hashType);
    } else {
        if (signType !== "rsa" && signType !== "ecdsa/rsa") throw new Error("wrong private key type");
    }
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(0xff);
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    var out = crt(pad, priv);
    return out;
}
function ecSign(hash, priv) {
    var curveId = curves[priv.curve.join(".")];
    if (!curveId) throw new Error("unknown curve " + priv.curve.join("."));
    var curve = new EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return Buffer.from(out.toDER());
}
function dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new BN(0);
    var k;
    var H = bits2int(hash, q).mod(q);
    var s = false;
    var kv = getKey(x, q, hash, algo);
    while(s === false){
        k = makeKey(q, kv, algo);
        r = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new BN(0);
        }
    }
    return toDER(r, s);
}
function toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        0x30,
        total,
        0x02,
        r.length
    ];
    res = res.concat(r, [
        0x02,
        s.length
    ], s);
    return Buffer.from(res);
}
function getKey(x, q, hash, algo) {
    x = Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - x.length);
        x = Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = bits2octets(hash, q);
    var v = Buffer.alloc(hlen);
    v.fill(1);
    var k = Buffer.alloc(hlen);
    k = createHmac(algo, k).update(v).update(Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    k = createHmac(algo, k).update(v).update(Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function bits2int(obits, q) {
    var bits = new BN(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function bits2octets(bits, q) {
    bits = bits2int(bits, q);
    bits = bits.mod(q);
    var out = Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - out.length);
        out = Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
            t = Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = bits2int(t, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([
            0
        ])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1);
    return k;
}
function makeR(g, k, p, q) {
    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;

},{"6ae1d89b9934a98d":"eW7r9","a8da94153ecfc34b":"k1utz","51cccb2c4d98daac":"e594P","94cc3a287d70a03d":"1NKsH","e83ac2526d8afeba":"VopIn","892f1603b4523d84":"4Szbv","d22eecc2600c2d97":"iadQk"}],"e594P":[function(require,module,exports) {
var Buffer = require("a54d4e6dcf549cd6").Buffer;
var BN = require("5d911a7c773081c");
var randomBytes = require("cfe4d67488897360");
function blind(priv) {
    var r = getr(priv);
    var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new BN(randomBytes(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));
    return r;
}
function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(BN.mont(priv.prime1));
    var c2 = blinded.toRed(BN.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, "be", len);
}
crt.getr = getr;
module.exports = crt;

},{"a54d4e6dcf549cd6":"fCgem","5d911a7c773081c":"VopIn","cfe4d67488897360":"8hjhE"}],"VopIn":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("bd440367abe2ded7").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, "Invalid character in " + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
    } catch (e) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"bd440367abe2ded7":"jhUEF"}],"1NKsH":[function(require,module,exports) {
"use strict";
var elliptic = exports;
elliptic.version = require("e6672bc3ba1c9961").version;
elliptic.utils = require("5bc72f89931ad0f5");
elliptic.rand = require("7f90d752a36f35cf");
elliptic.curve = require("d11da69c91421223");
elliptic.curves = require("6845bad4ed92c3e4");
// Protocols
elliptic.ec = require("b5f2e1f615acc4b");
elliptic.eddsa = require("79ae761761517980");

},{"e6672bc3ba1c9961":"bvED4","5bc72f89931ad0f5":"8sNT5","7f90d752a36f35cf":"8FGdh","d11da69c91421223":"72OoG","6845bad4ed92c3e4":"6yRo9","b5f2e1f615acc4b":"5gDK1","79ae761761517980":"jPbam"}],"bvED4":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"elliptic","version":"6.5.4","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"}}');

},{}],"8sNT5":[function(require,module,exports) {
"use strict";
var utils = exports;
var BN = require("f4cbcf6f6eb25ca0");
var minAssert = require("d8ee30463f95a0fd");
var minUtils = require("997429d6bbd82d59");
utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;
// Represent num in a w-NAF form
function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
utils.getNAF = getNAF;
// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
    var jsf = [
        [],
        []
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
utils.getJSF = getJSF;
function cachedProperty(obj, name, computer) {
    var key = "_" + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
utils.cachedProperty = cachedProperty;
function parseBytes(bytes) {
    return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
}
utils.parseBytes = parseBytes;
function intFromLE(bytes) {
    return new BN(bytes, "hex", "le");
}
utils.intFromLE = intFromLE;

},{"f4cbcf6f6eb25ca0":"d0RHy","d8ee30463f95a0fd":"8OvWh","997429d6bbd82d59":"6f39G"}],"d0RHy":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("1cf9b8cfa268aab5").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"1cf9b8cfa268aab5":"jhUEF"}],"6f39G":[function(require,module,exports) {
"use strict";
var utils = exports;
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== "string") {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0) msg = "0" + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
utils.toArray = toArray;
function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
utils.zero2 = zero2;
function toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
utils.toHex = toHex;
utils.encode = function encode(arr, enc) {
    if (enc === "hex") return toHex(arr);
    else return arr;
};

},{}],"72OoG":[function(require,module,exports) {
"use strict";
var curve = exports;
curve.base = require("59d486bd2037506a");
curve.short = require("eb37617ef6927580");
curve.mont = require("be9c662572da2183");
curve.edwards = require("60763dd06fe64e8d");

},{"59d486bd2037506a":"kvY1a","eb37617ef6927580":"e7TRt","be9c662572da2183":"2JhQH","60763dd06fe64e8d":"3idNZ"}],"kvY1a":[function(require,module,exports) {
"use strict";
var BN = require("70865a568c61cc60");
var utils = require("fb5111a3810a8235");
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
};
BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === "affine") {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === "affine" ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            p;
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
};
BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    throw new Error("Unknown point format");
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);
    if (compact) return [
        this.getY().isEven() ? 0x02 : 0x03
    ].concat(x);
    return [
        0x04
    ].concat(x, this.getY().toArray("be", len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

},{"70865a568c61cc60":"d0RHy","fb5111a3810a8235":"8sNT5"}],"e7TRt":[function(require,module,exports) {
"use strict";
var utils = require("89f794ef417dc31c");
var BN = require("c314b0ac30b69c4a");
var inherits = require("6ac4d7c73f24ab9c");
var Base = require("6e622edb7498c94");
var assert = utils.assert;
function ShortCurve(conf) {
    Base.call(this, "short", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new BN(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits(Point, Base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string") obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq(p) {
    if (p.type === "affine") return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

},{"89f794ef417dc31c":"8sNT5","c314b0ac30b69c4a":"d0RHy","6ac4d7c73f24ab9c":"bRL3M","6e622edb7498c94":"kvY1a"}],"2JhQH":[function(require,module,exports) {
"use strict";
var BN = require("ebdf19f04f3ed250");
var inherits = require("cb5bb4841a749f68");
var Base = require("51280941230b3f98");
var utils = require("ea7949a80be00261");
function MontCurve(conf) {
    Base.call(this, "mont", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;
MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, "projective");
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
inherits(Point, Base.BasePoint);
MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
};
MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
};
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
Point.prototype.precompute = function precompute() {
// No-op
};
Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
Point.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
};
Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

},{"ebdf19f04f3ed250":"d0RHy","cb5bb4841a749f68":"bRL3M","51280941230b3f98":"kvY1a","ea7949a80be00261":"8sNT5"}],"3idNZ":[function(require,module,exports) {
"use strict";
var utils = require("7bd66a4710450b08");
var BN = require("ccef46dcf03d45c6");
var inherits = require("19937272cbe23c92");
var Base = require("108c8ead5f54502b");
var assert = utils.assert;
function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, "edwards", conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;
EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error("invalid point");
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error("invalid point");
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, "projective");
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits(Point, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"7bd66a4710450b08":"8sNT5","ccef46dcf03d45c6":"d0RHy","19937272cbe23c92":"bRL3M","108c8ead5f54502b":"kvY1a"}],"6yRo9":[function(require,module,exports) {
"use strict";
var curves = exports;
var hash = require("1c9db357c0845afa");
var curve = require("47ec78745540f875");
var utils = require("e30b16e4a47a5405");
var assert = utils.assert;
function PresetCurve(options) {
    if (options.type === "short") this.curve = new curve.short(options);
    else if (options.type === "edwards") this.curve = new curve.edwards(options);
    else this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), "Invalid curve");
    assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
}
curves.PresetCurve = PresetCurve;
function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: hash.sha256,
    gRed: false,
    g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
    ]
});
defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: hash.sha256,
    gRed: false,
    g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
    ]
});
defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: hash.sha256,
    gRed: false,
    g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
    ]
});
defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
    ]
});
defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
    ]
});
defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: [
        "9"
    ]
});
defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    // -121665 * (121666^(-1)) (mod P)
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
    ]
});
var pre;
try {
    pre = require("9eada5f7049e7dfd");
} catch (e) {
    pre = undefined;
}
defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: hash.sha256,
    // Precomputed endomorphism
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
        {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
        }
    ],
    gRed: false,
    g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
    ]
});

},{"1c9db357c0845afa":"gOEGU","47ec78745540f875":"72OoG","e30b16e4a47a5405":"8sNT5","9eada5f7049e7dfd":"lgNSV"}],"gOEGU":[function(require,module,exports) {
var hash = exports;
hash.utils = require("38593959f18bd562");
hash.common = require("31a457752237e8ad");
hash.sha = require("3e37816d2a2fd68d");
hash.ripemd = require("ce5a13b5bd10f171");
hash.hmac = require("c32fbac97a361580");
// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"38593959f18bd562":"kfzn2","31a457752237e8ad":"ecAfF","3e37816d2a2fd68d":"8nbee","ce5a13b5bd10f171":"9kyRQ","c32fbac97a361580":"5KrrE"}],"kfzn2":[function(require,module,exports) {
"use strict";
var assert = require("6002b0feade022a4");
var inherits = require("d4826c9d0ff1b1f");
exports.inherits = inherits;
function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === "string") {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
exports.toArray = toArray;
function toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
exports.toHex = toHex;
function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
}
exports.htonl = htonl;
function toHex32(msg, endian) {
    var res = "";
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === "little") w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
exports.toHex32 = toHex32;
function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
exports.zero2 = zero2;
function zero8(word) {
    if (word.length === 7) return "0" + word;
    else if (word.length === 6) return "00" + word;
    else if (word.length === 5) return "000" + word;
    else if (word.length === 4) return "0000" + word;
    else if (word.length === 3) return "00000" + word;
    else if (word.length === 2) return "000000" + word;
    else if (word.length === 1) return "0000000" + word;
    else return word;
}
exports.zero8 = zero8;
function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === "big") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
exports.join32 = join32;
function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 0xff;
            res[k + 2] = m >>> 8 & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 0xff;
            res[k + 1] = m >>> 8 & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
exports.split32 = split32;
function rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;
function rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;
function sum32(a, b) {
    return a + b >>> 0;
}
exports.sum32 = sum32;
function sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;
function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;
function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;
function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
exports.sum64 = sum64;
function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
exports.sum64_hi = sum64_hi;
function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
exports.sum64_lo = sum64_lo;
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;
function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;
function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;
function shr64_hi(ah, al, num) {
    return ah >>> num;
}
exports.shr64_hi = shr64_hi;
function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"6002b0feade022a4":"8OvWh","d4826c9d0ff1b1f":"bRL3M"}],"ecAfF":[function(require,module,exports) {
"use strict";
var utils = require("e9291abdfb47ee4f");
var assert = require("ea8841b701712638");
function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;
BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
};
BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === "big") {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

},{"e9291abdfb47ee4f":"kfzn2","ea8841b701712638":"8OvWh"}],"8nbee":[function(require,module,exports) {
"use strict";
exports.sha1 = require("3835379564860fd7");
exports.sha224 = require("bb9f72f042233648");
exports.sha256 = require("20a3b0fa42e37dfe");
exports.sha384 = require("ad4827efa7d953c2");
exports.sha512 = require("301292595a944c1d");

},{"3835379564860fd7":"fnjyb","bb9f72f042233648":"9x7tY","20a3b0fa42e37dfe":"9bCbT","ad4827efa7d953c2":"lJMiS","301292595a944c1d":"8y482"}],"fnjyb":[function(require,module,exports) {
"use strict";
var utils = require("b75f3c1442bf9100");
var common = require("a29e68029e4c48f8");
var shaCommon = require("1be62f90a237cba5");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [
    0x5A827999,
    0x6ED9EBA1,
    0x8F1BBCDC,
    0xCA62C1D6
];
function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.W = new Array(80);
}
utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
};
SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};

},{"b75f3c1442bf9100":"kfzn2","a29e68029e4c48f8":"ecAfF","1be62f90a237cba5":"gzrNi"}],"gzrNi":[function(require,module,exports) {
"use strict";
var utils = require("f0fb61f828bacd0f");
var rotr32 = utils.rotr32;
function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;
function ch32(x, y, z) {
    return x & y ^ ~x & z;
}
exports.ch32 = ch32;
function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;
function p32(x, y, z) {
    return x ^ y ^ z;
}
exports.p32 = p32;
function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;
function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;
function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;
function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

},{"f0fb61f828bacd0f":"kfzn2"}],"9x7tY":[function(require,module,exports) {
"use strict";
var utils = require("fe5acd040463c159");
var SHA256 = require("fa3503eda3738d05");
function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    SHA256.call(this);
    this.h = [
        0xc1059ed8,
        0x367cd507,
        0x3070dd17,
        0xf70e5939,
        0xffc00b31,
        0x68581511,
        0x64f98fa7,
        0xbefa4fa4
    ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
    else return utils.split32(this.h.slice(0, 7), "big");
};

},{"fe5acd040463c159":"kfzn2","fa3503eda3738d05":"9bCbT"}],"9bCbT":[function(require,module,exports) {
"use strict";
var utils = require("32ad3e510bd41f2a");
var common = require("469ad88ad505772a");
var shaCommon = require("fffa7d1ddf1f0b43");
var assert = require("126369f57b5225ed");
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;
SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
};
SHA256.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};

},{"32ad3e510bd41f2a":"kfzn2","469ad88ad505772a":"ecAfF","fffa7d1ddf1f0b43":"gzrNi","126369f57b5225ed":"8OvWh"}],"lJMiS":[function(require,module,exports) {
"use strict";
var utils = require("a696ee34c45713da");
var SHA512 = require("fff95253fdaa49ea");
function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    SHA512.call(this);
    this.h = [
        0xcbbb9d5d,
        0xc1059ed8,
        0x629a292a,
        0x367cd507,
        0x9159015a,
        0x3070dd17,
        0x152fecd8,
        0xf70e5939,
        0x67332667,
        0xffc00b31,
        0x8eb44a87,
        0x68581511,
        0xdb0c2e0d,
        0x64f98fa7,
        0x47b5481d,
        0xbefa4fa4
    ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
    else return utils.split32(this.h.slice(0, 12), "big");
};

},{"a696ee34c45713da":"kfzn2","fff95253fdaa49ea":"8y482"}],"8y482":[function(require,module,exports) {
"use strict";
var utils = require("7753b1fa702fbb54");
var common = require("81b6970d75627ce1");
var assert = require("f660976cede694e2");
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xf3bcc908,
        0xbb67ae85,
        0x84caa73b,
        0x3c6ef372,
        0xfe94f82b,
        0xa54ff53a,
        0x5f1d36f1,
        0x510e527f,
        0xade682d1,
        0x9b05688c,
        0x2b3e6c1f,
        0x1f83d9ab,
        0xfb41bd6b,
        0x5be0cd19,
        0x137e2179
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
};
SHA512.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};
function ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2); // 34
    var c2_hi = rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2); // 34
    var c2_lo = rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29); // 61
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29); // 61
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

},{"7753b1fa702fbb54":"kfzn2","81b6970d75627ce1":"ecAfF","f660976cede694e2":"8OvWh"}],"9kyRQ":[function(require,module,exports) {
"use strict";
var utils = require("36495272d446418f");
var common = require("ad8cf0490e28e8d7");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;
function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.endian = "little";
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "little");
    else return utils.split32(this.h, "little");
};
function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function K(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}
function Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}
var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

},{"36495272d446418f":"kfzn2","ad8cf0490e28e8d7":"ecAfF"}],"5KrrE":[function(require,module,exports) {
"use strict";
var utils = require("596c08b6835a6e2d");
var assert = require("be527907d4f06808");
function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
}
module.exports = Hmac;
Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

},{"596c08b6835a6e2d":"kfzn2","be527907d4f06808":"8OvWh"}],"lgNSV":[function(require,module,exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
            ],
            [
                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
            ],
            [
                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
            ],
            [
                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
            ],
            [
                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
            ],
            [
                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
            ],
            [
                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
            ],
            [
                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
            ],
            [
                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
            ],
            [
                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
            ],
            [
                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
            ],
            [
                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
            ],
            [
                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
            ],
            [
                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
            ],
            [
                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
            ],
            [
                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
            ],
            [
                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
            ],
            [
                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
            ],
            [
                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
            ],
            [
                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
            ],
            [
                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
            ],
            [
                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
            ],
            [
                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
            ],
            [
                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
            ],
            [
                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
            ],
            [
                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
            ],
            [
                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
            ],
            [
                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
            ],
            [
                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
            ],
            [
                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
            ],
            [
                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
            ],
            [
                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
            ],
            [
                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
            ],
            [
                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
            ],
            [
                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
            ],
            [
                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
            ],
            [
                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
            ],
            [
                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
            ],
            [
                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
            ],
            [
                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
            ],
            [
                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
            ],
            [
                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
            ],
            [
                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
            ],
            [
                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
            ],
            [
                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
            ],
            [
                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
            ],
            [
                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
            ],
            [
                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
            ],
            [
                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
            ],
            [
                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
            ],
            [
                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
            ],
            [
                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
            ],
            [
                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
            ],
            [
                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
            ],
            [
                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
            ],
            [
                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
            ],
            [
                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
            ],
            [
                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
            ],
            [
                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
            ],
            [
                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
            ],
            [
                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
            ],
            [
                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
            ],
            [
                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
            ],
            [
                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
            ],
            [
                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
            ]
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
            ],
            [
                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
            ],
            [
                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
            ],
            [
                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
            ],
            [
                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
            ],
            [
                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
            ],
            [
                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
            ],
            [
                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
            ],
            [
                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
            ],
            [
                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
            ],
            [
                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
            ],
            [
                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
            ],
            [
                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
            ],
            [
                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
            ],
            [
                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
            ],
            [
                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
            ],
            [
                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
            ],
            [
                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
            ],
            [
                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
            ],
            [
                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
            ],
            [
                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
            ],
            [
                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
            ],
            [
                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
            ],
            [
                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
            ],
            [
                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
            ],
            [
                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
            ],
            [
                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
            ],
            [
                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
            ],
            [
                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
            ],
            [
                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
            ],
            [
                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
            ],
            [
                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
            ],
            [
                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
            ],
            [
                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
            ],
            [
                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
            ],
            [
                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
            ],
            [
                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
            ],
            [
                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
            ],
            [
                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
            ],
            [
                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
            ],
            [
                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
            ],
            [
                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
            ],
            [
                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
            ],
            [
                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
            ],
            [
                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
            ],
            [
                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
            ],
            [
                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
            ],
            [
                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
            ],
            [
                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
            ],
            [
                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
            ],
            [
                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
            ],
            [
                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
            ],
            [
                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
            ],
            [
                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
            ],
            [
                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
            ],
            [
                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
            ],
            [
                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
            ],
            [
                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
            ],
            [
                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
            ],
            [
                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
            ],
            [
                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
            ],
            [
                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
            ],
            [
                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
            ],
            [
                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
            ],
            [
                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
            ],
            [
                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
            ],
            [
                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
            ],
            [
                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
            ],
            [
                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
            ],
            [
                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
            ],
            [
                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
            ],
            [
                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
            ],
            [
                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
            ],
            [
                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
            ],
            [
                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
            ],
            [
                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
            ],
            [
                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
            ],
            [
                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
            ],
            [
                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
            ],
            [
                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
            ],
            [
                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
            ],
            [
                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
            ],
            [
                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
            ],
            [
                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
            ],
            [
                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
            ],
            [
                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
            ],
            [
                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
            ],
            [
                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
            ],
            [
                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
            ],
            [
                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
            ],
            [
                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
            ],
            [
                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
            ],
            [
                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
            ],
            [
                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
            ],
            [
                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
            ],
            [
                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
            ],
            [
                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
            ],
            [
                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
            ],
            [
                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
            ],
            [
                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
            ],
            [
                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
            ],
            [
                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
            ],
            [
                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
            ],
            [
                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
            ],
            [
                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
            ],
            [
                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
            ],
            [
                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
            ],
            [
                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
            ],
            [
                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
            ],
            [
                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
            ],
            [
                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
            ],
            [
                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
            ],
            [
                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
            ],
            [
                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
            ],
            [
                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
            ],
            [
                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
            ],
            [
                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
            ],
            [
                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
            ],
            [
                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
            ],
            [
                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
            ],
            [
                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
            ],
            [
                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
            ],
            [
                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
            ],
            [
                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
            ],
            [
                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
            ],
            [
                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
            ],
            [
                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
            ]
        ]
    }
};

},{}],"5gDK1":[function(require,module,exports) {
"use strict";
var BN = require("2e69183faf5285a1");
var HmacDRBG = require("b0cb641292e4911d");
var utils = require("eab3e45147b180ba");
var curves = require("a5ce61d26ce01c4c");
var rand = require("f6342f89ac472937");
var assert = utils.assert;
var KeyPair = require("eb5ba559e423f6e9");
var Signature = require("7c5e2c76c574ce41");
function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === "string") {
        assert(Object.prototype.hasOwnProperty.call(curves, options), "Unknown curve " + options);
        options = curves[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for(;;){
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === "object") {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray("be", bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray("be", bytes);
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new Signature({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, "hex");
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, "The recovery param is more than two bits");
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error("Unable to find valid recovery factor");
};

},{"2e69183faf5285a1":"d0RHy","b0cb641292e4911d":"eMMR6","eab3e45147b180ba":"8sNT5","a5ce61d26ce01c4c":"6yRo9","f6342f89ac472937":"8FGdh","eb5ba559e423f6e9":"c4oIH","7c5e2c76c574ce41":"cRuxW"}],"eMMR6":[function(require,module,exports) {
"use strict";
var hash = require("629972fec592198f");
var utils = require("c20531edfb274a2c");
var assert = require("43ff1863ab3fce20");
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils.toArray(options.pers, options.persEnc || "hex");
    assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0x00
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        0x01
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
    // Optional encoding
    if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = utils.toArray(add, addEnc || "hex");
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
};

},{"629972fec592198f":"gOEGU","c20531edfb274a2c":"6f39G","43ff1863ab3fce20":"8OvWh"}],"c4oIH":[function(require,module,exports) {
"use strict";
var BN = require("55cc33a33cda153d");
var utils = require("bda8b1ff480a7f3");
var assert = utils.assert;
function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: "Invalid public key"
    };
    if (!pub.validate()) return {
        result: false,
        reason: "Public key is not a point"
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: "Public key * N != O"
    };
    return {
        result: true,
        reason: null
    };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === "string") {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex") return this.priv.toString(16, 2);
    else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === "mont") assert(key.x, "Need x coordinate");
        else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") assert(key.x && key.y, "Need both x and y coordinate");
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) assert(pub.validate(), "public point not validated");
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};

},{"55cc33a33cda153d":"d0RHy","bda8b1ff480a7f3":"8sNT5"}],"cRuxW":[function(require,module,exports) {
"use strict";
var BN = require("a7ae8f0fe39990e7");
var utils = require("5df7da4811374387");
var assert = utils.assert;
function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert(options.r && options.s, "Signature without r or s");
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;
function Position() {
    this.place = 0;
}
function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) return initial;
    var octetLen = initial & 0xf;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 0x7f) return false;
    p.place = off;
    return val;
}
function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) return false;
    var len = getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 0x02) return false;
    var rlen = getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) return false;
    var slen = getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;
    return true;
};
function constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
    arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
    var arr = [
        0x02
    ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        0x30
    ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
};

},{"a7ae8f0fe39990e7":"d0RHy","5df7da4811374387":"8sNT5"}],"jPbam":[function(require,module,exports) {
"use strict";
var hash = require("50f9bfa8a484d5d8");
var curves = require("68956d27442d6321");
var utils = require("99ec52641eff141d");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require("2ad2982d76b37f15");
var Signature = require("76c25a1d63d10c1b");
function EDDSA(curve) {
    assert(curve === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof EDDSA)) return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
}
module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
    return utils.intFromLE(hash.digest()).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};
EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};
EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature) return sig;
    return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
};
EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
};
EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

},{"50f9bfa8a484d5d8":"gOEGU","68956d27442d6321":"6yRo9","99ec52641eff141d":"8sNT5","2ad2982d76b37f15":"hOVET","76c25a1d63d10c1b":"a5qj9"}],"hOVET":[function(require,module,exports) {
"use strict";
var utils = require("387ffb9c0bf065ab");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = parseBytes(params.pub);
}
KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(eddsa, {
        pub: pub
    });
};
KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair) return secret;
    return new KeyPair(eddsa, {
        secret: secret
    });
};
KeyPair.prototype.secret = function secret() {
    return this._secret;
};
cachedProperty(KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, "pub", function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, "privBytes", function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
cachedProperty(KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, "hash", function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
};
KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, "KeyPair is public only");
    return utils.encode(this.secret(), enc);
};
KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
};
module.exports = KeyPair;

},{"387ffb9c0bf065ab":"8sNT5"}],"a5qj9":[function(require,module,exports) {
"use strict";
var BN = require("696e2c87f819d166");
var utils = require("51b94bcac1dcb2b2");
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== "object") sig = parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    assert(sig.R && sig.S, "Signature without R or S");
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof BN) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
cachedProperty(Signature, "S", function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, "R", function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), "hex").toUpperCase();
};
module.exports = Signature;

},{"696e2c87f819d166":"d0RHy","51b94bcac1dcb2b2":"8sNT5"}],"4Szbv":[function(require,module,exports) {
var asn1 = require("a33d2f68b0ffe26d");
var aesid = require("c39bbd52d12adb70");
var fixProc = require("7247fe0465255c67");
var ciphers = require("ea725b5eadc96106");
var compat = require("aa2a622927353f9f");
var Buffer = require("11d61e4bc73f5fdc").Buffer;
module.exports = parseKeys;
function parseKeys(buffer) {
    var password;
    if (typeof buffer === "object" && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === "string") buffer = Buffer.from(buffer);
    var stripped = fixProc(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case "CERTIFICATE":
            ndata = asn1.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case "PUBLIC KEY":
            if (!ndata) ndata = asn1.PublicKey.decode(data, "der");
            subtype = ndata.algorithm.algorithm.join(".");
            switch(subtype){
                case "1.2.840.113549.1.1.1":
                    return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
                case "1.2.840.10045.2.1":
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: "ec",
                        data: ndata
                    };
                case "1.2.840.10040.4.1":
                    ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, "der");
                    return {
                        type: "dsa",
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error("unknown key id " + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case "ENCRYPTED PRIVATE KEY":
            data = asn1.EncryptedPrivateKey.decode(data, "der");
            data = decrypt(data, password);
        // falls through
        case "PRIVATE KEY":
            ndata = asn1.PrivateKey.decode(data, "der");
            subtype = ndata.algorithm.algorithm.join(".");
            switch(subtype){
                case "1.2.840.113549.1.1.1":
                    return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
                case "1.2.840.10045.2.1":
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
                    };
                case "1.2.840.10040.4.1":
                    ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, "der");
                    return {
                        type: "dsa",
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error("unknown key id " + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case "RSA PUBLIC KEY":
            return asn1.RSAPublicKey.decode(data, "der");
        case "RSA PRIVATE KEY":
            return asn1.RSAPrivateKey.decode(data, "der");
        case "DSA PRIVATE KEY":
            return {
                type: "dsa",
                params: asn1.DSAPrivateKey.decode(data, "der")
            };
        case "EC PRIVATE KEY":
            data = asn1.ECPrivateKey.decode(data, "der");
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error("unknown key type " + type);
    }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split("-")[1], 10) / 8;
    var key = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
    var cipher = ciphers.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return Buffer.concat(out);
}

},{"a33d2f68b0ffe26d":"l0ugz","c39bbd52d12adb70":"bvb6u","7247fe0465255c67":"bNDUb","ea725b5eadc96106":"hnlHj","aa2a622927353f9f":"g38Hg","11d61e4bc73f5fdc":"eW7r9"}],"l0ugz":[function(require,module,exports) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
"use strict";
var asn1 = require("821e6411e0aeb10a");
exports.certificate = require("6bb4fbbd6e2d2384");
var RSAPrivateKey = asn1.define("RSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
});
exports.RSAPrivateKey = RSAPrivateKey;
var RSAPublicKey = asn1.define("RSAPublicKey", function() {
    this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
});
exports.RSAPublicKey = RSAPublicKey;
var PublicKey = asn1.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
});
exports.PublicKey = PublicKey;
var AlgorithmIdentifier = asn1.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
});
var PrivateKeyInfo = asn1.define("PrivateKeyInfo", function() {
    this.seq().obj(this.key("version").int(), this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPrivateKey").octstr());
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define("EncryptedPrivateKeyInfo", function() {
    this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
});
exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
var DSAPrivateKey = asn1.define("DSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
});
exports.DSAPrivateKey = DSAPrivateKey;
exports.DSAparam = asn1.define("DSAparam", function() {
    this.int();
});
var ECPrivateKey = asn1.define("ECPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(ECParameters), this.key("publicKey").optional().explicit(1).bitstr());
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define("ECParameters", function() {
    this.choice({
        namedCurve: this.objid()
    });
});
exports.signature = asn1.define("signature", function() {
    this.seq().obj(this.key("r").int(), this.key("s").int());
});

},{"821e6411e0aeb10a":"iV1JX","6bb4fbbd6e2d2384":"Tf0QA"}],"iV1JX":[function(require,module,exports) {
"use strict";
const asn1 = exports;
asn1.bignum = require("b4f67f473458f037");
asn1.define = require("3a96ab8454f69498").define;
asn1.base = require("82a96f1d67e1a13d");
asn1.constants = require("f666a445bd64a777");
asn1.decoders = require("e200f1dc591d286b");
asn1.encoders = require("5ea4ddb7d1e6fcb9");

},{"b4f67f473458f037":"65jkx","3a96ab8454f69498":"2oHUo","82a96f1d67e1a13d":"3q4wA","f666a445bd64a777":"oiTK8","e200f1dc591d286b":"awa6C","5ea4ddb7d1e6fcb9":"2psTt"}],"65jkx":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("7f1ee543ef73731a").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"7f1ee543ef73731a":"jhUEF"}],"2oHUo":[function(require,module,exports) {
"use strict";
const encoders = require("f26403796e11865b");
const decoders = require("a00827f0f69fbce");
const inherits = require("64c493c8ea32f1a7");
const api = exports;
api.define = function define(name, body) {
    return new Entity(name, body);
};
function Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
}
Entity.prototype._createNamed = function createNamed(Base) {
    const name = this.name;
    function Generated(entity) {
        this._initNamed(entity, name);
    }
    inherits(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
    };
    return new Generated(this);
};
Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || "der";
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(decoders[enc]);
    return this.decoders[enc];
};
Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || "der";
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(encoders[enc]);
    return this.encoders[enc];
};
Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

},{"f26403796e11865b":"2psTt","a00827f0f69fbce":"awa6C","64c493c8ea32f1a7":"bRL3M"}],"2psTt":[function(require,module,exports) {
"use strict";
const encoders = exports;
encoders.der = require("6153180e09514e51");
encoders.pem = require("babaf0c4b3d9210a");

},{"6153180e09514e51":"b1CZy","babaf0c4b3d9210a":"jRlrF"}],"b1CZy":[function(require,module,exports) {
"use strict";
const inherits = require("94789e1422bf21a1");
const Buffer = require("9dd3df095b47dfb").Buffer;
const Node = require("ee66f238a776dfa1");
// Import DER constants
const der = require("e0096fa50301b4fb");
function DEREncoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DEREncoder;
DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function DERNode(parent) {
    Node.call(this, "der", parent);
}
inherits(DERNode, Node);
DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 0x80) {
        const header = Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    let lenOctets = 1;
    for(let i = content.length; i >= 0x100; i >>= 8)lenOctets++;
    const header = Buffer.alloc(2 + lenOctets);
    header[0] = encodedTag;
    header[1] = 0x80 | lenOctets;
    for(let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)header[i] = j & 0xff;
    return this._createEncoderBuffer([
        header,
        content
    ]);
};
DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === "bitstr") return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === "bmpstr") {
        const buf = Buffer.alloc(str.length * 2);
        for(let i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === "numstr") {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === "printstr") {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === "objDesc") return this._createEncoderBuffer(str);
    else return this.reporter.error("Encoding of string type: " + tag + " unsupported");
};
DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === "string") {
        if (!values) return this.reporter.error("string objid given, but no values map found");
        if (!values.hasOwnProperty(id)) return this.reporter.error("objid not found in values map");
        id = values[id].split(/[\s.]+/g);
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error("Second objid identifier OOB");
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    let size = 0;
    for(let i = 0; i < id.length; i++){
        let ident = id[i];
        for(size++; ident >= 0x80; ident >>= 7)size++;
    }
    const objid = Buffer.alloc(size);
    let offset = objid.length - 1;
    for(let i = id.length - 1; i >= 0; i--){
        let ident = id[i];
        objid[offset--] = ident & 0x7f;
        while((ident >>= 7) > 0)objid[offset--] = 0x80 | ident & 0x7f;
    }
    return this._createEncoderBuffer(objid);
};
function two(num) {
    if (num < 10) return "0" + num;
    else return num;
}
DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === "gentime") str = [
        two(date.getUTCFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        "Z"
    ].join("");
    else if (tag === "utctime") str = [
        two(date.getUTCFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        "Z"
    ].join("");
    else this.reporter.error("Encoding " + tag + " time is not supported yet");
    return this._encodeStr(str, "octstr");
};
DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer("");
};
DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === "string") {
        if (!values) return this.reporter.error("String int or enum given, but no values map");
        if (!values.hasOwnProperty(num)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== "number" && !Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) numArray.unshift(0);
        num = Buffer.from(numArray);
    }
    if (Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0) size++;
        const out = Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 0x80) return this._createEncoderBuffer(num);
    if (num < 0x100) return this._createEncoderBuffer([
        0,
        num
    ]);
    let size = 1;
    for(let i = num; i >= 0x100; i >>= 8)size++;
    const out = new Array(size);
    for(let i = out.length - 1; i >= 0; i--){
        out[i] = num & 0xff;
        num >>= 8;
    }
    if (out[0] & 0x80) out.unshift(0);
    return this._createEncoderBuffer(Buffer.from(out));
};
DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 0xff : 0);
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function") entity = entity(obj);
    return entity._getEncoder("der").tree;
};
DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i;
    if (state["default"] === null) return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === "seqof") tag = "seq";
    else if (tag === "setof") tag = "set";
    if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];
    else if (typeof tag === "number" && (tag | 0) === tag) res = tag;
    else return reporter.error("Unknown tag: " + tag);
    if (res >= 0x1f) return reporter.error("Multi-octet tag encoding unsupported");
    if (!primitive) res |= 0x20;
    res |= der.tagClassByName[cls || "universal"] << 6;
    return res;
}

},{"94789e1422bf21a1":"bRL3M","9dd3df095b47dfb":"aLyFx","ee66f238a776dfa1":"l9Edp","e0096fa50301b4fb":"i6Hqy"}],"aLyFx":[function(require,module,exports) {
/* eslint-disable node/no-deprecated-api */ var process = require("e7af3484edf6bee9");
"use strict";
var buffer = require("9b1fd4bf3515d7a6");
var Buffer = buffer.Buffer;
var safer = {};
var key;
for(key in buffer){
    if (!buffer.hasOwnProperty(key)) continue;
    if (key === "SlowBuffer" || key === "Buffer") continue;
    safer[key] = buffer[key];
}
var Safer = safer.Buffer = {};
for(key in Buffer){
    if (!Buffer.hasOwnProperty(key)) continue;
    if (key === "allocUnsafe" || key === "allocUnsafeSlow") continue;
    Safer[key] = Buffer[key];
}
safer.Buffer.prototype = Buffer.prototype;
if (!Safer.from || Safer.from === Uint8Array.from) Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    if (value && typeof value.length === "undefined") throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    return Buffer(value, encodingOrOffset, length);
};
if (!Safer.alloc) Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    if (size < 0 || size >= 2 * 1073741824) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === "string") buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!safer.kStringMaxLength) try {
    safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!safer.constants) {
    safer.constants = {
        MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
}
module.exports = safer;

},{"e7af3484edf6bee9":"d5jf4","9b1fd4bf3515d7a6":"fCgem"}],"l9Edp":[function(require,module,exports) {
"use strict";
const Reporter = require("3f60e59b9a23b489").Reporter;
const EncoderBuffer = require("485fe0fa4bfbbbca").EncoderBuffer;
const DecoderBuffer = require("485fe0fa4bfbbbca").DecoderBuffer;
const assert = require("1bf7ce79b1c01d8b");
// Supported tags
const tags = [
    "seq",
    "seqof",
    "set",
    "setof",
    "objid",
    "bool",
    "gentime",
    "utctime",
    "null_",
    "enum",
    "int",
    "objDesc",
    "bitstr",
    "bmpstr",
    "charstr",
    "genstr",
    "graphstr",
    "ia5str",
    "iso646str",
    "numstr",
    "octstr",
    "printstr",
    "t61str",
    "unistr",
    "utf8str",
    "videostr"
];
// Public methods list
const methods = [
    "key",
    "obj",
    "use",
    "optional",
    "explicit",
    "implicit",
    "def",
    "choice",
    "any",
    "contains"
].concat(tags);
// Overrided methods list
const overrided = [
    "_peekTag",
    "_decodeTag",
    "_use",
    "_decodeStr",
    "_decodeObjid",
    "_decodeTime",
    "_decodeNull",
    "_decodeInt",
    "_decodeBool",
    "_decodeList",
    "_encodeComposite",
    "_encodeStr",
    "_encodeObjid",
    "_encodeTime",
    "_encodeNull",
    "_encodeInt",
    "_encodeBool"
];
function Node(enc, parent, name) {
    const state = {};
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state["default"] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = Node;
const stateProps = [
    "enc",
    "parent",
    "children",
    "tag",
    "args",
    "reverseArgs",
    "choice",
    "optional",
    "any",
    "obj",
    "use",
    "alteredUse",
    "key",
    "default",
    "explicit",
    "implicit",
    "contains"
];
Node.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {};
    stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
Node.prototype._wrap = function wrap() {
    const state = this._baseState;
    methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            const clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
        };
    }, this);
};
Node.prototype._init = function init(body) {
    const state = this._baseState;
    assert(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    assert.equal(state.children.length, 1, "Root node can have only one child");
};
Node.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    // Filter children and args
    const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== "object" || arg.constructor !== Object) return arg;
            const res = {};
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                const value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
overrided.forEach(function(method) {
    Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + " not implemented for encoding: " + state.enc);
    };
});
//
// Public methods
//
tags.forEach(function(tag) {
    Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
Node.prototype.use = function use(item) {
    assert(item);
    const state = this._baseState;
    assert(state.use === null);
    state.use = item;
    return this;
};
Node.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
};
Node.prototype.def = function def(val) {
    const state = this._baseState;
    assert(state["default"] === null);
    state["default"] = val;
    state.optional = true;
    return this;
};
Node.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
Node.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
Node.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
Node.prototype.key = function key(newKey) {
    const state = this._baseState;
    assert(state.key === null);
    state.key = newKey;
    return this;
};
Node.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
};
Node.prototype.choice = function choice(obj) {
    const state = this._baseState;
    assert(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
    }));
    return this;
};
Node.prototype.contains = function contains(item) {
    const state = this._baseState;
    assert(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
Node.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    let result = state["default"];
    let present = true;
    let prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            const save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    let prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            const explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit)) return explicit;
            input = explicit;
        }
        const start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            let save;
            if (state.any) save = input.save();
            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, "tagged");
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, "content");
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
            const data = new DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === "seq" || tag === "set") return null;
    if (tag === "seqof" || tag === "setof") return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === "objid" && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === "objid") return this._decodeObjid(input, null, null, options);
    else if (tag === "gentime" || tag === "utctime") return this._decodeTime(input, tag, options);
    else if (tag === "null_") return this._decodeNull(input, options);
    else if (tag === "bool") return this._decodeBool(input, options);
    else if (tag === "objDesc") return this._decodeStr(input, tag, options);
    else if (tag === "int" || tag === "enum") return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error("unknown tag: " + tag);
};
Node.prototype._getUse = function _getUse(entity, obj) {
    const state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    assert(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
Node.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
            const value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error("Choice not matched");
    return result;
};
//
// Encoding
//
Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
};
Node.prototype._encode = function encode(data, reporter, parent) {
    const state = this._baseState;
    if (state["default"] !== null && state["default"] === data) return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
Node.prototype._encodeValue = function encode(data, reporter, parent) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());
    let result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state.optional && data === undefined) {
        if (state["default"] !== null) data = state["default"];
        else return;
    }
    // Encode children first
    let content = null;
    let primitive = false;
    if (state.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state.choice) result = this._encodeChoice(data, reporter);
    else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state.children) {
        content = state.children.map(function(child) {
            if (child._baseState.tag === "null_") return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error("Child should have a key");
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== "object") return reporter.error("Child expected, but input is not object");
            const res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state.tag === "seqof" || state.tag === "setof") {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state.args && state.args.length === 1)) return reporter.error("Too many args for : " + state.tag);
            if (!Array.isArray(data)) return reporter.error("seqof/setof, but data is not Array");
            const child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                const state = this._baseState;
                return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state.use !== null) result = this._getUse(state.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? "universal" : "context";
        if (tag === null) {
            if (state.use === null) reporter.error("Tag could be omitted only for .use()");
        } else if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, "context", result);
    return result;
};
Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) assert(false, data.type + " not found in " + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === "objid" && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === "objid") return this._encodeObjid(data, null, null);
    else if (tag === "gentime" || tag === "utctime") return this._encodeTime(data, tag);
    else if (tag === "null_") return this._encodeNull();
    else if (tag === "int" || tag === "enum") return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === "bool") return this._encodeBool(data);
    else if (tag === "objDesc") return this._encodeStr(data, tag);
    else throw new Error("Unsupported tag: " + tag);
};
Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"3f60e59b9a23b489":"2Vti8","485fe0fa4bfbbbca":"1GNVB","1bf7ce79b1c01d8b":"8OvWh"}],"2Vti8":[function(require,module,exports) {
"use strict";
const inherits = require("cca99c6acf69321b");
function Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
    };
}
exports.Reporter = Reporter;
Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
};
Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
Reporter.prototype.path = function path() {
    return this._reporterState.path.join("/");
};
Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {};
    return prev;
};
Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
};
Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof ReporterError;
    if (inherited) err = msg;
    else err = new ReporterError(state.path.map(function(elem) {
        return "[" + JSON.stringify(elem) + "]";
    }).join(""), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
}
inherits(ReporterError, Error);
ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + " at: " + (this.path || "(shallow)");
    if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

},{"cca99c6acf69321b":"bRL3M"}],"1GNVB":[function(require,module,exports) {
"use strict";
const inherits = require("ff35534ecc380ed3");
const Reporter = require("caca6de43dc40469").Reporter;
const Buffer = require("c3dd8e06b6bddac8").Buffer;
function DecoderBuffer(base, options) {
    Reporter.call(this, options);
    if (!Buffer.isBuffer(base)) {
        this.error("Input not Buffer");
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;
DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof DecoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === "object" && Buffer.isBuffer(data.base) && data.constructor.name === "DecoderBuffer" && typeof data.offset === "number" && typeof data.length === "number" && typeof data.save === "function" && typeof data.restore === "function" && typeof data.isEmpty === "function" && typeof data.readUInt8 === "function" && typeof data.skip === "function" && typeof data.raw === "function";
    return isCompatible;
};
DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
    };
};
DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    const res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    Reporter.prototype.restore.call(this, save.reporter);
    return res;
};
DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || "DecoderBuffer overrun");
};
DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || "DecoderBuffer overrun");
    const res = new DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
};
function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!EncoderBuffer.isEncoderBuffer(item)) item = new EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === "number") {
        if (!(0 <= value && value <= 0xff)) return reporter.error("non-byte EncoderBuffer value");
        this.value = value;
        this.length = 1;
    } else if (typeof value === "string") {
        this.value = value;
        this.length = Buffer.byteLength(value);
    } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error("Unsupported type: " + typeof value);
}
exports.EncoderBuffer = EncoderBuffer;
EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof EncoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === "object" && data.constructor.name === "EncoderBuffer" && typeof data.length === "number" && typeof data.join === "function";
    return isCompatible;
};
EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === "number") out[offset] = this.value;
        else if (typeof this.value === "string") out.write(this.value, offset);
        else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

},{"ff35534ecc380ed3":"bRL3M","caca6de43dc40469":"2Vti8","c3dd8e06b6bddac8":"aLyFx"}],"i6Hqy":[function(require,module,exports) {
"use strict";
// Helper
function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
}
exports.tagClass = {
    0: "universal",
    1: "application",
    2: "context",
    3: "private"
};
exports.tagClassByName = reverse(exports.tagClass);
exports.tag = {
    0x00: "end",
    0x01: "bool",
    0x02: "int",
    0x03: "bitstr",
    0x04: "octstr",
    0x05: "null_",
    0x06: "objid",
    0x07: "objDesc",
    0x08: "external",
    0x09: "real",
    0x0a: "enum",
    0x0b: "embed",
    0x0c: "utf8str",
    0x0d: "relativeOid",
    0x10: "seq",
    0x11: "set",
    0x12: "numstr",
    0x13: "printstr",
    0x14: "t61str",
    0x15: "videostr",
    0x16: "ia5str",
    0x17: "utctime",
    0x18: "gentime",
    0x19: "graphstr",
    0x1a: "iso646str",
    0x1b: "genstr",
    0x1c: "unistr",
    0x1d: "charstr",
    0x1e: "bmpstr"
};
exports.tagByName = reverse(exports.tag);

},{}],"jRlrF":[function(require,module,exports) {
"use strict";
const inherits = require("bc3c7930ded74eee");
const DEREncoder = require("cf885a4234262436");
function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = "pem";
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;
PEMEncoder.prototype.encode = function encode(data, options) {
    const buf = DEREncoder.prototype.encode.call(this, data);
    const p = buf.toString("base64");
    const out = [
        "-----BEGIN " + options.label + "-----"
    ];
    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push("-----END " + options.label + "-----");
    return out.join("\n");
};

},{"bc3c7930ded74eee":"bRL3M","cf885a4234262436":"b1CZy"}],"awa6C":[function(require,module,exports) {
"use strict";
const decoders = exports;
decoders.der = require("abb46f93da4a6a9");
decoders.pem = require("f1e062afeaaaac02");

},{"abb46f93da4a6a9":"foBr8","f1e062afeaaaac02":"iexo6"}],"foBr8":[function(require,module,exports) {
"use strict";
const inherits = require("7c238308bb002386");
const bignum = require("1928930ea2b8651");
const DecoderBuffer = require("caab1b42d6fb9403").DecoderBuffer;
const Node = require("72cb51ff1d236b42");
// Import DER constants
const der = require("43b3126d1d799ae0");
function DERDecoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DERDecoder;
DERDecoder.prototype.decode = function decode(data, options) {
    if (!DecoderBuffer.isDecoderBuffer(data)) data = new DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function DERNode(parent) {
    Node.call(this, "der", parent);
}
inherits(DERNode, Node);
DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    const state = buffer.save();
    const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
};
DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    const decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    let len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    const state = buffer.save();
    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === "end") break;
    }
};
DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    const result = [];
    while(!buffer.isEmpty()){
        const possibleEnd = this._peekTag(buffer, "end");
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, "der", options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === "bitstr") {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === "bmpstr") {
        const raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error("Decoding of string type: bmpstr length mismatch");
        let str = "";
        for(let i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === "numstr") {
        const numstr = buffer.raw().toString("ascii");
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === "octstr") return buffer.raw();
    else if (tag === "objDesc") return buffer.raw();
    else if (tag === "printstr") {
        const printstr = buffer.raw().toString("ascii");
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error("Decoding of string type: " + tag + " unsupported");
};
DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 0x80) identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        let tmp = values[result.join(" ")];
        if (tmp === undefined) tmp = values[result.join(".")];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    const str = buffer.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === "gentime") {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === "utctime") {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error("Decoding " + tag + " time is not supported yet");
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
DERNode.prototype._decodeBool = function decodeBool(buffer) {
    const res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    const raw = buffer.raw();
    let res = new bignum(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function") entity = entity(obj);
    return entity._getDecoder("der").tree;
};
// Utility methods
function derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    const cls = der.tagClass[tag >> 6];
    const primitive = (tag & 0x20) === 0;
    // Multi-octet tag - load
    if ((tag & 0x1f) === 0x1f) {
        let oct = tag;
        tag = 0;
        while((oct & 0x80) === 0x80){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 0x7f;
        }
    } else tag &= 0x1f;
    const tagStr = der.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 0x80) return null;
    // Definite form
    if ((len & 0x80) === 0) // Short form
    return len;
    // Long form
    const num = len & 0x7f;
    if (num > 4) return buf.error("length octect is too long");
    len = 0;
    for(let i = 0; i < num; i++){
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

},{"7c238308bb002386":"bRL3M","1928930ea2b8651":"65jkx","caab1b42d6fb9403":"1GNVB","72cb51ff1d236b42":"l9Edp","43b3126d1d799ae0":"i6Hqy"}],"iexo6":[function(require,module,exports) {
"use strict";
const inherits = require("c2d50a9d5a6f334a");
const Buffer = require("34248664f237b3bc").Buffer;
const DERDecoder = require("dc9bd6cca8dafd6");
function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = "pem";
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;
PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for(let i = 0; i < lines.length; i++){
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== "BEGIN") break;
            start = i;
        } else {
            if (match[1] !== "END") break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error("PEM section not found for: " + label);
    const base64 = lines.slice(start + 1, end).join("");
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, "");
    const input = Buffer.from(base64, "base64");
    return DERDecoder.prototype.decode.call(this, input, options);
};

},{"c2d50a9d5a6f334a":"bRL3M","34248664f237b3bc":"aLyFx","dc9bd6cca8dafd6":"foBr8"}],"3q4wA":[function(require,module,exports) {
"use strict";
const base = exports;
base.Reporter = require("59a43dc644aa14a1").Reporter;
base.DecoderBuffer = require("bb5e01939a3ed5de").DecoderBuffer;
base.EncoderBuffer = require("bb5e01939a3ed5de").EncoderBuffer;
base.Node = require("97802675bd1acef");

},{"59a43dc644aa14a1":"2Vti8","bb5e01939a3ed5de":"1GNVB","97802675bd1acef":"l9Edp"}],"oiTK8":[function(require,module,exports) {
"use strict";
const constants = exports;
// Helper
constants._reverse = function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
};
constants.der = require("cd34b6c5ba00554c");

},{"cd34b6c5ba00554c":"i6Hqy"}],"Tf0QA":[function(require,module,exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
"use strict";
var asn = require("373dc11d39ac511a");
var Time = asn.define("Time", function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
    this.seq().obj(this.key("type").objid(), this.key("value").any());
});
var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
});
var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
});
var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
    this.setof(AttributeTypeValue);
});
var RDNSequence = asn.define("RDNSequence", function() {
    this.seqof(RelativeDistinguishedName);
});
var Name = asn.define("Name", function() {
    this.choice({
        rdnSequence: this.use(RDNSequence)
    });
});
var Validity = asn.define("Validity", function() {
    this.seq().obj(this.key("notBefore").use(Time), this.key("notAfter").use(Time));
});
var Extension = asn.define("Extension", function() {
    this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
});
var TBSCertificate = asn.define("TBSCertificate", function() {
    this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(AlgorithmIdentifier), this.key("issuer").use(Name), this.key("validity").use(Validity), this.key("subject").use(Name), this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(Extension).optional());
});
var X509Certificate = asn.define("X509Certificate", function() {
    this.seq().obj(this.key("tbsCertificate").use(TBSCertificate), this.key("signatureAlgorithm").use(AlgorithmIdentifier), this.key("signatureValue").bitstr());
});
module.exports = X509Certificate;

},{"373dc11d39ac511a":"iV1JX"}],"bvb6u":[function(require,module,exports) {
module.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');

},{}],"bNDUb":[function(require,module,exports) {
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
var evp = require("482ca5fecee84bd1");
var ciphers = require("5e77b1b6b79a5d20");
var Buffer = require("fcf1038e6a690508").Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match(findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ""), "base64");
    } else {
        var suite = "aes" + match[1];
        var iv = Buffer.from(match[2], "hex");
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ""), "base64");
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = Buffer.concat(out);
    }
    var tag = key.match(startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

},{"482ca5fecee84bd1":"1rd4d","5e77b1b6b79a5d20":"hnlHj","fcf1038e6a690508":"eW7r9"}],"iadQk":[function(require,module,exports) {
module.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');

},{}],"vbFso":[function(require,module,exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require("c893e8283afd176a").Buffer;
var BN = require("18576d045784617e");
var EC = require("9429de8047bf329a").ec;
var parseKeys = require("88de5f3d7e6f8c00");
var curves = require("69d69f2e18a199ce");
function verify(sig, hash, key, signType, tag) {
    var pub = parseKeys(key);
    if (pub.type === "ec") {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") throw new Error("wrong public key type");
        return ecVerify(sig, hash, pub);
    } else if (pub.type === "dsa") {
        if (signType !== "dsa") throw new Error("wrong public key type");
        return dsaVerify(sig, hash, pub);
    } else {
        if (signType !== "rsa" && signType !== "ecdsa/rsa") throw new Error("wrong public key type");
    }
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(0xff);
        padNum++;
    }
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    pad = Buffer.from(pad);
    var red = BN.mont(pub.modulus);
    sig = new BN(sig).toRed(red);
    sig = sig.redPow(new BN(pub.publicExponent));
    sig = Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while(++i < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function ecVerify(sig, hash, pub) {
    var curveId = curves[pub.data.algorithm.curve.join(".")];
    if (!curveId) throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
    var curve = new EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = parseKeys.signature.decode(sig, "der");
    var s = unpacked.s;
    var r = unpacked.r;
    checkValue(s, q);
    checkValue(r, q);
    var montp = BN.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error("invalid sig");
    if (b.cmp(q) >= q) throw new Error("invalid sig");
}
module.exports = verify;

},{"c893e8283afd176a":"eW7r9","18576d045784617e":"VopIn","9429de8047bf329a":"1NKsH","88de5f3d7e6f8c00":"4Szbv","69d69f2e18a199ce":"iadQk"}],"9Rcg1":[function(require,module,exports) {
var Buffer = require("59d8fd0d64d5aa42").Buffer;
var elliptic = require("a6b1ec3b8e72335c");
var BN = require("8c5a992927812eef");
module.exports = function createECDH(curve) {
    return new ECDH(curve);
};
var aliases = {
    secp256k1: {
        name: "secp256k1",
        byteLength: 32
    },
    secp224r1: {
        name: "p224",
        byteLength: 28
    },
    prime256v1: {
        name: "p256",
        byteLength: 32
    },
    prime192v1: {
        name: "p192",
        byteLength: 24
    },
    ed25519: {
        name: "ed25519",
        byteLength: 32
    },
    secp384r1: {
        name: "p384",
        byteLength: 48
    },
    secp521r1: {
        name: "p521",
        byteLength: 66
    }
};
aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;
function ECDH(curve) {
    this.curveType = aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || "utf8";
    if (!Buffer.isBuffer(other)) other = new Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return formatReturnValue(out, enc, this.curveType.byteLength);
};
ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === "compressed", true);
    if (format === "hybrid") {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return formatReturnValue(key, enc);
};
ECDH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue(this.keys.getPrivate(), enc);
};
ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || "utf8";
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || "utf8";
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length);
        zeros.fill(0);
        buf = Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"59d8fd0d64d5aa42":"fCgem","a6b1ec3b8e72335c":"1NKsH","8c5a992927812eef":"68fon"}],"68fon":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("1b9e2dcc2d1e58c5").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"1b9e2dcc2d1e58c5":"jhUEF"}],"h9Rdh":[function(require,module,exports) {
exports.publicEncrypt = require("d84cba4f52311cc8");
exports.privateDecrypt = require("f9c6d8fbe09b61c");
exports.privateEncrypt = function privateEncrypt(key, buf) {
    return exports.publicEncrypt(key, buf, true);
};
exports.publicDecrypt = function publicDecrypt(key, buf) {
    return exports.privateDecrypt(key, buf, true);
};

},{"d84cba4f52311cc8":"e6nSQ","f9c6d8fbe09b61c":"jIkKI"}],"e6nSQ":[function(require,module,exports) {
var parseKeys = require("ca2697dbde558d1");
var randomBytes = require("4704ad09aa96a56b");
var createHash = require("b8a92fd1d9e43252");
var mgf = require("469be15a31031bba");
var xor = require("f9f3694c0f7388b6");
var BN = require("cb7a38ec1a0039d7");
var withPublic = require("969e1e2dd90e2fbe");
var crt = require("9022efe01867a612");
var Buffer = require("d610bb618706f42f").Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = oaep(key, msg);
    else if (padding === 1) paddedMsg = pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new BN(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error("data too long for modulus");
    } else throw new Error("unknown padding");
    if (reverse) return crt(paddedMsg, key);
    else return withPublic(paddedMsg, key);
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash("sha1").update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error("message too long");
    var ps = Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = randomBytes(hLen);
    var maskedDb = xor(Buffer.concat([
        iHash,
        ps,
        Buffer.alloc(1, 1),
        msg
    ], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new BN(Buffer.concat([
        Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error("message too long");
    var ps;
    if (reverse) ps = Buffer.alloc(k - mLen - 3, 0xff);
    else ps = nonZero(k - mLen - 3);
    return new BN(Buffer.concat([
        Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        Buffer.alloc(1),
        msg
    ], k));
}
function nonZero(len) {
    var out = Buffer.allocUnsafe(len);
    var i = 0;
    var cache = randomBytes(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = randomBytes(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

},{"ca2697dbde558d1":"4Szbv","4704ad09aa96a56b":"8hjhE","b8a92fd1d9e43252":"2WyL8","469be15a31031bba":"e2JgG","f9f3694c0f7388b6":"iaxu0","cb7a38ec1a0039d7":"3pDum","969e1e2dd90e2fbe":"fFkPV","9022efe01867a612":"e594P","d610bb618706f42f":"eW7r9"}],"e2JgG":[function(require,module,exports) {
var createHash = require("b36bb21196daa39");
var Buffer = require("cfa1ea60eac1ebfa").Buffer;
module.exports = function(seed, len) {
    var t = Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = i2ops(i++);
        t = Buffer.concat([
            t,
            createHash("sha1").update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function i2ops(c) {
    var out = Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

},{"b36bb21196daa39":"2WyL8","cfa1ea60eac1ebfa":"eW7r9"}],"iaxu0":[function(require,module,exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while(++i < len)a[i] ^= b[i];
    return a;
};

},{}],"3pDum":[function(require,module,exports) {
(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("64c9d23ade4c9eaa").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"64c9d23ade4c9eaa":"jhUEF"}],"fFkPV":[function(require,module,exports) {
var BN = require("94162e508c4195c3");
var Buffer = require("1bab2adfd8072b94").Buffer;
function withPublic(paddedMsg, key) {
    return Buffer.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
}
module.exports = withPublic;

},{"94162e508c4195c3":"3pDum","1bab2adfd8072b94":"eW7r9"}],"jIkKI":[function(require,module,exports) {
var parseKeys = require("6c46b1d8bb7eae7b");
var mgf = require("9e51003323ea065d");
var xor = require("637b57d34a8dda25");
var BN = require("3927561f39566b29");
var crt = require("521cbc4ce6042d5b");
var createHash = require("95282d7c0e66f364");
var withPublic = require("1bc2f92e3c398dbe");
var Buffer = require("802d086fb6d63368").Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) throw new Error("decryption error");
    var msg;
    if (reverse) msg = withPublic(new BN(enc), key);
    else msg = crt(enc, key);
    var zBuffer = Buffer.alloc(k - msg.length);
    msg = Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return oaep(key, msg);
    else if (padding === 1) return pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error("unknown padding");
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = createHash("sha1").update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error("decryption error");
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) throw new Error("decryption error");
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error("decryption error");
    return db.slice(i);
}
function pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error("decryption error");
    return msg.slice(i);
}
function compare(a, b) {
    a = Buffer.from(a);
    b = Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while(++i < len)dif += a[i] ^ b[i];
    return dif;
}

},{"6c46b1d8bb7eae7b":"4Szbv","9e51003323ea065d":"e2JgG","637b57d34a8dda25":"iaxu0","3927561f39566b29":"3pDum","521cbc4ce6042d5b":"e594P","95282d7c0e66f364":"2WyL8","1bc2f92e3c398dbe":"fFkPV","802d086fb6d63368":"eW7r9"}],"k3tsT":[function(require,module,exports) {
var global = arguments[3];
var process = require("e52c82591caff1d7");
"use strict";
function oldBrowser() {
    throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
}
var safeBuffer = require("954d667c0302f12c");
var randombytes = require("7041a0e993c249ef");
var Buffer = safeBuffer.Buffer;
var kBufferMaxLength = safeBuffer.kMaxLength;
var crypto = global.crypto || global.msCrypto;
var kMaxUint32 = Math.pow(2, 32) - 1;
function assertOffset(offset, length) {
    if (typeof offset !== "number" || offset !== offset) throw new TypeError("offset must be a number");
    if (offset > kMaxUint32 || offset < 0) throw new TypeError("offset must be a uint32");
    if (offset > kBufferMaxLength || offset > length) throw new RangeError("offset out of range");
}
function assertSize(size, offset, length) {
    if (typeof size !== "number" || size !== size) throw new TypeError("size must be a number");
    if (size > kMaxUint32 || size < 0) throw new TypeError("size must be a uint32");
    if (size + offset > length || size > kBufferMaxLength) throw new RangeError("buffer too small");
}
if (crypto && crypto.getRandomValues || false) {
    exports.randomFill = randomFill;
    exports.randomFillSync = randomFillSync;
} else {
    exports.randomFill = oldBrowser;
    exports.randomFillSync = oldBrowser;
}
function randomFill(buf, offset, size, cb) {
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === "function") {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === "function") {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== "function") throw new TypeError('"cb" argument must be a function');
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb);
}
function actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    crypto.getRandomValues(uint);
    if (cb) {
        process.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        randombytes(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes = randombytes(size);
    bytes.copy(buf, offset);
    return buf;
}
function randomFillSync(buf, offset, size) {
    if (typeof offset === "undefined") offset = 0;
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size);
}

},{"e52c82591caff1d7":"d5jf4","954d667c0302f12c":"eW7r9","7041a0e993c249ef":"8hjhE"}],"4QvE8":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"dotenv","version":"16.1.4","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://github.com/motdotla/dotenv?sponsor=1","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}');

},{}],"7QNnF":[function(require,module,exports) {
// ../config.js accepts options via environment variables
const options = {};
module.exports = options;

},{}],"2uqY9":[function(require,module,exports) {
const re = /^dotenv_config_(encoding|path|debug|override)=(.+)$/;
module.exports = function optionMatcher(args) {
    return args.reduce(function(acc, cur) {
        const matches = cur.match(re);
        if (matches) acc[matches[1]] = matches[2];
        return acc;
    }, {});
};

},{}]},["hF8lp","igcvL"], "igcvL", "parcelRequire0703")

//# sourceMappingURL=index.5baa4167.js.map
